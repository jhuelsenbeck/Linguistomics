using Format, Units, Math, IO, Style;

include "English";
include "Spanish";
include "Library";
include "LanguageTree";
include "IPA";
include "Rules";
include "RevBayes";
include "Style";
include "References";
include "Segment Frequencies";
include "Formulas";
include "Methods";
include "Introduction";
include "Slides";
include "Tables";
include "Languages";
include "../../nytril/deploy/citations";
include "../../nytril/deploy/graphics";

//include "LanguageSet";
include "LanguageTest";
//======================================================================

Main.Documents = [
  new SubmissionViewClass,
  new PaperViewClass,
  new ExperimentViewClass,
  new DiagnosticsViewClass,
  new SourceViewClass,
  new JohnPresentationClass,
  new DavidPresentationClass,
];

void Main.Run {
  Results.InitSource;
}

Main.Query = MatchAll WordClass {
  MatchAll IPA.Segments.rr;
  MatchAll IPA.Segments.e;
  SegmentCount: ..5;
};
//======================================================================

Authors = [
  People.DMGoldstein,
  People.SHMcCreight,
  People.JPHuelsenbeck,
];
//======================================================================

ResultsClass Results = new ResultsClass;

//======================================================================

namespace Info {
  LinkMin        = 5;
  ImageFolder    = Folders.Source Folder("Images");
  OutFolder      = Folders.Repository Folder("Run") RunFolder;
  RevSourceName  = FileName("Program") Extensions.RevBayes;
  CharacterName  = FileName("Characters") Extensions.Nexus;
  GammaTrees     = FileName("Gamma.trees");
  GammaLog       = FileName("Gamma.log");
  MAPName        = FileName("map.tree");
  MCCName        = FileName("mcc.tree");
  ConsensusName  = FileName("consensus.tree");
  ConsensusTree  = IO.Read(OutFolder ConsensusName, FileFormats.Nexus).trees.TREE1;
  MCCTree        = IO.Read(OutFolder MAPName, FileFormats.Nexus).trees.TREE1;
  MAPTree        = IO.Read(OutFolder MAPName, FileFormats.Nexus).trees.TREE1;
}
//======================================================================

class SubmissionViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#670da93e-0b8c-46f0-8ab2-01de4ea8ebdb#, "Submission");
  }

  FooterBlock = Block {
    Paragraph {
      ParAlignment: ParAlignments.Right;
      PageNumber; "/"; PageCount;
    }
  };

  override GetMainDocument(ResultsClass results) = MainDocument {
    PageSection {
      Footer: FooterBlock {
        Even: FooterBlock;
        First: Block;
      };

      MainTitle {
        Title;
      };

      ShowAuthorList(Authors);

      Header1 {Abstract.Title};
      Abstract.Body;
      ShowContent(PaperSections.Introduction);
      Header1 {Lang.Results};

      ShowContent(PaperSections.WordTransformation);
      ShowContent(PaperSections.WordSegmentRelationships);
      ShowContent(PaperSections.RomanceLanguagePhylogeny);
      ShowContent(PaperSections.Discussion);
      ShowContent(PaperSections.MethodsSummary);
      ShowContent(PaperSections.DataSummary);
      ShowContent(PaperSections.ModelInference);
      ShowContent(PaperSections.DataCuration);
      ShowContent(PaperSections.Acknowledgements);
      ShowContent(PaperSections.Contributions);
    };

    ShowBibliography;
    PageSection {
      ShowFigureDoc(Figures.FrequencyDiagramExperiment);
    }
  };
}
//======================================================================

class PaperViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#9082a441-cf06-4a95-b484-2cb5f5484c59#, "White Paper");
  }

  HeaderBlock = Block {
    Span {
      TextCase: TextCases.AllUpper;
      Title;
    }
  };

  override GetMainDocument(ResultsClass results) = MainDocument {
    var appendices = [
      new AppendixClass("Program Output", results.ShowLanguageTrees),
      new AppendixClass("Statistics", results.ShowStats),
      new AppendixClass(Lang.CharacterRules, results.CharacterRule.ShowDescription(results.UniqueSegments)),
      new AppendixClass(Lang.PartitionRules, results.PartitionRule.ShowPartitions),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
    ];

    PageSection {
      Header: HeaderBlock {
        Distance: 0.125 inches;
        MarginT: 0.125 inch;
        Even: HeaderBlock;
        First: Block;
      };

      MainTitle {
        Title;
      };

      ShowAuthorList(Authors);

      Header1 {Abstract.Title};
      Abstract.Body;

      ShowContent(PaperSections.Introduction);
      ShowContent(PaperSections.Methods);
      ShowContent(PaperSections.Conclusion);


//      Header2 {Lang.Authors};
//      ShowAuthorFull(each Authors);

//      Header2 {Lang.Appendices};
//      AppendixRow(each appendices);
    };

    ShowBibliography;
    ShowAppendix(each appendices);
  };
}
//======================================================================

class ExperimentViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#971c3e2a-d5f9-457e-871b-465ce475a150#, "Experiment");
  }

  override GetMainDocument(ResultsClass results) = MainDocument {
    var appendices = [
      new AppendixClass(Lang.CharacterRules, results.CharacterRule.ShowDescription(results.UniqueSegments)),
      new AppendixClass(Lang.PartitionRules, results.PartitionRule.ShowPartitions),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
      new AppendixClass(Lang.Results, results.ShowLanguageTrees),
    ];

    PageSection {
      AppendixTitle {
        Title;
      };
      Header2 {Lang.Appendices};
      AppendixRow(each appendices);
    };
    ShowAppendix(each appendices);
  };
}
//======================================================================

class DiagnosticsViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
  }

  ShowSegmentTables = Block {
    var set = new HashSetClass(512, SegmentClass);
    MatchingVowels.ShowTable(set);
    MatchingConsonants.PulmonicTable.ShowTable(set);
    MatchingConsonants.NonPulmonicTable.ShowTable(set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(set);
    MatchingOther.ShowTable(set);
  };

  override GetMainDocument(ResultsClass results) = Style.MainDocument {
    var appendices = [
      new AppendixClass(Lang.SegmentFrequencies, results.FrequencyChart(Size(DocMetrics.PageContent.Width, 3 inches))),
      new AppendixClass("Prior Frequencies", results.CalcStatic.PartitionBlock),
      new AppendixClass("Symbols", ShowSymbols),
      new AppendixClass("Words containing each segment", results.ShowWordsForEachSegment),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowTable),
      new AppendixClass("Segment Groups", ShowSegmentTables),
      new AppendixClass("Euler Feature Diagram", new EulerDiagramClass.FeatureChart),
      new AppendixClass(Lang.IPAFullName, results.SegmentTable),
      new AppendixClass("Feature Tree", SegmentTree.ShowTree),
      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new AppendixClass(Lang.Languages, results.ShowLanguageDetails),
    ];

    ShowAppendix(each appendices);
  };
}
//======================================================================

class SourceViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Source");
  }

  override GetMainDocument(ResultsClass results) = Style.MainDocument {
    var appendices = [
      new AppendixClass("Tongue Twister Configuration", results.ConfigFile),
//      new AppendixClass("RevBayes Source File", results.RevBayesSource),
//      new AppendixClass("Character File", results.CharacterFile(2)),
//      new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
    ];

    ShowAppendix(each appendices);
  };
}
//======================================================================



