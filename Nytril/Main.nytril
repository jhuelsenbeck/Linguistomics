using Format, Units, Math, IO;

include "English";
include "Spanish";
include "Library";
include "Languages";
include "LanguageTree";
include "IPA";
include "Rules";
include "RevBayes";
include "Style";
include "References";
include "Segment Frequencies";
include "Concepts";
include "Formulas";
include "Methods";
include "Slides";
include "Tables";
include "../../nytril/deploy/citations/citations";
//======================================================================

with Main {
  Documents = new DocumentViewClass(null) {
    new PaperViewClass;
    new ExperimentViewClass;
    new DiagnosticsViewClass;
    new JohnPresentationClass;
    new DavidPresentationClass;
  };

  void Run {
    Results.Calculate;
  }

  Links = {
    LinkTypes.ViewReference linkto References;
    LinkTypes.ViewInfo linkto ViewInfo;
    LinkTypes.ViewAuthor linkto Authors;
  };
}
//======================================================================

// No spaces in the name below!
// RevBayes has a problem with folder names that contain spaces...

Results = new ResultsClass("Run1");

ViewInfo = new ViewInfoClass {
  Title: "Understanding Language Evolution Using an Event-Based Model";
//  Description: "Test Description";
//  Comment: "Test Comment";
//  Subject: "Test Subject";
//  Keywords: "Test Keywords";
};
//======================================================================

with Info {
  Generations  = 1000;
  ImageFolder  = Folders.Source Folder("Images");
}
//======================================================================

class PaperViewClass: BaseViewClass {
  var Appendices;

  Constructor {
    super.Constructor("White Paper", "paper", ConfigurationClass.DocumentTypes.Normal);

    Appendices = [
      new AppendixClass("Program Output", Results.ShowLanguageTrees),
      new AppendixClass("Statistics", Results.ShowStats),
      new AppendixClass(Lang.CharacterRules, Results.CharacterRule.ShowDescription),
      new AppendixClass(Lang.PartitionRules, Results.PartitionRule.ShowPartitions),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
    ];
  }

  HeaderBlock = Block {
    Span {
      TextCase: TextCases.AllUpper;
      ViewInfo.Title;
    }
  };

  override GetDocument = Style.MainDocument {
    Style.PageSection {
      Header: HeaderBlock {
        Distance: 0.125 inches;
        MarginT: 0.125 inch;
        Even: HeaderBlock;
        First: Block;
      };

      Style.MainTitle {
        ViewInfo.Title;
      };

      Style.ShowAuthorList(Authors);

      Style.HeaderCentered(Abstract.Title);
      Abstract.Body;

      Style.ShowContent(each Content);

      Style.HeaderCentered(Lang.Authors);
      Style.ShowAuthorFull(each Authors);

      Style.HeaderCentered(Lang.Appendices);
      Style.AppendixRow(each Appendices);
    };
    Style.ShowAppendix(each Appendices);
//    PageBreak;
    Bibliography;
  };
}
//======================================================================

class ExperimentViewClass: BaseViewClass {
  var Appendices;

  Constructor {
    super.Constructor("Experiment", "experiment", ConfigurationClass.DocumentTypes.Normal);

    Appendices = [
      new AppendixClass(Lang.CharacterRules, Results.CharacterRule.ShowDescription),
      new AppendixClass(Lang.PartitionRules, Results.PartitionRule.ShowPartitions),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
      new AppendixClass(Lang.Results, Results.ShowLanguageTrees),
    ];
  }

  override GetDocument = Style.MainDocument {
    Style.PageSection {
      Style.AppendixTitle {
        ViewInfo.Title;
      };
      Style.HeaderCentered(Lang.Appendices);
      Style.AppendixRow(each Appendices);
    };
    Style.ShowAppendix(each Appendices);
  };
}
//======================================================================

ShowSymbols = Block {
  (each Defs).Appendix;
};

class DiagnosticsViewClass: BaseViewClass {
  var Appendices;

  Constructor {
    super.Constructor("Diagnostics", "diag", ConfigurationClass.DocumentTypes.Normal);

    Appendices = [
      new AppendixClass(Lang.SegmentFrequencies, Results.SegmentFrequencies(Size(DocMetrics.PageContent.Width, 3 inches))),
      new AppendixClass("Tongue Twister Configuration", Results.ConfigFile),
      new AppendixClass("RevBayes Source File", Results.RevBayesSource),
      new AppendixClass("Segments used in the word list", DisplayCharacters.ShowTable),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowTable),
      new AppendixClass("Segment Groups", MatchingConsonants.ShowTables),
      new AppendixClass("Euler Feature Diagram", IPA.FeatureChart),
      new AppendixClass(Lang.IPAFullName, IPA.SegmentTable),
      new AppendixClass("Feature Tree", SegmentTree.ShowTree),
      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new AppendixClass(Lang.Languages, Results.ShowLanguageDetails),

//      new AppendixClass("Character File", Results.CharacterFile(2)),
    //  new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
//      new AppendixClass("Symbols", ShowSymbols),
    ];
  }

  override GetDocument = Style.MainDocument {
    Style.ShowAppendix(each Appendices);
  };
}
//======================================================================



