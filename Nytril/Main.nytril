using Format, Units, Math, IO, Style;

include "English";
include "Spanish";
include "Library";
include "Languages";
include "LanguageTree";
include "IPA";
include "Rules";
include "RevBayes";
include "Style";
include "References";
include "Segment Frequencies";
include "Formulas";
include "Methods";
include "Slides";
include "Tables";
include "../../nytril/deploy/citations";
include "../../nytril/deploy/graphics";
//======================================================================

include "Concepts/Pronouns";
include "Concepts/Nouns";
include "Concepts/Verbs";
include "Concepts/Adjectives";
include "Concepts/Numbers";
include "Concepts/Misc";
//======================================================================

with Main {
  Documents = new DocumentViewClass(null) {
    new SubmissionViewClass;
    new PaperViewClass;
    new ExperimentViewClass;
    new DiagnosticsViewClass;
    new JohnPresentationClass;
    new DavidPresentationClass;
  };

  void Run {
    Results.Calculate;
  }

  Links = {
    LinkTypes.ViewReference linkto References;
    LinkTypes.ViewAuthor linkto Authors;
  };
}
//======================================================================

// No spaces in the name below!
// RevBayes has a problem with folder names that contain spaces...

Authors = [
  People.DMGoldstein,
  People.SHMcCreight,
  People.JPHuelsenbeck,
];

Results = new ResultsClass("Run1");

//======================================================================

with Info {
  Generations  = 1000;
  ImageFolder  = Folders.Source Folder("Images");
}

ReadTree(title, path) {
  var data = IO.Read(path, FileFormats.Nexus);
  return ShowTree(title, Lang.ChangesPerBranch, data.trees.TREE1);
}
//======================================================================

class SubmissionViewClass: BaseViewClass {
  Constructor {
    super.Constructor("Submission", #3ab5559cf52bdb4484be6eea54bfade3#, ConfigurationClass.DocumentTypes.Normal);
  }

  HeaderBlock = Block {
    Span {
      TextCase: TextCases.AllUpper;
      Title;
    }
  };

  override GetDocument = MainDocument {
    PageSection {
      Header: HeaderBlock {
        Distance: 0.125 inches;
        MarginT: 0.125 inch;
        Even: HeaderBlock;
        First: Block;
      };

      MainTitle {
        Title;
      };

      ShowAuthorList(Authors);
    };
    ShowBibliography;
    PageSection {
      ShowFigure(Figures.FrequencyDiagram.Data);
      ShowFigure(Figures.SegmentFrequencies.Data);
    }
  };
}
//======================================================================

class PaperViewClass: BaseViewClass {
  Constructor {
    super.Constructor("White Paper", #8c6d803a4002f2409d6d4f4697685b1d#, ConfigurationClass.DocumentTypes.Normal);
  }

  HeaderBlock = Block {
    Span {
      TextCase: TextCases.AllUpper;
      Title;
    }
  };

  override GetDocument = MainDocument {
    var appendices = [
      new AppendixClass("Program Output", Results.ShowLanguageTrees),
      new AppendixClass("Statistics", Results.ShowStats),
      new AppendixClass(Lang.CharacterRules, Results.CharacterRule.ShowDescription),
      new AppendixClass(Lang.PartitionRules, Results.PartitionRule.ShowPartitions),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
    ];

    PageSection {
      Header: HeaderBlock {
        Distance: 0.125 inches;
        MarginT: 0.125 inch;
        Even: HeaderBlock;
        First: Block;
      };

      MainTitle {
        Title;
      };

      ShowAuthorList(Authors);

      Header2 {Abstract.Title};
      Abstract.Body;

      ShowContent(each Content);

//      Header2 {Lang.Authors};
//      ShowAuthorFull(each Authors);

//      Header2 {Lang.Appendices};
//      AppendixRow(each appendices);
    };

    ShowBibliography;
    ShowAppendix(each appendices);
  };
}
//======================================================================

class ExperimentViewClass: BaseViewClass {
  Constructor {
    super.Constructor("Experiment", #ee79e1d9e8467444a68c0e7a6a8c8a88#, ConfigurationClass.DocumentTypes.Normal);
  }

  override GetDocument = MainDocument {
    var appendices = [
      new AppendixClass(Lang.CharacterRules, Results.CharacterRule.ShowDescription),
      new AppendixClass(Lang.PartitionRules, Results.PartitionRule.ShowPartitions),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
      new AppendixClass(Lang.Results, Results.ShowLanguageTrees),
    ];

    PageSection {
      AppendixTitle {
        Title;
      };
      Header2 {Lang.Appendices};
      AppendixRow(each appendices);
    };
    ShowAppendix(each appendices);
  };
}
//======================================================================

ShowSymbols = Block {
  (each Defs).Appendix;
};

class DiagnosticsViewClass: BaseViewClass {
  Constructor {
    super.Constructor("Diagnostics", #595d071a2117fb47bd6b0ef6596666ce#, ConfigurationClass.DocumentTypes.Normal);
  }

  override GetDocument = Style.MainDocument {
    var appendices = [
      new AppendixClass(Lang.SegmentFrequencies, Results.FrequencyChart(Size(DocMetrics.PageContent.Width, 3 inches))),
      new AppendixClass("Symbols", ShowSymbols),
      new AppendixClass("Tongue Twister Configuration", Results.ConfigFile),
      new AppendixClass("RevBayes Source File", Results.RevBayesSource),
      new AppendixClass("Segments used in the word list", DisplayCharacters.ShowTable),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowTable),
      new AppendixClass("Segment Groups", MatchingConsonants.ShowTables),
      new AppendixClass("Euler Feature Diagram", IPA.FeatureChart),
      new AppendixClass(Lang.IPAFullName, IPA.SegmentTable),
      new AppendixClass("Feature Tree", SegmentTree.ShowTree),
      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new AppendixClass(Lang.Languages, Results.ShowLanguageDetails),

//      new AppendixClass("Character File", Results.CharacterFile(2)),
    //  new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
    ];

    ShowAppendix(each appendices);
  };
}
//======================================================================



