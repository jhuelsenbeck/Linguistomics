using Format, Units, Math, IO;

include "English";
include "Spanish";
include "Library";
include "Languages";
include "LanguageTree";
include "IPA";
include "Rules";
include "RevBayes";
include "Style";
include "References";
include "Concepts";
include "Formulas";
include "Methods";
include "Slides";
include "Tables";
//======================================================================

Main.Documents = new DocumentViewClass(null) {
  new PaperViewClass(ShowOutput);
  new DiagnosticsViewClass(ShowOutput);
  new JohnPresentationClass;
  new DavidPresentationClass;
};

void Main.Run {
  Compute.Calculate;
}
//======================================================================

// No spaces in the name below!
// RevBayes has a problem with folder names that contain spaces...

ShowOutput = "Run2";
Compute    = new ComputeClass(ShowOutput);
//======================================================================

with Info {
  Generations = 5000;

  ImageFolder = Folders.Source Folder("Images");

  Journal     = "Transactions of the Beysian Society";
  Publisher   = "The Baysian Society";
  Title       = Lang.SimulatedSegments;
  PriorTree   = GetTreeNodes(LanguageBranches.Romance);

  AuthorList = TextList {
    Style.Author(each Authors);
  };
}
//======================================================================

UsedConcepts = [
  Concepts.I,
  Concepts.Who,
  Concepts.What,
  Concepts.When,
  Concepts.How,
  Concepts.One,
  Concepts.Two,
  Concepts.Three,
  Concepts.Five,
  Concepts.Wide,
  Concepts.Fish,
  Concepts.Bird,
  Concepts.ToPlay,
  Concepts.Sun,
  Concepts.Moon,
  Concepts.Star,
  Concepts.Water,
  Concepts.Rain,
  Concepts.Lake,
  Concepts.Sea,
  Concepts.Salt,
  Concepts.Earth,
  Concepts.Sky,
  Concepts.Wind,
  Concepts.Fire,
  Concepts.Year,
  Concepts.Name,
  Concepts.Tongue,
  Concepts.Stone,
  Concepts.River,
  Concepts.Sand,
  Concepts.ToGive,
];

UsedLanguages = [
  Languages.Latin,
  Languages.French,
  Languages.Italian,
  Languages.Spanish,
  Languages.PortugueseBrazil,
  Languages.Portuguese,
  Languages.Catalan,
  Languages.Walloon,
  Languages.Friulian,
  Languages.Romanian,
];
//=====================================================================

with ExampleConcept {
  Cognate            = FindSlice(Results.UsedCognates, c => c.Concept == Concepts.Star, 1)[0];
  GetTaxon(language) = Math.FindSlice(Results.TaxaArray, t => t.Language == language)[0];

  TaxonIndex     = 0;
  Taxon          = Results.TaxaArray[TaxonIndex];
  Callout        = Results.TaxaArray[3];
  Name           = ToLower(Cognate.Name);
  ExLanguages    = [Languages.Romanian, Languages.Catalan, Languages.Portuguese, Languages.French, Languages.Friulian];
  TaxonList      = GetTaxon(each ExLanguages);
  LangNames      = (each TaxonList).Language;
  CalloutSegment = FirstLetter(Callout);
  LangWord       = Span {(each Cognate.Words[TaxonIndex].Segments).Ipa};

  FirstLetter(taxon) = Cognate.Words[taxon.Index].Segments[0].ShowSegment;
  FirstLetters = FirstLetter(each TaxonList);
}
//======================================================================

class PaperViewClass: BaseViewClass {
  var Appendices;

  Constructor {
    super.Constructor("White Paper", "paper", ConfigurationClass.DocumentTypes.Normal);

    Appendices = [
      new AppendixClass("Options File", Compute.GetOptionsSource),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
      new AppendixClass("Symbols", ShowSymbols),
      new AppendixClass("Transition Rule File", Compute.TransitionRuleFile),
      new AppendixClass("Program Output", Compute.ShowLanguageTrees),
    ];
  }

  override GetDocument = Document {
    DocMetadata;

    Style.PageSection {
      Header: Style.NormalHeader(Info.Journal) {
        Distance: 0.125 inches;
        MarginT: 0.125 inch;
        Even: Style.NormalHeader(Info.Journal);
        First: Block;
      };

      Paragraph {
        ParAlignment: ParAlignments.Center;
        Logo;
      };
      Style.Title(Info.Title);
      Paragraph {
        ParAlignment: ParAlignments.Center;
        Info.AuthorList;
      };

      Style.HeaderCentered(Abstract.Title);
      Abstract.Body;

      Style.ShowContent(each Content);
      Style.ShowAuthors(Authors);

      Style.HeaderCentered(Lang.Appendices);
      Style.AppendixRow(each Appendices);

      Style.ShowReferences(References);
    };
    Style.ShowAppendix(each Appendices);
  };
}
//======================================================================

ShowSymbols = Block {
  (each Defs).Appendix;
};

class DiagnosticsViewClass: BaseViewClass {
  var Appendices;

  Constructor {
    super.Constructor("Diagnostics", "diag", ConfigurationClass.DocumentTypes.Normal);

    Appendices = [
      new AppendixClass(Lang.TransitionRules, Compute.ShowTransitionRules),
//      new AppendixClass("RevBayes Source File", Compute.RevBayesSource),
      new AppendixClass("Character File", Nexus.CharacterFile(2)),
//      new AppendixClass("TKF Input Files", Nexus.TKFFiles),
      new AppendixClass("Segments used in the word list", DisplayCharacters.ShowTable),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowTable),
      new AppendixClass("Segment Groups", MatchingConsonants.ShowTables),
  //    new AppendixClass("Euler Feature Diagram", IPA.FeatureChart),
      new AppendixClass(Lang.IPAFullName, IPA.SegmentTable),
//      new AppendixClass("Feature Tree", SegmentTree.ShowTree),
//      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
    //  new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
      new AppendixClass(Lang.Languages, ShowLanguageDetails),
    ];
  }

  override GetDocument = Document {
    DocMetadata;
    Style.ShowAppendix(each Appendices);
  };
}
//======================================================================



