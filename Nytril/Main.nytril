using Format, Units, Math, IO;

include "English";
include "Library";
include "Languages";
include "LanguageTree";
include "IPA";
include "Style";
include "References";
include "WordForms";
include "Tables";
//======================================================================

Main.Run = [
//  Write(RevBayes.SourceFile, Info.RevSourcePath),
  Write(Results.LanguageTreeFile, Info.LanguageTreePath),
  Write(Results.CharacterFile, Info.CharacterPath),
  Write(Watch, Info.PaperPath Extensions.PDF),
//  Write(Watch, Info.PaperPath Extensions.Word),
//  IO.OpenDocument(Info.PaperPath Extensions.Word),
];
//======================================================================

enum ConceptsList {
  I,
  You,
  Water,
  Ear,
  New,
}


with Info {
  MainFolder       = Folders.Source;
  OutputFolder     = MainFolder Folder("Output");
  PaperPath        = OutputFolder FileName("Paper");
  LanguageTreePath = OutputFolder FileName("LanguageTree") Extensions.Nexus;
  RevSourcePath    = OutputFolder FileName("Analysis") Extensions.RevBayes;

  CharacterPath    = OutputFolder FileName("Characters") Extensions.Nexus;
  Journal          = "Transactions of the Beysian Society";
  Publisher        = "The Baysian Society";
  Title            = "Simulated Segment Evolution using the TKF91 Model";
  LanguageTree     = LanguageBranches.Romance;

  AuthorList = Span {
    Separator: ", ";
    LastSeparator: " {0} "(Lang.And);
    Style.Author(each Authors)
  };
}
//======================================================================

Watch = Style.WhitePaper {
  Title: Info.Title;
  Author: Info.AuthorList;
//  Description: "Test Description";
//  Comment: "Test Comment";
//  Subject: "Test Subject";
//  Keywords: "Test Keywords";

  Style.PageSection {
    Header: Style.NormalHeader(Info.Journal) {
      Distance: 0.125 inches;
      Even: Style.NormalHeader(Info.Journal);
      First: Block {
        Paragraph {
          ParAlignment: ParAlignments.Center;
          Logo;
        };
      }
    };
    Block {
      ParAlignment: ParAlignments.Center;
      Style.Title(Info.Title);
      Paragraph {
        Info.AuthorList
      };
    };
    Style.ShowAbstract(Abstract);
    Style.ShowContent(each Content);
    Style.ShowAuthors(Authors);
    Style.ShowAppendixTable;
    Style.ShowReferences(References);
  };
  Style.ShowAppendix(each Appendix)
};
//======================================================================

AddAppendix(title, content) = {
  Title: title;
  Content: content;
};

Appendix = [
  AddAppendix(Lang.ConceptsUsed, AllWords.ShowTable),
  AddAppendix("Character file", Results.CharacterFile),
  AddAppendix("Language Tree File", Results.LanguageTreeFile),
  AddAppendix("Segments used in the word list", DisplayCharacters.ShowTable),
  AddAppendix("Feature change in first segment", IPA.DriftSection),
  AddAppendix("Word Lists by Language", DisplayWords.ShowTable),
  AddAppendix("Segment Groups", MatchingConsonants.ShowTables),
  AddAppendix(Lang.Diacritics, MatchingDiacritics.ShowTable),
  AddAppendix("Euler Feature Diagram", IPA.FeatureChart),
  AddAppendix(Lang.IPAFullName, IPA.SegmentTable),
  AddAppendix(Lang.LanguagePhylogeny, Style.ShowLanguageTree),
  AddAppendix("Feature Tree", SegmentTree.ShowTree),
//  AddAppendix(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
];
//======================================================================

with Abstract {
  Title = Lang.Abstract;
  Body  = Block {
    Paragraph {
      "It all started in a little town called Madrid...";
    };
  };
}
//======================================================================

with Content.Introduction {
  Title = Lang.Introduction;
  Body  = Block {
    Paragraph {
      "In this paper, we attempt to do the impossible!";
    };
  };
}
//======================================================================

with Content.Methods {
  Title = Lang.Methods;
  Body  = Block {
    Paragraph {
      "We used any and all means necessary.";
    };
  };
}
//======================================================================

with Content.Conclusion {
  Title = Lang.Conclusion;
  Body  = Block {
    Paragraph {
      "Vene Vidi Vici";
    };
  };
}
//======================================================================



