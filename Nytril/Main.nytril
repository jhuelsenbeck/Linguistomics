using Format, Units, Math, IO, Style;

include "English";
include "Spanish";
include "Library";
include "Languages";
include "LanguageTree";
include "IPA";
include "Rules";
include "RevBayes";
include "Style";
include "References";
include "Segment Frequencies";
include "Formulas";
include "Methods";
include "Introduction";
include "Slides";
include "Tables";
include "../../nytril/deploy/citations";
include "../../nytril/deploy/graphics";
//======================================================================

include "Concepts/Pronouns";
include "Concepts/Nouns";
include "Concepts/Verbs";
include "Concepts/Adjectives";
include "Concepts/Numbers";
include "Concepts/Misc";
//======================================================================

with Main {
  Documents = [
    new SubmissionViewClass,
    new PaperViewClass,
    new ExperimentViewClass,
    new DiagnosticsViewClass,
    new SourceViewClass,
    new JohnPresentationClass,
    new DavidPresentationClass,
  ];

  void Run {
    Results.Calculate;
    Results.InitSource;
  }
}
//======================================================================

Authors = [
  People.DMGoldstein,
  People.SHMcCreight,
  People.JPHuelsenbeck,
];
//======================================================================

// No spaces in the name below!
// RevBayes has a problem with folder names that contain spaces...

ResultsClass Results = new ResultsClass("Run2");

//======================================================================

with Info {
  Generations  = 1_000_000;
  LinkMin      = 5;
  ImageFolder  = Folders.Source Folder("Images");
}

ReadTree(title, path) {
  var data = IO.Read(path, FileFormats.Nexus);
  return ShowTree(title, Lang.ChangesPerBranch, data.trees.con_50_majrule);
}
//======================================================================

class SubmissionViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#670da93e-0b8c-46f0-8ab2-01de4ea8ebdb#, "Submission");
  }

  FooterBlock = Block {
    Paragraph {
      ParAlignment: ParAlignments.Right;
      PageNumber; "/"; PageCount;
    }
  };

  override GetMainDocument = MainDocument {
    PageSection {
      Footer: FooterBlock {
        Even: FooterBlock;
        First: Block;
      };

      MainTitle {
        Title;
      };

      ShowAuthorList(Authors);

      Header1 {Abstract.Title};
      Abstract.Body;
      ShowContent(PaperSections.Introduction);
      Header1 {Lang.Results};

      ShowContent(PaperSections.WordTransformation);
      ShowContent(PaperSections.WordSegmentRelationships);
      ShowContent(PaperSections.RomanceLanguagePhylogeny);
      ShowContent(PaperSections.Discussion);
      ShowContent(PaperSections.MethodsSummary);
      ShowContent(PaperSections.DataSummary);
      ShowContent(PaperSections.ModelInference);
      ShowContent(PaperSections.DataCuration);
      ShowContent(PaperSections.Acknowledgements);
      ShowContent(PaperSections.Contributions);
    };

    ShowBibliography;
    PageSection {
      ShowFigureDoc(Figures.FrequencyDiagramExperiment);
    }
  };
}
//======================================================================

class PaperViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#9082a441-cf06-4a95-b484-2cb5f5484c59#, "White Paper");
  }

  HeaderBlock = Block {
    Span {
      TextCase: TextCases.AllUpper;
      Title;
    }
  };

  override GetMainDocument = MainDocument {
    var appendices = [
      new AppendixClass("Program Output", Results.ShowLanguageTrees),
      new AppendixClass("Statistics", Results.ShowStats),
      new AppendixClass(Lang.CharacterRules, Results.CharacterRule.ShowDescription),
      new AppendixClass(Lang.PartitionRules, Results.PartitionRule.ShowPartitions),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
    ];

    PageSection {
      Header: HeaderBlock {
        Distance: 0.125 inches;
        MarginT: 0.125 inch;
        Even: HeaderBlock;
        First: Block;
      };

      MainTitle {
        Title;
      };

      ShowAuthorList(Authors);

      Header1 {Abstract.Title};
      Abstract.Body;

      ShowContent(PaperSections.Introduction);
      ShowContent(PaperSections.Methods);
      ShowContent(PaperSections.Conclusion);


//      Header2 {Lang.Authors};
//      ShowAuthorFull(each Authors);

//      Header2 {Lang.Appendices};
//      AppendixRow(each appendices);
    };

    ShowBibliography;
    ShowAppendix(each appendices);
  };
}
//======================================================================

class ExperimentViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#971c3e2a-d5f9-457e-871b-465ce475a150#, "Experiment");
  }

  override GetMainDocument = MainDocument {
    var appendices = [
      new AppendixClass(Lang.CharacterRules, Results.CharacterRule.ShowDescription),
      new AppendixClass(Lang.PartitionRules, Results.PartitionRule.ShowPartitions),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
      new AppendixClass(Lang.Results, Results.ShowLanguageTrees),
    ];

    PageSection {
      AppendixTitle {
        Title;
      };
      Header2 {Lang.Appendices};
      AppendixRow(each appendices);
    };
    ShowAppendix(each appendices);
  };
}
//======================================================================

class DiagnosticsViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
  }

  ShowSegmentTables = Block {
    var set = new HashSetClass(512, SegmentClass);
    MatchingVowels.ShowTable(set);
    MatchingConsonants.PulmonicTable.ShowTable(set);
    MatchingConsonants.NonPulmonicTable.ShowTable(set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(set);
    MatchingOther.ShowTable(set);
  };

  override GetMainDocument = Style.MainDocument {
    var appendices = [
      new AppendixClass(Lang.SegmentFrequencies, Results.FrequencyChart(Size(DocMetrics.PageContent.Width, 3 inches))),
      new AppendixClass("Prior Frequencies", Results.CalcStatic.PartitionBlock),
      new AppendixClass("Symbols", ShowSymbols),
      new AppendixClass("Words containing each segment", Results.ShowWordsForEachSegment),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowTable),
      new AppendixClass("Segment Groups", ShowSegmentTables),
      new AppendixClass("Euler Feature Diagram", new EulerDiagramClass.FeatureChart),
      new AppendixClass(Lang.IPAFullName, Results.SegmentTable),
      new AppendixClass("Feature Tree", SegmentTree.ShowTree),
      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new AppendixClass(Lang.Languages, Results.ShowLanguageDetails),
    ];

    ShowAppendix(each appendices);
  };
}
//======================================================================

class SourceViewClass: BaseViewClass {
  Constructor {
    super.Constructor(#7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Source");
  }

  override GetMainDocument = Style.MainDocument {
    var appendices = [
      new AppendixClass("Tongue Twister Configuration", Results.ConfigFile),
      new AppendixClass("RevBayes Source File", Results.RevBayesSource),
      new AppendixClass("Character File", Results.CharacterFile(2)),
//      new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
    ];

    ShowAppendix(each appendices);
  };
}
//======================================================================



