using Format, Units, Math, IO;

include "English";
include "Spanish";
include "Library";
include "Languages";
include "LanguageTree";
include "IPA";
include "Style";
include "References";
include "WordForms";
include "Tables";
include "RevBayes";
//======================================================================

Main.Configurations = [
  new ConfigurationClass("United States") {
    Language: "en";
    PaperSystem: ConfigurationClass.PaperSystems.US;
    UnitSystem: ConfigurationClass.UnitSystems.Imperial;
  },

  new ConfigurationClass("Spain") {
    Language: "es";
    PaperSystem: ConfigurationClass.PaperSystems.A;
    UnitSystem: ConfigurationClass.UnitSystems.Metric;
  },
];
//======================================================================

class AnalysisViewClass: DocumentViewClass {
  var OutFolder;

  Constructor(outfolder) {
    OutFolder = outfolder;
    super.Constructor("View " outfolder, outfolder);
  }

  override GetDocument {
    return GetWatch(new ComputeClass(OutFolder));
  }
}
//======================================================================

// No spaces in the name below!
// RevBayes has a problem with folder names that contain spaces...

Main.Documents = new DocumentViewClass(null) {
  new DocumentViewClass("Diagnostics", ref Diagnostics);
  new AnalysisViewClass("Output1");
  new AnalysisViewClass("Output2");
};

void Main.Run {
  new ComputeClass("Output2").Calculate;
}
//======================================================================

enum ConceptsList {
  I,
  You,
  Water,
  Ear,
  New,
  We,
  Eye,
//  One,
//  Star
}

with Info {
  PaperTitle  = "White Paper";
  Journal     = "Transactions of the Beysian Society";
  Publisher   = "The Baysian Society";
  Title       = Lang.SimulatedSegments;
  PriorTree   = GetTreeNodes(LanguageBranches.Romance);

  AuthorList = Span {
    Separator: ", ";
    LastSeparator: " {0} "(Lang.And);
    Style.Author(each Authors);
  };
}
//======================================================================

GetWatch(compute) = Style.WhitePaper {
  Title: Info.Title;
  Author: Info.AuthorList;
//  Description: "Test Description";
//  Comment: "Test Comment";
//  Subject: "Test Subject";
//  Keywords: "Test Keywords";


  var appendices = PaperAppendices(compute);
  Style.PageSection {
    Header: Style.NormalHeader(Info.Journal) {
      Distance: 0.125 inches;
      MarginT: 0.125 inch;
      Even: Style.NormalHeader(Info.Journal);
      First: Block;
    };

    Paragraph {
      ParAlignment: ParAlignments.Center;
      Logo;
    };
    Style.Title(Info.Title);
    Paragraph {
      ParAlignment: ParAlignments.Center;
      Info.AuthorList;
    };

    Style.HeaderCentered(Abstract.Title);
    Abstract.Body;

    Style.ShowContent(each Content);
    Style.ShowAuthors(Authors);

    Style.HeaderCentered(Lang.Appendices);
    Style.AppendixRow(each appendices);

    Style.ShowReferences(References);
  };
  Style.ShowAppendix(each appendices);
};
//======================================================================

Diagnostics = Style.WhitePaper {
  var appendices = [
    new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
    new AppendixClass("Segments used in the word list", DisplayCharacters.ShowTable),
    new AppendixClass("Feature change in first segment", IPA.DriftSection),
    new AppendixClass("Word Lists by Language", DisplayWords.ShowTable),
    new AppendixClass("Segment Groups", MatchingConsonants.ShowTables),
    new AppendixClass("Euler Feature Diagram", IPA.FeatureChart),
    new AppendixClass(Lang.IPAFullName, IPA.SegmentTable),
    new AppendixClass("Feature Tree", SegmentTree.ShowTree),
    new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
  //  new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
  ];
  Style.ShowAppendix(each appendices);
};
//======================================================================

with Abstract {
  Title = Lang.Abstract;
  Body  = Block {
    Paragraph {
      "It all started in a little town called Madrid...";
    };
  };
}
//======================================================================

with Content.Introduction {
  Title = Lang.Introduction;
  Body  = Block {
    Paragraph {
      "In this paper, we attempt to do the impossible!";
    };
  };
}
//======================================================================

with Content.Methods {
  Title = Lang.Methods;
  Body  = Block {
    Paragraph {
      "We used any and all means necessary.";
    };
  };
}
//======================================================================

with Content.Conclusion {
  Title = Lang.Conclusion;
  Body  = Block {
    Paragraph {
      "Vene Vidi Vici";
    };
  };
}
//======================================================================

PaperAppendices(compute) = [
  new AppendixClass("Options File", compute.GetOptionsSource),
  new AppendixClass("RevBayes Source File", compute.RevBayesSource),
  new AppendixClass("Character File", compute.CharacterSource),
  new AppendixClass("Program Output", compute.ShowLanguageTrees),
];
//======================================================================



