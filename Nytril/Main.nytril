using Format, Units, Math, IO;

include "English";
include "Spanish";
include "Library";
include "Languages";
include "LanguageTree";
include "IPA";
include "Rules";
include "Style";
include "References";
include "Concepts";
include "Methods";
include "Tables";
include "RevBayes";
//======================================================================

// No spaces in the name below!
// RevBayes has a problem with folder names that contain spaces...

ShowOutput = "Run2";

//======================================================================

UsedConcepts = [
  Concepts.Sun,
  Concepts.Moon,
  Concepts.Star,
  Concepts.Water,
  Concepts.Rain,
  Concepts.River,
  Concepts.Lake,
  Concepts.Sea,
  Concepts.Salt,
  Concepts.Stone,
  Concepts.Sand,
];
//======================================================================

with Info {
  Generations = 1000;

  PaperTitle  = "White Paper";
  Journal     = "Transactions of the Beysian Society";
  Publisher   = "The Baysian Society";
  Title       = Lang.SimulatedSegments;
  PriorTree   = GetTreeNodes(LanguageBranches.Romance);

  AuthorList = Span {
    Separator: ", ";
    LastSeparator: " {0} "(Lang.And);
    Style.Author(each Authors);
  };
}
//======================================================================

Main.Configurations = [
  new ConfigurationClass("Paper") {
    Language: ConfigurationClass.Languages.English;
    PaperSystem: ConfigurationClass.PaperSystems.US;
    DocumentType: ConfigurationClass.DocumentTypes.Normal;
  },

  new ConfigurationClass("Presentation") {
    Language: ConfigurationClass.Languages.English;
    PaperSystem: ConfigurationClass.PaperSystems.US;
    DocumentType: ConfigurationClass.DocumentTypes.SlideShow;
  },
];

with Main if (DocumentType == DocumentTypes.Normal) {
  Documents = new DocumentViewClass(null) {
    new PaperViewClass(ShowOutput);
    new DiagnosticsViewClass(ShowOutput);
  };
}

with Main if (DocumentType == DocumentTypes.SlideShow) {
  Documents = new DocumentViewClass(null) {
    new PresentationViewClass(ShowOutput);
  };
}

void Main.Run {
  new ComputeClass(ShowOutput).Calculate;
}
//======================================================================

class PaperViewClass: BaseViewClass {
  Constructor(outfolder) {
    super.Constructor("White Paper", outfolder);
  }

  GetAppendices(compute) = [
    new AppendixClass("Options File", compute.GetOptionsSource),
    new AppendixClass("Program Output", compute.ShowLanguageTrees),
  ];

  override GetContent(compute) = {
    var appendices = GetAppendices(compute);
    Style.PageSection {
      Header: Style.NormalHeader(Info.Journal) {
        Distance: 0.125 inches;
        MarginT: 0.125 inch;
        Even: Style.NormalHeader(Info.Journal);
        First: Block;
      };

      Paragraph {
        ParAlignment: ParAlignments.Center;
        Logo;
      };
      Style.Title(Info.Title);
      Paragraph {
        ParAlignment: ParAlignments.Center;
        Info.AuthorList;
      };

      Style.HeaderCentered(Abstract.Title);
      Abstract.Body;

      Style.ShowContent(each Content);
      Style.ShowAuthors(Authors);

      Style.HeaderCentered(Lang.Appendices);
      Style.AppendixRow(each appendices);

      Style.ShowReferences(References);
    };
    Style.ShowAppendix(each appendices);
  };
}
//======================================================================

class SlideClass {
  var Title,
      Body;

  Constructor(title, body) {
    Body  = body;
    Title = title;
  }

  GetBody = Block {
    Body;
  };
}
//======================================================================

class PresentationViewClass: BaseViewClass {
  Constructor(outfolder) {
    super.Constructor("Presentation", outfolder);
  }

  override GetContent(compute) = {
    Section {
      Paragraph {
        TextHeight: 40 pts;
        SpaceBefore: 1.5 inches;
        LeftIndent: 1 inch;
        Info.Title;
      };
      Paragraph {
        TextHeight: 14 pts;
        SpaceBefore: 1.5 inches;
        LeftIndent: 1 inch;
        Info.AuthorList;
      };
    };

    var slides = [
      new SlideClass(Content.Introduction.Title, Content.Introduction.Body),
      new SlideClass(Abstract.Title, Abstract.Body),
      new SlideClass(Content.Methods.Title, Content.Methods.Body),
      new SlideClass(Lang.ConceptsUsed, AllWords.ShowTable),
      new SlideClass(Lang.TransitionRules, compute.ShowTransitionRules),
      new SlideClass("Results", Style.ReadTree(Lang.MCC, compute.OutFolder compute.GammaMCC)),
      new SlideClass("Questions", Paragraph {
        ParAlignment: ParAlignments.Center;
        SpaceBefore: 1 inch;
        TextHeight: 80 pts;
        "?";
      }),
    ];

    Section {
      SectionBreak: SectionBreaks.NextPage;
      foreach (var slide in slides)
        AddSlide(slide.Title, EachIndex, slide.GetBody);
    }
  };
}
//======================================================================

class DiagnosticsViewClass: BaseViewClass {
  Constructor(outfolder) {
    super.Constructor("Diagnostics", outfolder);
  }

  GetAppendices(compute) = [
    new AppendixClass(Lang.TransitionRules, compute.ShowTransitionRules),
    new AppendixClass("Transition Rule File", compute.TransitionRuleFile),
    new AppendixClass("RevBayes Source File", compute.RevBayesSource),
    new AppendixClass("Character File", Nexus.CharacterFile(2)),
    new AppendixClass("TKF Input Files", Nexus.TKFFiles),
    new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable),
    new AppendixClass("Segments used in the word list", DisplayCharacters.ShowTable),
    new AppendixClass("Word Lists by Language", DisplayWords.ShowTable),
    new AppendixClass("Segment Groups", MatchingConsonants.ShowTables),
    new AppendixClass("Euler Feature Diagram", IPA.FeatureChart),
    new AppendixClass(Lang.IPAFullName, IPA.SegmentTable),
    new AppendixClass("Feature Tree", SegmentTree.ShowTree),
    new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
  //  new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
  ];

  override GetContent(compute) = {
    var appendices = GetAppendices(compute);
    Style.ShowAppendix(each appendices);
  };
}

//======================================================================



