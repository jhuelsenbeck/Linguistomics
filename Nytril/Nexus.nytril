using Format, Units;
//======================================================================

readonly namespace Nexus {
  CommentChar  = "#";
  CommentSpace = "  ";
  EndMarker    = ";";

    // This is the set of characters used for the nexus file
  CharacterList = ('A'..'Z' step 1) + ('a'..'z' step 1) + ('0'..'9' step 1) + ['!', '$', '%', '&', '`', '+', ',', '.', '/', '<', '_', '=', '@', '*'];

  CommentBlock = TextBlock {
    Empty;
    TextColor: PaperStyle.CommentColor;
  };

  BlockComment(text) = CommentBlock {
    var bar = CommentChar * (text.Length + (1 + CommentSpace.Length)*2);
    bar;
    Span {
      CommentChar CommentSpace;
      text;
      CommentSpace CommentChar;
    };
    bar;
  };

  LineComment(text) = CommentBlock {
    CommentChar Space text;
  };

  ShowString(text) = Span {
    TextColor: PaperStyle.StringColor;
    Quote;
    text;
    Quote;
  };

  Keyword(name) = Span {
    PaperStyle.KeywordFormat;
    name;
  };

  AddValue(name, value=null) = Span {
    Space;
    Keyword(name);
    if (value is valid) {
      "=";
      value;
    }
  };

  AddTaxon(taxon) = Span {
    PaperStyle.TaxonFormat;
    Space;
    taxon.Variable;
  };

  Scope(name) = TextBlock {
    IndentSpace: 2;
    Begin: Span {
      Keyword("begin");
      Space;
      name;
      EndMarker;
    };
    End: Span {
      Keyword("end");
      EndMarker;
      LineBreak;
    };
  };

  NexusFile = TextBlock {
    TextFixed: true;
    Keyword("#NEXUS");
  };

  Newick(NodeClass node) = Span {
    if (node.HasChildren) {
      "(";
      Span {
        Separator: ",";
        Newick(each node.Children);
      };
      ")";
    }
    node.Label;
    if (node.BranchLength != 1.0) {
      ":";
      node.BranchLength;
    }
  };

  ShowTreeLine(tree) = Span {
    "tree ";
    tree.GetVariableName;
    " = ";
    Newick(tree);
    EndMarker;
  };

/*
  void SetSegmentCharacter(SegmentClass segment) {
    if (not Numbers) {
      if (segment.Index < CharacterList.Length)
        segment.CharacterLetter = CharacterList[segment.Index];
      else
        System.Assert(false, "Too many characters");
    }
  }

  virtual void AssignCharacters(SegmentClass[] segments) {
    var last = CharacterList.Length-1;
    foreach (var segment in segments) {
      var index = GetFilterIndex(segment);
      if (index > last)
        index = last;
      SetSegmentCharacter(segment);
    }
    GetFilters;
  }
*/
}
//======================================================================

