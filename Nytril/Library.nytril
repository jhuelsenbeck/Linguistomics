using Format, Units, Math, IO, LinkTypes;

//======================================================================

class AlignIndexClass {
  var Index,
      Count;

  Constructor(index, count) {
    Index = index;
    Count = count;
  }

  GetCognateName = GlobalVariablePath[9..-7];
}

//======================================================================

class StatClass {
  var Lower,
      Mean,
      Upper;

  Constructor(lower, mean, upper) {
    Lower = lower;
    Mean  = mean;
    Upper = upper;
  }

  ShowRight(number) = HBox {
    Space*2;
    TextHeight: 80%;
    TextColor: Colors.Gray;
    number;
  };

  ShowBox = VBox {
    BracketLR: Brackets.Curly;
    TextDigits: 3;
    ShowRight(Upper * 100.0);
    Mean * 100.0;
    ShowRight(Lower * 100.0);
  };

  override GetLayoutTip = ShowBox;
}

//======================================================================

class AlignPairClass {
  DataSetClass    Data;
  AlignIndexClass Align;
  SizeClass       BoxSize;
  var             Cognate;

  Constructor(DataSetClass data, cognate, AlignIndexClass align) {
    Data    = data;
    Cognate = cognate;
    Align   = align;
    BoxSize = new SizeClass(14 pts, 14 pts);
  }

  Languages(data, height) = VBox {
    HAlign: HAligns.Right;
    Span {
      TextHeight: 10 pts;
      Empty;
    };

    foreach (var taxon in data.Taxa) {
      HBox {
        Height: height;
        VAlign: VAligns.Center;
        taxon.Language;
      };
    }
  };

  Show(prob, cumulative, set) = VBox {
    MarginB: 10 pts;
    Border: 0.125 {Color: 50%};
    HAlign: HAligns.Center;

    Span {
      TextHeight: 10 pts;
      TextDigits: 1;
      prob * 100.0;
      "%";
    };

    VBox {
      foreach (var taxon in Data.Taxa) {
        HBox {
          Height: BoxSize.Height;

          var word = set[each0];
          if (valid word) {
            foreach (var c in word) {
              Canvas {
                HAlign: HAligns.Center;
                Size: BoxSize;
                SegmentClass segment;
                if (c == -1)
                  segment = IPASegments.GapSegment;
                else if (c >= 0 and c < Data.UniqueSegments.Length) {
                  segment = Data.UniqueSegments[c];
                  Background: ChartColor(segment.PartitionIndex);
                }
                else
                  segment = IPASegments.MissingSegment;
                segment.ShowSegment;
              };
            }
          }
        };
      }
    };
  };

  override GetLayoutTip = ShowDetails(500);

  ShowDetails(max) = Block {
    TextHeight: 10 pts;

    var path    = Folders.Source Folders.Up Folder("Experiments/Europe200/Custom/Posterior/Run1/Execute") FileName("Alignment" + Align.Index) Extensions.Nytril;
    var adata   = Read(path).GetValue("Align");
    var langbox = Languages(Data, BoxSize.Height);
    var indent  = GetLayoutSize(langbox, Extent.Size).Width;

    Paragraph {
      KeepWithNext: true;
      TextHeight: 14 pts;
      SpaceAfter: 10 pts;

      TabStops: [3 inches];
      Cognate;
      if (adata.Length > 1) {
        Tab;
        Chart {
          Type: ChartTypes.Column;
          TextHeight: 6 pts;
          Size: new SizeClass(3 inch, 0.75 inch);
          ValueLabel: "%";
          ChartSeries {
            foreach (var a in adata)
              a[0] * 100.0;
          };
        };
      }
    };

    Paragraph {
      LeftIndent: indent;
      FirstIndent: -indent;
      langbox;
      Tab;

      var cumulative = 0.0;
      foreach (var a in adata) {
        var prob = a[0];
        cumulative += prob;
        var alignments = a[1];
        if (alignments.Length > 0) {
          Show(prob, cumulative, a[1]);
          Space;
          if (each1 >= max)
            break;
        }
      }
    };
  };
}

//======================================================================

class AlignmentChartClass {
  ExperimentClass   Experiment;
  AlignIndexClass[] Alignments;
  DataSetClass      Data;
  TaxonClass[]      Taxa;

 Constructor(ExperimentClass experiment) {
    Experiment = experiment;
    Data       = experiment.Data;
    Alignments = Data.Alignments;
    Taxa       = Data.Taxa;
  }

  ShowChart(SizeClass size) = VBox {
    Size: size;
    Border: 0.5;

    // Try to make proportional squares
    var xitems = Integer(size.Width / 130);
    var yitems = (Alignments.Length + xitems - 1) div xitems;
    var bsize  = new SizeClass(size.Width / xitems, size.Height / yitems);
    var rows   = Alignments / xitems;
    var x      = bsize.Width * 0.5;


    TextHeight: bsize.Height - 3.2 pt;

    foreach (var row in rows) {
      HBox {
        foreach (var a in row) {
          Canvas {
            Size: bsize;
            Border: 0.25 pts {Color: 90%};

            var name = a.GetCognateName;
            Paragraph {
              Span {
                TextColor: Colors.LightGray;
                a.Count;
                Space*2;
              };
              name.Replace(".Primary", Empty);
              TipAction: new ActionClass(Actions.TipDocument, new AlignPairClass(Data, name, a));
            };
          }
        }
      }
    }
  };

  ShowAll = Block {
    foreach (var alignment in Alignments) {
      var p = new AlignPairClass(Data, alignment.GetCognateName, alignment);
      p.ShowDetails(5);
      Paragraph {
        BorderT: 1;
      };
    }
  };
}

//======================================================================

class LanguageClass: FactClass {
  field      Name,
             Cases;
  var        MapAttribution;
  ImageClass MapImage;

  Constructor(id, name, cases=0) {
    super.Constructor(id);
    Name  = name;
    Cases = cases;
  }

  override IconClass GetIcon = Icons.language;

  virtual Description = null;
  virtual Details = null;

  override GetLayoutSpan = Span {
    TipAction: this;
    Name;
  };

  override GetLayoutTip = Block {
    Paragraph {
      Bold;
      TextHeight: 14 pts;
      Name;
    };
    Description;

    if (valid MapImage)
      ShowMap(Extent.Size);
  };

  static ImageClass LoadImage(name) = new ImageClass(Info.ImageFolder FileName(name));

  ShowMap(SizeClass size) = HBox {
    HAlign: HAligns.Center;

    VBox {
      var h = 6 pts;
      MapImage.FitSize(new(size.Width, size.Height - h*2));

      if (valid MapAttribution) {
        Frame {
          Width: size.Width;
          TextHeight: h;
          TextColor: 80%;
          Lang.Credit;
          MapAttribution;
        }
      }
    }
  };
}

//======================================================================

typedef SegmentDictionary DictionaryClass<SegmentClass>;

class WordClass: FactClass {
  field          Plain,
                 Text;
  LanguageClass  Language;
  TaxonClass     Taxon;
  CognateClass   Cognate;
  SegmentClass[] Segments,
                 Aligned,
                 Padded;

  Constructor(SegmentDictionary dictionary, TaxonClass taxon, CognateClass cognate, text) {
    super.Constructor(valid cognate ? text+cognate.Concept.Name+cognate.Name+taxon.Variable : #71f32657-a37c-4f1d-abba-87b928e9d80b#);

    // IPA text and word text must be in the same unicode normaization form so comparisons are accurate
    Text     = text.GetString(NormalizationForms.FormC);
    Plain    = Text.FindSlice(c => c != IPASegments.GapSegment.Ipa and c != IPASegments.PrimaryStress.Ipa);
    Taxon    = taxon;
    Language = taxon.Language;
    Cognate  = cognate;

    if (valid Text) {
      var segments = dictionary.FindTokens(Text, IPA.NullSegment);
      Aligned  = segments.FindSlice(s => s.Gap or (not s.Punctuation));
      Segments = segments.FindSlice(s => not s.Punctuation);

      // Test that the word's text is the same as the segments converted back into text
      var view = Span {(each segments).Ipa};
      System.Assert(Text == view.GetString(), "Round-trip error with text {0}-{1}"(Text, view), Text);

      Link.Connect(this, Segments);
      Link.Connect(this, cognate);
      Link.Connect(this, Language);
      Link.Connect(Language, cognate);
    }
    else {
      Segments = [];
      Aligned  = [];
    }
  }

  override IconClass GetIcon = Icons.text_snippet;

  ShowConcept = Span {
    Style.SansSerif;
    TipAction: this;
    Cognate.GetTitle;
  };

  override GetLayoutSpan = Span {
    foreach (var s in Segments) {
      if (!s.Punctuation)
        s.Ipa;
    }
  };

  ShowPaddedBlocks(w, index=-1) = Table {
    Columns: [w]*Padded.Length;
    Row {
      foreach (var segment in Padded) {
        Cell {
          EdgeL: (0.125 pts) {Color: 80%};
          ParAlignment: ParAlignments.Center;
          if (index == each0)
            Background: Colors.LightYellow;
          segment.ShowSegment;
        };
      }
    };
  };

  FieldPar(name) = Paragraph {
    TabStops: [0.5 inches];
    Bold name;
    Tab;
  };

  override GetLayoutTip = Block {
    FieldPar(Lang.Language) {
      Language;
    };
    FieldPar(Lang.Cognate) {
      Cognate.GetTitle;
    };
    FieldPar(Lang.Segments) {
      Frame {
        Border: 0.5;
        TextHeight: 16 pts;
        ShowPaddedBlocks(20 pts);
      }
    }
  };

  override GetLayoutFact = Block {
    Paragraph {
      TabStops: [1 inch, 2, inch, 3 inch, 4 inch];
      GetIcon;
      Space;
      Quote;
      Plain;
      Quote;
      Tab;
      Language;
      ColonSpace;
      Cognate.GetTitle;
    };
    super.GetLayoutFact;
  };
}

//======================================================================

class ConceptClass: FactClass {
  field Name,
        Confidence;
  var   Variable,
        WordType,
        WordGroup;

  Constructor(variable) {
    super.Constructor(variable.GlobalVariablePath);
    Variable   = variable;
    Name       = variable.GlobalVariableName;
    Confidence = variable.Confidence;
    WordType   = variable.WordType;
    WordGroup  = variable.WordGroup;

    System.Assert(Confidence > 0);
    System.Assert(WordType != WordTypes.None);
    System.Assert(WordGroup != WordGroups.None);
  }

  override IconClass GetIcon = Icons.category;

  override GetLayoutTip = Span {Name; "-"; Confidence};

  override Compare(c, options) {
    return Name.Compare(c.Name);
  }
}
//======================================================================

class CognateClass: FactClass {
  field        Name;
  DataSetClass Data;
  ConceptClass Concept;
  WordClass[]  Words;
  var          MaxLength,
               Variable;

  Constructor(DataSetClass data, ConceptClass concept, variable) {
    super.Constructor(variable.GlobalVariablePath);

    Name       = variable.GlobalVariableName;
    Data       = data;
    Concept    = concept;
    Variable   = variable;
    MaxLength  = 0;

    Link.Connect(this, concept);
  }

  override IconClass GetIcon = Icons.format_list_bulleted;

  GetTitle {
    return Concept.Name + '-' + Name;
  }

  override GetLayoutTip = AllWords.ShowConceptTable(Data, this);

  override Compare(c, options) {
    var i = Concept.Compare(c.Concept, options);
    if (i == 0)
      return Name.Compare(c.Name, options);
    return i;
  }
}
//======================================================================

class TaxonClass {
  var           Variable,
                Index;
  LanguageClass Language;

  Constructor(LanguageClass language) {
    Index    = each0;
    Language = language;
    Variable = language.GlobalVariableName;
  }

  override GetLayoutTip = Span {
    Style.TaxonFormat;
    Variable;
    TipAction: Language;
  };
}
//======================================================================

class WordPairClass {
  var       Index;
  WordClass Word1,
            Word2;

  Constructor(index, WordClass w1, WordClass w2) {
    Index = index;
    Word1 = w1;
    Word2 = w2;
  }

  ShowDescription(textheight) = Frame {
    Border: 0.25 pts;
    TextHeight: textheight;
    Paragraph {
      ParBackground: 90%;
      Bold;
      Word1.Cognate.Variable.GlobalVariablePath[9..];
    };

    textheight += 2 pts;
    Word1.ShowPaddedBlocks(textheight, Index);
    Word2.ShowPaddedBlocks(textheight, Index);
  };

  override GetLayoutTip = ShowDescription(12 pts);
}
//======================================================================

class DataSetClass {
  LanguageClass[]             Languages;
  SegmentClass[]              UniqueSegments,
                              SortedSegments,
                              DisplaySegments;
  CognateClass[]              UsedCognates,
                              SortedCognates;
  AlignIndexClass[]           Alignments;
  ConceptClass[]              UsedConcepts;
  TaxonClass[]                Taxa;
  MatrixClass                 TransitionCount;
  DictionaryClass<TaxonClass> TaxonSet;
  VectorClass                 WordList;
  var                         Description,
                              MaxLanguageName,
                              WordCount,
                              SegmentCount,
                              UniqueCount,
                              TransitionMax;

  Constructor(includewords, LanguageClass[] languages, description) {
    Languages       = languages;
    Description     = description;
    WordCount       = 0;
    SegmentCount    = 0;
    MaxLanguageName = 0;


    TaxonSet = new(languages.Length);
    ListClass<TaxonClass> tlist = new(languages.Length);

    foreach (var l in languages) {
      var taxon = new TaxonClass(l);
      tlist.Add(taxon);
      TaxonSet.Add(taxon, taxon.Variable);
      if (taxon.Variable.Length > MaxLanguageName)
        MaxLanguageName = taxon.Variable.Length;
    }
    Taxa     = tlist.Values;
    WordList = new VectorClass(Taxa.Length, null);

    // Build a dictionary with IPA text as the key
    var dictionary = new SegmentDictionary(256);
    foreach (var segment in IPASegments) {
      if (valid segment.Ipa)
        dictionary.Add(segment, segment.Ipa);
    }

    var clist       = new ListClass<CognateClass>(1024);
    var alist       = new ListClass<AlignIndexClass>(1024);
    var conceptlist = new ListClass<ConceptClass>(256);

    foreach (var conceptvar in Concepts) {
      var good = exists conceptvar.?Confidence and
                 exists conceptvar.?WordType and
                 exists conceptvar.?WordGroup;
      System.Assert(good, "Improper concept", conceptvar);

      if (good and conceptvar.Confidence > 0 and conceptvar.WordGroup.HasFlag(includewords)) {
        var concept = new ConceptClass(conceptvar);
        conceptlist.Add(concept);

        foreach (var cognate in conceptvar) {
          var vname = cognate.GlobalVariableName();
          var inc   = true;

          switch (vname) {
            case "Confidence":
            case "WordType":
            case "WordGroup":
              inc = false;
              break;
          }

          if (inc) {
            var count = 0;
            foreach (var word in cognate) {
              if (valid word and TaxonSet.Contains(word.GlobalVariableName))
                ++count;
            }
            if (count > 1) {
              WordCount += count;
              var c = new CognateClass(this, concept, cognate);
              clist.Add(c);
              var a = cognate.?Align;

              if (valid a)
                alist.Add(a);
            }
          }
        }
      }
    }

    UsedConcepts = conceptlist.Values.Sort(false);
    Alignments   = alist.Values.Sort(false, ref CompareAlignment);
    UsedCognates = clist.Values;

    foreach (var cognate in UsedCognates)
      ComputeCognate(dictionary, cognate);

    UniqueSegments = GetUniqueSegments;
    UniqueCount    = UniqueSegments.Length;
    foreach (var segment in UniqueSegments) {
      segment.Index         = each0;
      segment.UsedFrequency = Real(segment.UsedCount) / SegmentCount;
    }

    DisplaySegments = UniqueSegments;  // Could be IPA.Segments if you want to see all possible segments in the debug tables
    SortedSegments  = UniqueSegments.Sort(true, ref CompareAlpha);
    TransitionCount = GetTransitionsCount;
  }

  CognateClass[] GetSortedCognates {
    if (invalid SortedCognates)
      SortedCognates = UsedCognates.Sort(false);
    return SortedCognates;
  }

  static CompareAlignment(AlignIndexClass a0, AlignIndexClass a1, options) {
    var c = a0.Count.Compare(a1.Count);
    if (c == 0)
      return a0.Index.Compare(a1.Index);
    return c;
  }

  static CompareAlpha(SegmentClass s0, SegmentClass s1, options) {
    var i = s0.Ipa.Length.Compare(s1.Ipa.Length);
    if (i == 0)
      i = -s0.Ipa.Compare(s1.Ipa);
    return i;
  }

  CognateClass GetCognate(concept) = UsedCognates.FindFirst(c => c.Concept.Variable == concept);

  SegmentClass[] GetUniqueSegments {
    var set = new SegmentSetClass(512);
    foreach (var cognate in UsedCognates) {
      foreach (var word in cognate.Words) {
        foreach (var segment in word.Segments) {
          if (!segment.Punctuation)
            set.Add(segment);
        }
      }
    }
    return set.Values;
  }

  LangNumber(LanguageClass language) = Languages.FindFirstIndex(language)+1;

  void ComputeCognate(SegmentDictionary dictionary, CognateClass cognate) {
    var defword = new WordClass(null, Taxa[0], null, Empty);

    WordList.SetAllValues(defword);
    var maxlength = 0;

    foreach (var langword in cognate.Variable) {
      var taxon = TaxonSet.FindKey(langword.GlobalVariableName);
      if (valid taxon) {
        var word = new WordClass(dictionary, taxon, cognate, langword);
        maxlength = Math.Max(maxlength, word.Aligned.Length);

        foreach (var s in word.Segments) {
          ++SegmentCount;
          ++s.UsedCount;
        }
        WordList.SetValue(taxon.Index, word);
      }
    }

    cognate.Words     = WordList.Values;
    cognate.MaxLength = maxlength;

    foreach (var word in cognate.Words) {
      var a = word.Aligned;
      if (valid a) {
        if (a.Length < maxlength)
          word.Padded = a + [IPASegments.GapSegment] * (maxlength - a.Length);
        else
          word.Padded = a;
      }
      else
        word.Padded = a;
    }

    for (var i = 0; i < maxlength; ++i) {
      var count    = 0;
      var gapcount = 0;

      foreach (var word in cognate.Words) {
        if (valid word.Aligned) {
          ++count;
          if (word.Padded[i] == IPASegments.GapSegment)
            ++gapcount;
        }
      }
      System.Assert(gapcount < count, "Column with all gaps", cognate.Variable);
    }
  }

  ShowWord(SegmentClass segment) = Block {
    Paragraph {
      SpaceBefore: 10 pts;
      TextHeight: 14;
      BorderB: 1;
      "Words containing \"{0}\""(segment.Ipa);
    };
    Paragraph {
      Separator: Space;
      foreach (var cognate in UsedCognates) {
        foreach (var word in cognate.Words) {
          if (word.Segments.FindAny(segment))
            word.Plain;
        }
      }
    };
  };

  GetTransitionsCount {
    TransitionMax = 1;
    var t = new MatrixClass(UniqueCount, UniqueCount, null);

    foreach (var cognate in UsedCognates) {
      var length = cognate.Words.Length;
      for (var i = 0; i < length; ++i) {
        var p0 = cognate.Words[i].Padded;
        for (var j = 0; j < length; ++j) {
          if (i != j) {
            var p1 = cognate.Words[j].Padded;
            var ml = Min(p0.Length, p1.Length);
            for (var index = 0; index < ml; ++index) {
              var s0 = p0[index];
              var s1 = p1[index];
              if (s0.Index != s1.Index and not s0.Punctuation and not s1.Punctuation) {
                var list = t.GetValue(s0.Index, s1.Index);
                var p    = new WordPairClass(index, cognate.Words[i], cognate.Words[j]);
                if (invalid list) {
                  list = new ListClass<WordPairClass>(128);
                  t.SetValue(s0.Index, s1.Index, list);
                }
                list.Add(p);
                if (list.Length > TransitionMax)
                  TransitionMax = list.Length;
              }
            }
          }
        }
      }
    }
    return t;
  }

  GetColor(SegmentClass s) = ChartColor(s.PartitionIndex);// * 30%;

  PartitionBox(RuleClass rule) = Paragraph {
    var segments = rule.PartSegments;
    var grid     = 0.125 pts;
    var gcolor   = 65%;
    var border   = 0.5 pts;
    var size     = Extent.Size - border*2;
    var d        = size / (segments.Length+1);
    var vflags   = SegmentFeatures.Vowel | SegmentFeatures.Semivowel;


    Canvas {
      TextHeight: d.Height * 0.6;
      Border: border;

      var t   = TransitionCount;
      var max = 1.0 / TransitionMax;
      var y   = d.Height;
      foreach (var s0 in segments) {
        var x = d.Width;
        foreach (var s1 in segments) {
          if (s0.Index != s1.Index) {
            var tlist = t.GetValue(s0.Index, s1.Index);
            if (valid tlist) {
              Canvas {
                TipAction: new TranActionClass(tlist.Values, tlist.Length*max);
                HAlign: HAligns.Center;
                VAlign: VAligns.Center;
                X: x;
                Y: y;
                Size: d;

                var count = 0;
                foreach (var e in tlist) {
                  var c0 = e.Word1.Padded[e.Index];
                  var c1 = e.Word2.Padded[e.Index];
                  if (c0.Features.HasFlag(vflags) != c1.Features.HasFlag(vflags))
                    ++count;
                }

                if (count > 0) {
                  var f = Integer(255.0 * (1.0 - count / tlist.Length));
                  if (f < 255)
                    Background: new ColorClass(f, 255, f);
                }
                else {
                  var f = Integer((1.0 - tlist.Length * max) * 255.0);
                  if (f < 255)
                    Background: new ColorClass(255, f, f);
                }

                tlist.Length;
              };
            }
          }
          x += d.Width;
        }
        y += d.Height;
      }

      y = d.Height;
      var p = 0;
      foreach (var s in segments) {
        Canvas {
          Size: d;
          Background: GetColor(s);
          Width: d.Width;
          HAlign: HAligns.Center;
          Y: y;
          s.ShowSegment;
        };
        if (p != s.PartitionIndex) {
          Canvas {
            Y: y;
            Size: new SizeClass(size.Width, grid);
            Background: gcolor;
          };
          p = s.PartitionIndex;
        }
        y += d.Height;
      }

      Canvas {
        Height: d.Height;
        Width: size.Width;

        var x = d.Width;
        p = 0;
        foreach (var s in segments) {
          Canvas {
            Size: d;
            Background: GetColor(s);
            HAlign: HAligns.Center;
            X : x;
            s.ShowSegment;
          };
          if (p != s.PartitionIndex) {
            Canvas {
              X: x;
              Size: new SizeClass(grid, size.Height);
              Background: gcolor;
            };
            p = s.PartitionIndex;
          }
          x += d.Width;
        }
      };
    };
  };
}
//======================================================================

class FrequencyClass {
  var Frequency,
      Index;

  Constructor(frequency) {
    Index     = each0;
    Frequency = frequency;
  }
}
//======================================================================

class RateDataClass {
  TaxonClass       Taxon;
  VectorClass      Count;
  FrequencyClass[] Frequency;
  var              TotalCount,
                   MaxFrequency,
                   Distance;

  Constructor(count, TaxonClass taxon) {
    Taxon        = taxon;
    TotalCount   = 0;
    MaxFrequency = 0;
    Count        = new VectorClass(count, 0);
  }
}

//======================================================================

class SegmentActionClass: ActionClass {
  RateDataClass Rate;
  SegmentClass  Segment;
  TaxonClass    Taxon;
  var           Count,
                Percent;

  Constructor(RateDataClass rate, SegmentClass segment, count, percent) {
    super.Constructor(Actions.RunQuery, null);
    Segment = segment;
    Taxon   = rate.Taxon;
    Count   = count;
    Percent = percent;
  }

  override GetQuery = MatchAll WordClass {
    MatchAny LanguageClass {
      Taxon.Language;
    };
    MatchAny SegmentClass {
      Segment;
    };
  };

  override GetLayoutTip = VBox {
    HAlign: HAligns.Center;
    Span {
      Lang.Occurrences(Count);
      Space;
      Span {
        "(";
        TextDigits: 1;
        Percent * 100.0;
        "%)";
      }
    };
    Segment.GetLayoutTip;
  };
}

//======================================================================

abstract class FrequencyChartClass {
  ExperimentClass  Experiment;
  PartitionClass[] Partitions;
  DataSetClass     Data;
  TaxonClass[]     Taxa;
  VectorClass      UsedCount,
                   UsedFrequency;
  FrequencyClass[] FirstRate;
  RateDataClass[]  Rates,
                   SortedRates;
  var              RateCount,
                   SortedIndexes,
                   MaxDistance;

 Constructor(ExperimentClass experiment, count) {
    Experiment = experiment;
    Partitions = experiment.Rule.Partitions;
    Data       = experiment.Data;
    Taxa       = Data.Taxa;
    RateCount  = count;
    Rates      = new RateDataClass(count, each Taxa);
  }

  CompareFrequency(i0, i1, options) {
    return FirstRate[i0].Frequency.Compare(FirstRate[i1].Frequency);
  }

  static CompareDistance(RateDataClass r0, RateDataClass r1, options) {
    return r0.Distance.Compare(r1.Distance);
  }

  void ComputeDistance(sortfunction) {
    // Compute the Euclidean distance between each language and the first language

    var fr = new VectorClass(RateCount, 0.0);
    foreach (var rate in Rates) {
      var mult = 100.0 / rate.TotalCount;
      for (var i = 0; i < RateCount; ++i) {
        var f = mult * rate.Count[i];
        fr.SetValue(i, f);
        if (f > rate.MaxFrequency)
          rate.MaxFrequency = f;
      }
      rate.Frequency = new FrequencyClass(each fr);
    }

    var max = 0.0;
    var r0  = Rates[0];
    foreach (var rate in Rates) {
      if (each0 > 0) {
        var sum = 0;
        for (var i = 0; i < RateCount; ++i) {
          var delta = rate.Frequency[i].Frequency - r0.Frequency[i].Frequency;
          sum += delta * delta;
        }
        rate.Distance = Math.Sqrt(sum);
        if (rate.Distance > max)
          max = rate.Distance;
      }
      else
        rate.Distance = 0.0;
    }

    MaxDistance = max;
    FirstRate   = r0.Frequency;
    var a = 0 ..< RateCount step 1;
    SortedIndexes = a.Sort(true, sortfunction);
    SortedRates   = Rates.Sort(false, ref CompareDistance);
  }

  abstract SegmentBar(RateDataClass rate, index, width, height);
  abstract OccurranceChart(SizeClass size);

  LangCanvas(RateDataClass rate, width, height) = HBox {
    var cborder = 0.25 pts;

    VAlign: VAligns.Bottom;
    Height: height;
    BorderB: cborder;
    SegmentBar(rate, each SortedIndexes, width, height - cborder);
  };

  ShowChart = HBox {
    VAlign: VAligns.Center;
    Experiment.Rule.ShowLegend(10 pts, 1.4 inch) {
      Border: 0.25 {Color: 80%};
      MarginR: 12 pts;
      Padding: 5
    };
    OccurranceChart(new SizeClass(Extent.Size.Width - 2 inches, Extent.Size.Height));
  };
}
//======================================================================

class SegmentFrequencyClass: FrequencyChartClass {
  VectorClass PartitionMax;

  Constructor(ExperimentClass experiment, group) {
    super.Constructor(experiment, experiment.Data.UniqueCount);

    PartitionMax = new(experiment.Rule.Partitions.Length, 0);

    foreach (var cognate in Data.UsedCognates) {
      foreach (var word in cognate.Words) {
        var rate = Rates[word.Taxon.Index];
        foreach (var segment in word.Segments) {
          ++rate.TotalCount;
          rate.Count.AddValue(segment.Index, 1);
          PartitionMax.AddValue(segment.PartitionIndex, 1);
        }
      }
    }

    ComputeDistance(group ? ref CompareGroups : ref CompareFrequency);
  }

  CompareGroups(i0, i1, options) {
    var f0 = FirstRate[i0];
    var f1 = FirstRate[i1];
    var d  = PartitionMax[Data.UniqueSegments[f0.Index].PartitionIndex] - PartitionMax[Data.UniqueSegments[f1.Index].PartitionIndex];
    if (d == 0)
      return f0.Frequency.Compare(f1.Frequency);
    return d;
  }

  override SegmentBar(RateDataClass rate, index, width, height) = Canvas {
    var f = rate.Frequency[index].Frequency / rate.MaxFrequency;
    Size: new SizeClass(width-1, height * f);
    MarginR: 1;
    var s = Data.UniqueSegments[index];
    Background: ChartColor(s.PartitionIndex);
    TipAction: new SegmentActionClass(rate, s, rate.Count[index], f);
  };

  SegmentLabel(SegmentClass[] segments, index, width, height) = HBox {
    Width: width;
    Height: height;
    HAlign: HAligns.Center;
    segments[index].ShowSegment;
  };

  override OccurranceChart(SizeClass size) = MatrixBlock {
    var lw = 60 pts;
    var cw = size.Width - lw;
    var bw = cw / Data.UniqueCount;
    var bh = bw * 1.5;
    var h  = (size.Height - bh) / Taxa.Length;
    var r0 = SortedRates[0];

    TextHeight: 12 pts;
    VAlign: VAligns.Bottom;
    foreach (var rate in SortedRates) {
      Row {
        Cell {
          PaddingR: 3 pts;
          Frame {
            Width: lw;
            rate.Taxon.Language;
          };
          Canvas {
            Background: Colors.Red;
            var frac = rate.Distance / MaxDistance;
            Size: new SizeClass(lw * frac, 2);
            Tip: new TipClass(String("{0}% different from {1}"(frac*100.0 {TextDigits: 1}, r0.Taxon.Language)));
          };
        };
        LangCanvas(rate, bw, h);
      };
    }

    Row {
      Empty;
      TextHeight: 1.1 * bw;
      HBox {
        SegmentLabel(Data.UniqueSegments, each SortedIndexes, bw, bh);
      };
    }
  };
}

//======================================================================

class PartitionRateActionClass: ActionClass {
  RateDataClass  Rate;
  PartitionClass Partition;
  TaxonClass     Taxon;
  var            Count,
                 Percent;

  Constructor(RateDataClass rate, PartitionClass partition, count, percent) {
    super.Constructor(Actions.RunQuery, null);
    Partition = partition;
    Taxon     = rate.Taxon;
    Count     = count;
    Percent   = percent;
  }

  override GetQuery = MatchAll WordClass {
    MatchAny LanguageClass {
      Taxon.Language;
    };
    MatchAny SegmentClass {
      Partition.Segments;
    };
  };

  override GetLayoutTip = VBox {
    HAlign: HAligns.Center;
    Span {
      Lang.Occurrences(Count);
      Space;
      Span {
        "(";
        TextDigits: 1;
        Percent * 100.0;
        "%)";
      }
    };
  };
}

//======================================================================

class PartitionFrequencyClass: FrequencyChartClass {
  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment, experiment.Rule.Partitions.Length);

    foreach (var cognate in Data.UsedCognates) {
      foreach (var word in cognate.Words) {
        var rate = Rates[word.Taxon.Index];
        foreach (var segment in word.Segments) {
          ++rate.TotalCount;
          rate.Count.AddValue(segment.PartitionIndex, 1);
        }
      }
    }

    ComputeDistance(ref CompareFrequency);
  }

  override SegmentBar(RateDataClass rate, index, width, height) = Canvas {
    var f = rate.Frequency[index].Frequency / rate.MaxFrequency;
    Size: new SizeClass(width-1, height * f);
    MarginR: 1;
    var partition = Partitions[index];
    Background: partition.Color;
    TipAction: new PartitionRateActionClass(rate, partition, rate.Count[index], f);
  };

  PartitionLabel(index, width, height) = Frame {
    Width: width;
    Height: height;
    ParAlignment: ParAlignments.Center;
    Partitions[index].Name;
  };

  override OccurranceChart(SizeClass size) = MatrixBlock {
    var lw = 60 pts;
    var cw = size.Width - lw;
    var bw = cw / Partitions.Length;
    var bh = 16 pts;
    var h  = (size.Height - bh) / Taxa.Length;
    var r0 = SortedRates[0];

    TextHeight: 12 pts;
    VAlign: VAligns.Bottom;
    foreach (var rate in SortedRates) {
      Row {
        Cell {
          PaddingR: 3 pts;
          Frame {
            Width: lw;
            rate.Taxon.Language;
          };
          Canvas {
            Background: Colors.Red;
            var frac = rate.Distance / MaxDistance;
            Size: new SizeClass(lw * frac, 2);
            Tip: new TipClass(String("{0}% different from {1}"(frac*100.0 {TextDigits: 1}, r0.Taxon.Language)));
          };
        };
        LangCanvas(rate, bw, h);
      };
    }

    Row {
      Empty;
      TextHeight: 9 pts;
      HBox {
        VAlign: VAligns.Top;
        PartitionLabel(each SortedIndexes, bw, bh);
      };
    }
  };
}

//======================================================================

