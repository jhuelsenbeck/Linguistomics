using Format, Units, Math, LinkTypes;

//======================================================================

class ShowDesignClass {
  SizeClass   SlidePage,
              SlideContent;
  MarginClass SlideMargin;
  var         SlideFooter,
              SlideHeader,
              HeaderGap,
              ItemTextFormat,
              BulletIndent,
              BulletSize,
              BulletDone,
              BulletCurrent,
              ItemIndent,
              ItemWidth,
              TotalIndent,
              ItemSpacer,
              TitleHeight,
              BodyHeight;


  Constructor(header, footer) {
    HeaderGap      = 12 pts;
    ItemSpacer     = 10 pts;
    TitleHeight    = 30 pts;
    BodyHeight     = 18 pts;
    BulletIndent   = 0.25 inches;
    ItemIndent     = 1 inch;
    SlideHeader    = header;
    SlideFooter    = footer;
    SlidePage      = DocMetrics.DocumentSize;
    SlideMargin    = Margin(DocMetrics.PageMargin.Left, SlideHeader + HeaderGap, DocMetrics.PageMargin.Right, SlideFooter);
    SlideContent   = Size(DocMetrics.PageContent.Width, DocMetrics.DocumentSize.Height - header - footer - HeaderGap*2);
    ItemTextFormat = {TextHeight: 20 pts};
    BulletDone     = Tex.blacksquare;
    BulletCurrent  = Tex.blacktriangleright;
    TotalIndent    = ItemIndent + BulletIndent;
    ItemWidth      = SlideContent.Width - TotalIndent - SlideMargin.Left - SlideMargin.Right;
  }

  virtual HeaderFooter(ShowClass show, SlideItemClass item, title, page) = Block {
    Paragraph {
      PageBreakBefore: true;
    };
  };

  FixedFrame(x, y, width, height) = Frame {
    HRelative: HRelatives.Page;
    VRelative: VRelatives.Page;
    Wrapping: Wrappings.BehindText;
    X: x;
    Y: y;
    Width: width;
    Height: height;
  };
}

ShowDesignClass SlideDesigns.Plain = new(0, 0);

//======================================================================

class ProgressDesignClass: ShowDesignClass {
  Constructor {
    super.Constructor(1.5 inches, 0.36 inches);
  }

  override HeaderFooter(ShowClass show, SlideItemClass item, title, page) = Block {
    Paragraph {
      PageBreakBefore: true;

      FixedFrame(0, 0, SlidePage.Width, SlideHeader) {
        HeaderBackground(show, item, title, SlidePage.Width, SlideHeader, page);
      };
      FixedFrame(0, SlidePage.Height - SlideFooter, SlidePage.Width, SlideFooter) {
        FooterBackground(show, item, title, SlidePage.Width, SlideFooter, page);
      };
    };
  };

  HeaderBackground(ShowClass show, SlideItemClass item, title, width, height, page) = Block {
    Paragraph {
      HBox {
        MarginLR: 24 pts;
        MarginT: 12 pts;
        MarginB: 12 pts;
        Separation: 9 pts;

        if (valid item) {
          foreach (var group in show.Groups) {
            VBox {
              TextHeight: 10 pts;
              group.Title;
              HBox {
                TextFamily: Main.MathFamily;

                var pn = -1;
                foreach (var i in group.Items) {
                  if (pn != item.Page) {
                    pn = item.Page;
                    if (valid item and group.Index < item.Index)
                      Tex.blackcirc;
                    else
                      Tex.bigcirc;
                  }
                }
              };
            };
          }
        }
      }
    };
    Paragraph {
      SpaceBefore: 20 pts;
      TextHeight: 30 pts;
      LeftIndent: 24 pts;
      title;
    };
  };

  FooterBackground(ShowClass show, SlideItemClass item, title, width, height, page) = Paragraph {
    RightIndent: 10 pts;
    ParAlignment: ParAlignments.Right;
    TextHeight: 16 pts;
    page+1;
    " / ";
    PageCount;
  };
}
//======================================================================

class FancyDesignClass: ShowDesignClass {
  Constructor {
    super.Constructor(0.75 inches, 0.5 inches);
  }

  override HeaderFooter(ShowClass show, SlideItemClass item, title, page) = Block {
    Paragraph {
      PageBreakBefore: true;

      if (page > 0) {
        FixedFrame(0, 0, SlidePage.Width, SlideHeader) {
          HeaderBackground(show, item, title, SlidePage.Width, SlideHeader)
        };
        FixedFrame(0, SlidePage.Height -SlideFooter, SlidePage.Width, SlideFooter) {
          FooterBackground(show, item, title, SlidePage.Width, SlideFooter, page);
        };
      }
    };
  };

  Design(width, height, right, bar) = Canvas {
    Height: height;

    var x0 = 0;
    var y0 = 0;
    var t  = 0.10 height;
    var x1 = 0.80 width;
    var x2 = 0.90 width;
    var p1 = Point((x2 + x1)*0.5, height * (right ? 0.25 : 0.75));

    Figure {
      Fill: bar;
      FigurePath {
        Closed: true;
        LineTo(x0, t);
        LineTo(x1, t);
        QuadTo(p1, Point(x2, height));
        LineTo(x2, height);
        LineTo(x0, height);
      }
    };

    Figure {
      Fill: Style.BarLine;
      FigurePath {
        Closed: true;
        MoveTo(x0, y0);
        LineTo(x1, y0);
        QuadTo(p1, Point(x2, height-t));
        LineTo(width, height-t);
        LineTo(width, height);
        LineTo(x2, height);
        QuadTo(p1, Point(x1, t));
        LineTo(x0, t);
      }
    };
  };

  HeaderBackground(ShowClass show, SlideItemClass item, title, width, height) = Design(width, height, true, Style.HeaderLeftBar) {
    Frame {
      Width: 0.75 width;
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Paragraph {
        TextHeight: 30 pts;
        TextColor: Colors.White;
        title;
      };
    };
  };

  FooterBackground(ShowClass show, SlideItemClass item, title, width, height, page) = Design(width, height, false, Style.LeftBar) {
    Frame {
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Width: DocMetrics.PageContent.Width;
      Paragraph {
        TabStops: [(DocMetrics.PageContent.Width) {Type: TabTypes.Right}];
        TextHeight: 16 pts;
        Span {
          TextColor: 75%;
          title
        };
        Tab;
        Span {
          TextColor: Style.HeaderBar1;
          page;
        }
      }
    }
  };
}
//======================================================================

class SlideClass {
  var             Title;
  ShowClass       Show;
  ShowDesignClass Design;

  Constructor(ShowClass show, title) {
    Title  = title;
    Show   = show;
    Design = show.Design;
  }

  virtual ShowBody = null;

  virtual AddSlidePage(page) = Block {
    Design.HeaderFooter(Show, null, Title, page);
    ShowBody;
  };
}

//======================================================================

class TitleSlideClass: SlideClass {
  var                       Index;
  ListClass<SlideItemClass> Items;

  Constructor(ShowClass show, variable, index) {
    super.Constructor(show, variable.Title);
    Index = index;
    Items = new(32);
  }

  override AddSlidePage(page) = Block {
    Design.HeaderFooter(Show, Items[0], null, page++);
    Paragraph {
      ParAlignment:ParAlignments.Center;
      SpaceBefore: 1 inch;
      Style.MainFamily;
      TextHeight: Design.TitleHeight;
      Title;
    };
  };
}

//======================================================================

class IntroSlideClass: SlideClass {
  static NameHeight  = 18 pts;
  static TitleHeight = 32 pts;
  static NameGap     = 10 pts;

  Constructor(ShowClass show, title) {
    super.Constructor(show, title);
  }

  override AddSlidePage(page) = Block {
    Design.HeaderFooter(Show, null, null, page++);
    ShowBody;
  };

  override ShowBody = Block {
    var gap = (Design.SlideContent.Height - TitleHeight*2 - (NameGap+NameHeight)*(Show.AuthorList.Length+1)) * 0.25;

    ParAlignment: ParAlignments.Center;
    TextHeight: NameHeight;

    Paragraph {
      TextHeight: TitleHeight;
      Title;
    };

    foreach (var author in Show.AuthorList) {
      Paragraph {
        SpaceBefore: each0 > 0 ? NameGap : gap;
        author.First;
        Space;
        author.Last;
      };

      if (Show.AuthorList.Length == 1) {
        var department = author.FindFirstFact(DepartmentLink);
        if (valid department) {
          Paragraph {
            department.Name;
          };
          var org = department.FindFirstFact(DepartmentLink);
          if (valid org) {
            Paragraph {
              org.Name;
            };
          }
        }
        Paragraph {
          var email = author.FindFirstFact(WorkEmailLink);
          if (valid email)
            email.Value;
        };
      }
    }

    Paragraph {
      SpaceBefore: gap;
      TextFormat: "dd MMM yyyy";
      System.Now;
    };
  };
}
//======================================================================

class EndSlideClass: SlideClass {
  Constructor(ShowClass show) {
    super.Constructor(show, Lang.Questions);
  }

  override ShowBody = Block {
    Paragraph {
      var h = 150 pts;
      ParAlignment: ParAlignments.Center;
      SpaceBefore: (Design.SlideContent.Height - h) * 0.5;
      Figure {
        TextHeight: h;
        Fill: ((80%)..0%) {Vertical: true};
        "?";
      }
    };
  };
}

//======================================================================

class BibSlideClass: SlideClass {
  Constructor(ShowClass show) {
    super.Constructor(show, Lang.References);
  }

  override AddSlidePage(page) = Block {
    PageBreak;
    Bibliography {
      Title: Lang.References;
    };
  };
}

//======================================================================

ShowItem(ShowClass show, variable) {
   var text = variable.?Text;
   if (exists text) {
     return Block {
       show.Design.ItemTextFormat;
       text;
     };
   }
   else {
     return Block {
       Style.MainStyle;
       variable.?Body(show);
     };
   }
}

class SingleSlideClass: SlideClass {
  var Variable;

  Constructor(ShowClass show, variable) {
    super.Constructor(show, variable.Title);
    Variable = variable;
  }

  override ShowBody = ShowItem(Show, Variable);
}

//======================================================================

class SlideItemClass {
  var Height,
      Content,
      Page,
      Numbered,
      Number,
      Index;

   Constructor(ShowClass show, variable, number) {
     Number   = number;
     Numbered = variable.?Numbered ?? 0;
     Content = Frame {
       Width: show.Design.ItemWidth;
       ShowItem(show, variable);
     };
     Height = LayoutSize(Content).Height;
     Page   = show.PageNumber;
     Index  = show.SlideIndex;
   }
}

//======================================================================

class SlideGroupClass {
  ListClass<SlideItemClass> Items;
  SlideItemClass            Item;
  var                       Page;

  Constructor(ShowClass show, variable) {
    Items = new(8);
    Item  = new(show, variable, 0);
    Page  = show.PageNumber;
  }
}

//======================================================================

class FigureSlideClass: SlideClass {
  var Figure;

  Constructor(ShowClass show, TitleSlideClass main, topic) {
    super.Constructor(show, topic.?Title ?? topic.Figure.Caption(show.Experiment));
    Figure = topic.Figure;
  }

  override AddSlidePage(page) = Block {
    Design.HeaderFooter(Show, null, Title, page);
    Paragraph {
      ParAlignment: ParAlignments.Center;
      Frame {
        Figure.Body(Show.Experiment) {
          TextHeight: 16 pts;
        }
      }
    }
  };
}

//======================================================================

class TopicSlidesClass: SlideClass {
  SlideGroupClass[] Groups;
  var               Category,
                    Topic,
                    Pause;

  Constructor(ShowClass show, TitleSlideClass main, category, topic, pause) {
    super.Constructor(show, category.Title);
    Topic = topic;
    Pause = pause;

    var groups = new ListClass<SlideGroupClass>(32);
    var group  = new SlideGroupClass(show, topic);
    groups.Add(group);

    var height = 0.0;
    foreach (var iv in topic.Items) {
      var item = new SlideItemClass(show, iv, each1);
      main.Items.Add(item);
      if (group.Items.Length > 0 and height + item.Height >= Design.SlideContent.Height) {
        group = new SlideGroupClass(show, topic);
        ++show.PageNumber;
        groups.Add(group);
        height = 0.0;
      }
      group.Items.Add(item);
      height += item.Height + Design.ItemSpacer;
    }

    Groups = groups.Values;
  }

  ShowSet(SlideGroupClass group, SlideItemClass item, page, count, number) = Block {
    Design.HeaderFooter(Show, item, Topic.Title, page);

    Table {
      LeftIndent: Design.ItemIndent;

      Columns: [Design.BulletIndent, Design.ItemWidth];
      for (var i = 0; i < count; ++i) {
        Row {
          var gi = group.Items[i];
          Cell {
            Paragraph {
              Design.ItemTextFormat;
              if (gi.Numbered > 0) {
                HBox {
                  PaddingLR: 2 pts;
                  Background: 80%;
                  gi.Numbered;
                };
              }
              else if (gi.Number == number+count)
                Design.BulletCurrent;
              else
                Design.BulletDone;
            };
            Paragraph;
          };
          Cell {
            gi.Content;
            PaddingB: Design.ItemSpacer;
          };
        }
      }
    };
  };

  override AddSlidePage(page) = Block {
    if (Pause) {
      var number = 0;
      foreach (var group in Groups) {
        var i = 0;
        foreach (var item in group.Items)
          ShowSet(group, item, page, each1, number);
        number += group.Items.Length;
      }
    }
    else {
      var group = Groups.FirstElement;
      ShowSet(group, group.Item, page, group.Items.Length, group.Items.Length);
    }
  };
}
//======================================================================

class ShowClass: BaseViewClass {
  SlideClass[]      SlideDeck;
  PersonClass[]     AuthorList;
  ShowDesignClass   Design;
  TitleSlideClass[] Groups;
  var               PageNumber,
                    SlideIndex;

  Constructor(ExperimentClass experiment, id, title, PersonClass[] authors) {
    super.Constructor(experiment, id, title);
    DocumentType = ConfigurationClass.DocumentTypes.SlideShow;
    AuthorList   = authors;
    Design       = SlideDesigns.Plain;
    SlideIndex   = 0;
    PageNumber   = 0;
  }

  ShowFigureSlide(figure, format=null) = Block {
    figure.Caption(Experiment);
    Paragraph {
      ParAlignment: ParAlignments.Center;
      format;
      figure.Body(Experiment);
    }
  };

  override GetMainDocument = Document {
    RefStyle: Style.ReferenceStyle;
    Size: DocMetrics.DocumentSize;
    Margin: Design.SlideMargin;
    Style.MainStyle;


    var slides = [new IntroSlideClass(this, Title)] +
                 SlideDeck +
                 [new EndSlideClass(this), new BibSlideClass(this)];

    foreach (var slide in slides)
      slide.AddSlidePage(each0);
  };

  AddSlideGroup(slidesvar) {
    var list   = new ListClass<SlideClass>(128);
    var groups = new ListClass<TitleSlideClass>(32);
    foreach (var slidevar in slidesvar) {
      var topics = slidevar.?Topics;
      if (exists topics) {
        var ts = new TitleSlideClass(this, slidevar, each0);
        groups.Add(ts);
        list.Add(ts);

        foreach (var topic in topics) {
          SlideClass s;
          var figure = topic.?Figure;
          if (exists figure)
            s = new FigureSlideClass(this, ts, topic);
          else if (exists topic.?Items) {
            var pause = topic.?Pause;
            s = new TopicSlidesClass(this, ts, slidevar, topic, exists pause and pause);
          }
          else
            s = new SingleSlideClass(this, topic);
          list.Add(s);
        }
      }
      else
        list.Add(new SingleSlideClass(this, slidevar));
    }
    Groups = groups.Values;
    return list.Values;
  }
}
//======================================================================

