using Format, Units, Math, LinkTypes;

//======================================================================

class ShowDesignClass {
  SizeClass   SlidePage,
              SlideContent;
  MarginClass SlideMargin;
  var         SlideFooter,
              SlideHeader,
              HeaderGap,
              BulletIndent,
              BulletSize,
              BulletDone,
              BulletCurrent,
              ItemIndent,
              TotalIndent,
              ItemSpacer,
              BodyHeight;


  Constructor(header, footer) {
    HeaderGap      = 12 pts;
    ItemSpacer     = 10 pts;
    BodyHeight     = 18 pts;
    BulletIndent   = 0.25 inches;
    ItemIndent     = 1 inch;
    TotalIndent    = ItemIndent + BulletIndent + 0.5 inches; // Why is this 0.5 inches needed?
    SlideHeader    = header;
    SlideFooter    = footer;
    SlidePage      = DocMetrics.DocumentSize;
    SlideMargin    = new MarginClass(DocMetrics.PageMargin.Left, SlideHeader + HeaderGap, DocMetrics.PageMargin.Right, SlideFooter);
    SlideContent   = new SizeClass(SlidePage.Width - SlideMargin.Left - SlideMargin.Right, DocMetrics.DocumentSize.Height - header - footer - HeaderGap*2);
    BulletDone     = Tex.blacksquare;
    BulletCurrent  = Tex.blacktriangleright;
  }

  virtual HeaderFooter(ShowClass show, SlideClass slide, title, footer) = Block {
    Paragraph {
      PageBreakBefore: true;
    };
  };

  FixedFrame(x, y, width, height) = Frame {
    HRelative: HRelatives.Page;
    VRelative: VRelatives.Page;
    Wrapping: Wrappings.BehindText;
    X: x;
    Y: y;
    Width: width;
    Height: height;
  };

  virtual TitlePage(title, color) = Paragraph {
    var h = 40 pts;
    FixedFrame(0, (SlidePage.Height - h) * 0.5, SlidePage.Width, h) {
      Paragraph {
        ParAlignment:ParAlignments.Center;
        Style.MainFamily;
        TextColor: color;
        TextHeight: h;
        title;
      }
    }
  };
}

ShowDesignClass SlideDesigns.Plain = new(0, 0);

//======================================================================

class ProgressDesignClass: ShowDesignClass {
  Constructor {
    super.Constructor(1.5 inches, 0.36 inches);
  }

  override HeaderFooter(ShowClass show, SlideClass slide, title, footer) = Block {
    Paragraph {
      PageBreakBefore: true;

      FixedFrame(0, 0, SlidePage.Width, SlideHeader) {
        HeaderBackground(show, slide, title, footer, SlidePage.Width, SlideHeader);
      };
      FixedFrame(0, SlidePage.Height - SlideFooter, SlidePage.Width, SlideFooter) {
        FooterBackground(show, slide, title, footer, SlidePage.Width, SlideFooter);
      };
    };
  };

  GetBox(ShowClass show, th, s) = HBox {
    TextFamily: Style.SansSerif;
    TextColor: Colors.Gray;
    TextHeight: th;
    Separation: s;
    MarginLR: 24 pts;
    MarginT: 12 pts;
    MarginB: 12 pts;

    foreach (var group in show.Groups) {
      VBox {
        group.Title;
        HBox {
          var i = group.StartCount;
          for (var j = 0; j < group.CompleteCount; ++j) {
            if (i < show.PageIndex)
              Tex.blackcirc;
            else
              Tex.bigcirc;
            ++i;
          }
        };
      };
    }
  };

  HeaderBackground(ShowClass show, SlideClass slide, title, footer, width, height) = Block {
    var th = 12 pts;
    for (;;) {
      var bw  = LayoutSize(GetBox(show, th, 0)).Width;
      var l   = show.Groups.Length - 1;
      var sep = 1.0;
      if (l > 1)
        sep = Math.Max([0, (DocMetrics.DocumentSize.Width - bw) / l]);
      if (sep > 0) {
        GetBox(show, th, sep);
        break;
      }
      else
        th -= 1 pts;
    }

    Paragraph {
      SpaceBefore: 20 pts;
      TextHeight: 30 pts;
      LeftIndent: 24 pts;
      title;
    };
  };

  FooterBackground(ShowClass show, SlideClass slide, title, footer, width, height) = Paragraph {
    RightIndent: 10 pts;
    ParAlignment: ParAlignments.Right;
    TextHeight: 16 pts;
    show.PageIndex+1;
    " / ";
    show.PageTotal;
  };
}
//======================================================================

class FancyDesignClass: ShowDesignClass {
  Constructor {
    super.Constructor(0.75 inches, 0.5 inches);
  }

  override HeaderFooter(ShowClass show, SlideClass slide, title, footer) = Block {
    Paragraph {
      PageBreakBefore: true;

      if (show.PageIndex > 0) {
        if (valid title) {
          FixedFrame(0, 0, SlidePage.Width, SlideHeader) {
            HeaderBackground(show, slide, title, footer, SlidePage.Width, SlideHeader)
          };
        }
        if (valid footer) {
          FixedFrame(0, SlidePage.Height - SlideFooter, SlidePage.Width, SlideFooter) {
            FooterBackground(show, slide, title, footer, SlidePage.Width, SlideFooter);
          };
        }
      }
    };
  };

  Design(width, height, right, bar) = Canvas {
    Height: height;

    var x0 = 0;
    var y0 = 0;
    var t  = 0.10 height;
    var x1 = 0.80 width;
    var x2 = 0.90 width;
    var p1 = new PointClass((x2 + x1)*0.5, height * (right ? 0.25 : 0.75));

    Figure {
      Fill: bar;
      FigurePath {
        Closed: true;
        LineTo(x0, t);
        LineTo(x1, t);
        QuadTo(p1, new(x2, height));
        LineTo(x2, height);
        LineTo(x0, height);
      }
    };

    Figure {
      Fill: Style.BarLine;
      FigurePath {
        Closed: true;
        MoveTo(x0, y0);
        LineTo(x1, y0);
        QuadTo(p1, new(x2, height-t));
        LineTo(width, height-t);
        LineTo(width, height);
        LineTo(x2, height);
        QuadTo(p1, new(x1, t));
        LineTo(x0, t);
      }
    };
  };

  HeaderBackground(ShowClass show, SlideClass slide, title, footer, width, height) = Design(width, height, true, Style.HeaderLeftBar) {
    Frame {
      Width: 0.75 width;
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Paragraph {
        TextHeight: 30 pts;
        TextColor: Colors.White;
        title;
      };
    };
  };

  FooterBackground(ShowClass show, SlideClass slide, title, footer, width, height) = Design(width, height, false, Style.LeftBar) {
    Frame {
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Width: DocMetrics.PageContent.Width;
      Paragraph {
        TabStops: [(DocMetrics.PageContent.Width) {Type: TabTypes.Right}];
        TextHeight: 16 pts;
        Span {
          TextColor: 75%;
          footer;
        };
        Tab;
        Span {
          TextColor: Style.HeaderBar1;
          show.PageIndex;
        }
      }
    }
  };

  override TitlePage(title, color) = Block {
    Paragraph {
      FixedFrame(0, 0, SlidePage.Width, SlidePage.Height) {
        Background: Style.TitlePageBackground;
      }
    };
    super.TitlePage(title, Style.TitlePageText);
  };
}
//======================================================================

class SlideClass {
  var Title,
      Footer;

  Constructor {
  }

  virtual ShowBody(ShowClass show, SizeClass maxsize) = null;

  virtual AddSlidePage(ShowClass show, title, footer) = Block {
    show.Design.HeaderFooter(show, this, title, footer);
    ShowBody(show, show.Design.SlideContent);
    show.PageIndex++;
  };

  virtual void CountSlidePage(ShowClass show) {
    show.PageTotal++;
  }
}

//======================================================================

class TitleSlideClass: SlideClass {
  ListClass<SlideItemClass> Items;
  var                       StartCount,
                            CompleteCount;

  Constructor(variable) {
    super.Constructor;
    Items         = new(32);
    StartCount    = 0;
    CompleteCount = 0;
    Title         = variable.Title;
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    show.Design.HeaderFooter(show, this, null, null);
    show.Design.TitlePage(title, Colors.Black);
    show.PageIndex++;
  };
}

//======================================================================

class IntroSlideClass: SlideClass {
  static NameHeight = 18 pts;
  static NameGap    = 10 pts;

  Constructor(title) {
    super.Constructor;
    Title = title;
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    show.Design.HeaderFooter(show, this, null, null);
    ShowBody(show, show.Design.SlideContent);
    show.PageIndex++;
  };

  override ShowBody(ShowClass show, SizeClass maxsize) = Block {
    var title = Paragraph {
      TextHeight: 32 pts;
      show.Title;
    };

    var gap = (maxsize.Height - LayoutSize(title).Height - (NameGap+NameHeight)*(show.AuthorList.Length+1)) * 0.25;

    ParAlignment: ParAlignments.Center;
    title;


    TextHeight: NameHeight;

    foreach (var author in show.AuthorList) {
      Paragraph {
        SpaceBefore: each0 > 0 ? NameGap : gap;
        author.First;
        Space;
        author.Last;
      };

      if (show.AuthorList.Length == 1) {
        var department = author.FindFirstFact(DepartmentLink);
        if (valid department) {
          department.Name;
          var org = department.FindFirstFact(DepartmentLink);
          if (valid org)
            org.Name;
        }
        author.FindFirstFact(WorkEmailLink);
      }
    }

    Paragraph {
      SpaceBefore: gap;
      TextFormat: "dd MMM yyyy";
      System.Now;
    };
  };
}
//======================================================================

class EndSlideClass: SlideClass {
  Constructor {
    super.Constructor;
    Title = Lang.Questions;
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    ShowBody(show, show.Design.SlideContent);
  };

  override ShowBody(ShowClass show, SizeClass maxsize) = Block {
    ParAlignment: ParAlignments.Center;
    Paragraph {
      PageBreakBefore: true;

      TextHeight: 50 pts;
      Lang.Questions;
    };

    Paragraph {
      var h = 150 pts;
      SpaceBefore: (maxsize.Height - h) * 0.25;

      Figure {
        TextHeight: h;
        Fill: Style.SphericalFill(Colors.DarkGreen);
        Icons.help;
      }
    };
  };
}

//======================================================================

class BibSlideClass: SlideClass {
  Constructor {
    super.Constructor;
    Title = Lang.References;
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    PageBreak;
    Bibliography {
      Title: Lang.References;
    };
    show.PageIndex++;
  };
}

//======================================================================

ShowItem(ShowClass show, SizeClass maxsize, variable) {
   var text = variable.?Text;
   if (valid text) {
     return Block {
       Style.ItemTextFormat;
       text;
     };
   }
   else {
     return Block {
       Style.MainStyle;
       variable.?Body(show.Experiment, maxsize);
     };
   }
}

//======================================================================

class SingleSlideClass: SlideClass {
  var Variable;

  Constructor(variable, footer) {
    super.Constructor;
    Title    = variable.Title;
    Footer   = footer;
    Variable = variable;
  }

  override ShowBody(ShowClass show, SizeClass maxsize) = ShowItem(show, maxsize, Variable);
}

//======================================================================

class SlideItemClass {
  var Height,
      Content,
      Numbered,
      Number;

   Constructor(ShowClass show, variable, number) {
     Number   = number;
     Numbered = variable.?Numbered ?? 0;
     var maxsize = new SizeClass(show.Design.SlideContent.Width - show.Design.TotalIndent, show.Design.SlideContent.Height);

     Content = Frame {
       Width: maxsize.Width;
       ShowItem(show, maxsize, variable);
     };
     Height = LayoutSize(Content).Height;
   }
}

//======================================================================

class SlideGroupClass {
  ListClass<SlideItemClass> Items;
  SlideItemClass            Item;
  var                       Title;

  Constructor(ShowClass show, variable) {
    Items = new(8);
    Item  = new(show, variable, 0);
    Title = variable.?Title;
  }
}

//======================================================================

class FigureSlideClass: SlideClass {
  var Figure,
      ContentFormat;

  Constructor(ShowClass show, variable, figure) {
    super.Constructor;
    Figure        = figure;
    ContentFormat = variable.?Format;
    Title         = variable.?Title ?? figure.?Title;
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    show.Design.HeaderFooter(show, this, title, footer);

    var ch = 0.0;
    if (exists Figure.?Caption) {
      var caption = Block {
        Paragraph {
          TextHeight: 16 pts;
          Figure.?Caption(show.Experiment) ?? Title;
        };
        Paragraph;
      };
      caption;
      ch = LayoutSize(caption).Height;
    }

    Paragraph {
      ParAlignment: ParAlignments.Center;
      Frame {
        var content = show.Design.SlideContent;
        Figure.Body(show.Experiment, new SizeClass(content.Width, content.Height - ch)) {ContentFormat};
      };
    };
    show.PageIndex++;
  };
}

//======================================================================

class TopicSlidesClass: SlideClass {
  ListClass<SlideGroupClass> Groups;
  var                        Main,
                             Topic,
                             Pause;

  Constructor(ShowClass show, TitleSlideClass main, variable, topic, pause) {
    super.Constructor;
    Topic = topic;
    Main  = main;
    Pause = pause;

    Groups = new(32);
    var group  = new SlideGroupClass(show, topic);
    Groups.Add(group);

    var height = 0.0;
    foreach (var iv in show.GetTopicItems(topic)) {
      var item = new SlideItemClass(show, iv, each1);
      main.Items.Add(item);

      if (group.Items.Length > 0 and height + item.Height >= show.Design.SlideContent.Height) {
        group = new SlideGroupClass(show, topic);
        Groups.Add(group);
        height = 0.0;
      }
      group.Items.Add(item);
      height += item.Height + show.Design.ItemSpacer;
    }
  }

  ShowSet(ShowClass show, title, footer, SlideGroupClass group, count, number) = Block {
    var design = show.Design;
    design.HeaderFooter(show, this, title, footer);

    Table {
      LeftIndent: design.ItemIndent;

      Columns: [design.BulletIndent, design.SlideContent.Width];
      for (var i = 0; i < count; ++i) {
        Row {
          var gi = group.Items[i];
          Cell {
            Paragraph {
              Style.ItemTextFormat;
              if (gi.Numbered > 0) {
                HBox {
                  PaddingLR: 2 pts;
                  Background: 80%;
                  gi.Numbered;
                };
              }
              else if (gi.Number == number+count)
                design.BulletCurrent;
              else
                design.BulletDone;
            };
            Paragraph;
          };
          Cell {
            gi.Content;
            PaddingB: design.ItemSpacer;
          };
        }
      }
    };
  };

  override AddSlidePage(ShowClass show, title, footer) = Block {
    if (Pause) {
      var number = 0;
      foreach (var group in Groups) {
        foreach (var item in group.Items)
          ShowSet(show, group.Title, Main.Title, group, each1, number);
        number += group.Items.Length;
        show.PageIndex++;
      }
    }
    else {
      var group = Groups.FirstElement;
      ShowSet(show, group.Title, Main.Title, group, group.Items.Length, group.Items.Length);
      show.PageIndex++;
    }
  };

  override void CountSlidePage(ShowClass show) {
    if (Pause)
      show.PageTotal += Groups.Length;
    else
      show.PageTotal++;
  }
}
//======================================================================

class ShowClass: BaseViewClass {
  ListClass<SlideClass>      SlideDeck;
  PersonClass[]              AuthorList;
  ShowDesignClass            Design;
  ListClass<TitleSlideClass> Groups;
  var                        TypeFlags,
                             PageIndex,
                             PageTotal,
                             CompleteCount,
                             Bibliography;

  Constructor(ExperimentClass experiment, id, title, PersonClass[] authors, bibliography) {
    super.Constructor(experiment, id, title);
    DocumentType = ConfigurationClass.DocumentTypes.SlideShow;
    AuthorList   = authors;
    Design       = SlideDesigns.Plain;
    TypeFlags    = 0;
    Bibliography = bibliography;
    Groups       = new(32);
    SlideDeck    = new(128)
  }

  GetTopicItems(topic) {
    var items = topic.?Items;
    if (not valid items)
      items = topic.?GetItems(this);
    return items ?? [];
  }

  override GetMainDocument = Document {
    RefStyle: Style.ReferenceStyle;
    Size: DocMetrics.DocumentSize;
    Margin: Design.SlideMargin;
    Style.MainStyle;

    PageTotal = 1;
    foreach (var slide in SlideDeck)
      slide.CountSlidePage(this);

    PageIndex = 0;
    AddSlide(new IntroSlideClass(Title));
    foreach (var slide in SlideDeck)
      AddSlide(slide);
    AddSlide(new EndSlideClass);
    if (Bibliography)
      AddSlide(new BibSlideClass);
  };

  AddSlide(SlideClass slide) = slide.AddSlidePage(this, slide.Title, slide.Footer);

  CanInclude(slide) {
    return TypeFlags == 0 or not valid slide.?Type or (Integer(slide.Type) & TypeFlags) != 0;
  }

  void AddSlideGroup(slidesvar) {
    var types = Integer(TypeFlags);

    CompleteCount = 0;
    foreach (var slidevar in slidesvar) {
      if (CanInclude(slidevar)) {
        var first = CompleteCount;
        ++CompleteCount;

        var topics = slidevar.?Slide;
        if (valid topics) {
          var ts = new TitleSlideClass(slidevar);
          Groups.Add(ts);
          SlideDeck.Add(ts);

          foreach (var topic in topics) {
            if (CanInclude(topic)) {
              ++CompleteCount;

              SlideClass s;
              var figure = topic.?Figure;
              if (valid figure)
                s = new FigureSlideClass(this, topic, figure);
              else {
                var items = GetTopicItems(topic);
                if (items.Length > 0) {
                  var pause = topic.?Pause;
                  s = new TopicSlidesClass(this, ts, slidevar, topic, valid pause and pause);
                }
                else
                  s = new SingleSlideClass(topic, ts.Title);
              }
              SlideDeck.Add(s);
            }
          }
          ts.StartCount    = first;
          ts.CompleteCount = CompleteCount - first;
        }
        else {
          var figure = slidevar.?Figure;
          if (valid figure)
            SlideDeck.Add(new FigureSlideClass(this, slidevar, figure));
          else
            SlideDeck.Add(new SingleSlideClass(slidevar, slidevar.Title));
        }
      }
    }
  }
}
//======================================================================

