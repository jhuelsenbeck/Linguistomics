using Format, Units;

//======================================================================

abstract class ShowDesignClass {
  var         SideGap,
              BulletIndent,
              Bullet,
              BulletSize,
              BulletDone,
              BulletCurrent,
              ItemIndent,
              TotalIndent,
              ItemSpacer;

  Constructor {
    SideGap       = 0.5 inches;
    ItemSpacer    = 10 pts;
    BulletIndent  = 24 pts;
    ItemIndent    = 0.5 inch;
    TotalIndent   = ItemIndent + BulletIndent;
    Bullet        = Tex.blacksquare;
    BulletDone    = Icons.check;
    BulletCurrent = Tex.blackcirc;
  }

  virtual HeaderFooter(ShowClass show, SlideClass slide, title, footer) = Block {
    Paragraph {
      PageBreakBefore: true;
    };
  };

  FixedFrame(x, y, width, height) = Frame {
    HRelative: HRelatives.Page;
    VRelative: VRelatives.Page;
    Wrapping: Wrappings.BehindText;
    X: x;
    Y: y;
    Width: width;
    Height: height;
  };

  virtual TitlePage(title, color) = Paragraph {
    var h = 40 pts;
    FixedFrame(0, (Extent.Page.Height - h) * 0.5, Extent.Page.Width, h) {
      Paragraph {
        ParAlignment:ParAlignments.Center;
        TextColor: color;
        TextHeight: h;
        title;
      }
    }
  };

  virtual ShowTopicTitle(title) = Paragraph {
    SpaceAfter: 4 pts;
    TextHeight: TopicHeight;
    title;
  };

  virtual  TopicHeight = 32 pts;

  abstract GetFigureCaption(ExperimentClass experiment, title, caption);
  abstract FooterHeight;
  abstract HeaderHeight;
  abstract FooterGap;
  abstract HeaderGap;
}

//======================================================================

class TexDesignClass: ShowDesignClass {
  Constructor {
    super.Constructor;
  }

  override HeaderGap    = 6 pts;
  override FooterGap    = 16 pts;
  override HeaderHeight = 38 pts;
  override FooterHeight = 24 pts;

  override GetFigureCaption(ExperimentClass experiment, title, caption) {
    if (valid title or valid caption) {
      return Frame {
        PaddingB: 10 pts;

        if (valid title) {
          Paragraph {
            LeftIndent: -16 pts;
            TextHeight: 30 pts;
            title;
          };
        }
        if (valid caption) {
          Block {
            TextHeight: 20 pts;
            caption.Caption(experiment);
          };
        }
      };
    }

    return null;
  }

  GetBox(ShowClass show, th, s) = HBox {
    TextFamily: Style.SansSerif;
    TextColor: Colors.Gray;
    TextHeight: th;
    Separation: s;
    MarginLR: 24 pts;
    MarginT: 12 pts;
    MarginB: 12 pts;

    foreach (var group in show.Groups) {
      VBox {
        group.Title;
        HBox {
          var i = group.StartCount;
          for (var j = 0; j < group.CompleteCount; ++j) {
            if (i < show.PageIndex)
              Icons.radio_button_checked;
            else
              Icons.radio_button_unchecked;
            ++i;
          }
        };
      };
    }
  };

  override HeaderFooter(ShowClass show, SlideClass slide, title, footer) = Block {
    var page = Extent.Page;
    Paragraph {
      PageBreakBefore: true;

      var hh = HeaderHeight;
      var fh = FooterHeight;

      FixedFrame(0, 0, page.Width, hh) {
        HeaderBackground(show, slide, title, footer, page.Width, hh);
      };

      FixedFrame(0, page.Height - fh, page.Width, fh) {
        FooterBackground(show, slide, title, footer, page.Width, fh);
      };
    };
  };

  HeaderBackground(ShowClass show, SlideClass slide, title, footer, width, height) = Block {
    var th = 12 pts;
    for (;;) {
      var bw  = GetLayoutSize(GetBox(show, th, 0), Extent.Size).Width;
      var l   = show.Groups.Length - 1;
      var sep = 1.0;
      if (l > 1)
        sep = Math.Max(0, (Extent.Page.Width - bw) / l);
      if (sep > 0) {
        GetBox(show, th, sep);
        break;
      }
      else
        th -= 1 pts;
    }
  };

  FooterBackground(ShowClass show, SlideClass slide, title, footer, width, height) = Paragraph {
    RightIndent: 10 pts;
    ParAlignment: ParAlignments.Right;
    TextHeight: 16 pts;
    show.PageIndex+1;
    " / ";
    show.PageTotal;
  };
}
//======================================================================

class FancyDesignClass: ShowDesignClass {
  Constructor {
    super.Constructor;
  }

  override HeaderGap    = 6 pts;
  override FooterGap    = 20 pts;
  override HeaderHeight = 56 pts;
  override FooterHeight = 32 pts;

  override ShowTopicTitle(title) = null;

  override GetFigureCaption(ExperimentClass experiment, title, caption) {
    if (valid caption) {
      return Frame {
        PaddingB: 10 pts;
        TextHeight: 16 pts;
        caption.Caption(experiment);
      };
    }
    return null;
  }

  override HeaderFooter(ShowClass show, SlideClass slide, title, footer) = Block {
    var page = Extent.Page;

    Paragraph {
      PageBreakBefore: true;

      if (show.PageIndex > 0) {
        if (valid title) {
          var hh = HeaderHeight;

          FixedFrame(0, 0, page.Width, hh) {
            HeaderBackground(show, slide, title, footer, page.Width, hh)
          };
        }
        if (valid footer) {
          var fh = FooterHeight;
          FixedFrame(0, page.Height - fh, page.Width, fh) {
            FooterBackground(show, slide, title, footer, page.Width, fh);
          };
        }
      }
    };
  };

  Design(width, height, xp, right, bar) = Canvas {
    Height: height;

    var x0 = 0;
    var y0 = 0;
    var t  = 0.10 height;
    var x1 = xp * width;
    var x2 = (xp + 0.1) * width;
    var p1 = new PointClass((x2 + x1)*0.5, height * right);

    Figure {
      Fill: bar;
      FigurePath {
        Closed: true;
        LineTo(x0, t);
        LineTo(x1, t);
        QuadTo(p1, new(x2, height));
        LineTo(x2, height);
        LineTo(x0, height);
      }
    };

    Figure {
      Fill: Style.BarLine;
      FigurePath {
        Closed: true;
        MoveTo(x0, y0);
        LineTo(x1, y0);
        QuadTo(p1, new(x2, height-t));
        LineTo(width, height-t);
        LineTo(width, height);
        LineTo(x2, height);
        QuadTo(p1, new(x1, t));
        LineTo(x0, t);
      }
    };
  };

  HeaderBackground(ShowClass show, SlideClass slide, title, footer, width, height) = Design(width, height, 0.89, 0.25, Style.HeaderLeftBar) {
    Frame {
      Width: 0.75 width;
      VAlignment: VAligns.Center;
      X: Extent.Margin.Left;
      Paragraph {
        TextHeight: 30 pts;
        TextColor: Colors.White;
        title;
      };
    };
  };

  FooterBackground(ShowClass show, SlideClass slide, title, footer, width, height) = Canvas {
    Height: height;
    Frame {
      VAlignment: VAligns.Center;
      X: Extent.Margin.Left;
      Width: Extent.Size.Width;
      Paragraph {
        TabStops: [(Extent.Size.Width) {Type: TabTypes.Right}];
        TextHeight: 16 pts;
        Span {
          TextColor: 75%;
          footer;
        };
        Tab;
        Span {
          TextColor: Style.HeaderBar1;
          show.PageIndex;
        }
      }
    }
  };

  override TitlePage(title, color) = Block {
    Paragraph {
      FixedFrame(0, 0, Extent.Page.Width, Extent.Page.Height) {
        Background: Style.TitlePageBackground;
      }
    };
    super.TitlePage(title, Style.TitlePageText);
  };
}
//======================================================================

class SlideClass {
  var Title,
      Footer;

  Constructor(title, footer=null) {
    Title  = title;
    Footer = footer;
  }

  virtual ShowBody(ShowClass show) = null;

  virtual AddSlidePage(ShowClass show, title, footer) = Block {
    show.Design.HeaderFooter(show, this, title, footer);
    ShowBody(show);
    show.PageIndex++;
  };

  virtual void CountSlidePage(ShowClass show) {
    show.PageTotal++;
  }
}

//======================================================================

class TitleSlideClass: SlideClass {
  ListClass<SlideItemClass> Items;
  var                       StartCount,
                            CompleteCount;

  Constructor(variable) {
    super.Constructor(variable.Title);
    Items         = new(32);
    StartCount    = 0;
    CompleteCount = 0;
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    show.Design.HeaderFooter(show, this, null, null);
    show.Design.TitlePage(title, Colors.Black);
    show.PageIndex++;
  };
}

//======================================================================

class IntroSlideClass: SlideClass {
  static NameHeight = 18 pts;
  static NameGap    = 10 pts;

  Constructor(title) {
    super.Constructor(title);
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    show.Design.HeaderFooter(show, this, null, null);
    ShowBody(show);
    show.PageIndex++;
  };

  override ShowBody(ShowClass show) = Block {
    var title = Paragraph {
      TextHeight: 32 pts;
      show.Title;
    };

    var gap = (Extent.Size.Height - GetLayoutSize(title, Extent.Size).Height - (NameGap+NameHeight)*(show.AuthorList.Length+1)) * 0.25;

    ParAlignment: ParAlignments.Center;
    title;


    TextHeight: NameHeight;

    foreach (var author in show.AuthorList) {
      Paragraph {
        SpaceBefore: each0 > 0 ? NameGap : gap;
        author.First;
        Space;
        author.Last;
      };

      if (show.AuthorList.Length == 1) {
        var department = author.FindFirstFact(LinkTypes.DepartmentLink);
        if (valid department) {
          department.Name;
          var org = department.FindFirstFact(LinkTypes.DepartmentLink);
          if (valid org)
            org.Name;
        }
        author.FindFirstFact(LinkTypes.WorkEmailLink);
      }
    }

    Paragraph {
      SpaceBefore: gap;
      TextFormat: "dd MMM yyyy";
      System.Now;
    };
  };
}
//======================================================================

class EndSlideClass: SlideClass {
  Constructor {
    super.Constructor(Lang.Questions);
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    ShowBody(show);
  };

  override ShowBody(ShowClass show) = Block {
    ParAlignment: ParAlignments.Center;
    Paragraph {
      PageBreakBefore: true;

      TextHeight: 50 pts;
      Title;
    };

    Paragraph {
      var h = 150 pts;
      SpaceBefore: (Extent.Size.Height - h) * 0.25;

      Figure {
        TextHeight: h;
        Fill: Style.SphericalFill(Colors.Green);
        Icons.help;
      }
    };
  };
}

//======================================================================

class BibSlideClass: SlideClass {
  Constructor {
    super.Constructor(Lang.References);
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    PageBreak;
    Bibliography {
      Title: Lang.References;
    };
    show.PageIndex++;
  };
}

//======================================================================

ShowItem(ShowClass show, variable) = Block {
  if (valid variable.?Title)
    show.Design.ShowTopicTitle(variable.?Title);

   var indent = show.Design.ItemIndent;
   Paragraph {
     LeftIndent: indent;

     var width = Extent.Size.Width - indent;
     var text  = variable.?Text;

     Frame {
       Width: width;
       var extent = SetExtentSize(new(width, Extent.Size.Height));

       if (valid text) {
         Style.ItemTextFormat;
         text;
       }
       else
         variable.?Body(show.Experiment);

       SetExtent(extent);
     };
   }
};

//======================================================================

class SingleSlideClass: SlideClass {
  var Variable;

  Constructor(variable, footer) {
    super.Constructor(variable.Title, footer);
    Variable = variable;
  }

  override ShowBody(ShowClass show) {
    return ShowItem(show, Variable);
  }
}

//======================================================================

class SlideItemClass {
  var Width,
      Height,
      Content,
      Numbered,
      Number;

   Constructor(ShowClass show, variable, number, width) {
     Width    = width;
     Number   = number;
     Numbered = variable.?Numbered ?? 0;

     var size = Extent.Size;
     var extent = SetExtentSize(new(width, size.Height));
     Content = Frame {
       Width: size.Width;
       ShowItem(show, variable);
     };
     Height = GetLayoutSize(Content, size).Height;
     SetExtent(extent);
   }
}

//======================================================================

class SlideGroupClass {
  ListClass<SlideItemClass> Items;
  SlideItemClass            Item;
  var                       Title;

  Constructor(ShowClass show, variable, width) {
    Items = new(8);
    Item  = new(show, variable, 0, width);
    Title = variable.?Title;
  }
}

//======================================================================

class FigureSlideClass: SlideClass {
  var Variable,
      Figure;

  Constructor(ShowClass show, variable, figure) {
    super.Constructor(variable.?Title ?? figure.?Title, Space);
    Variable = variable;
    Figure   = figure;
  }

  override AddSlidePage(ShowClass show, title, footer) = Block {
    show.Design.HeaderFooter(show, this, title, footer);

    var caption = null;
    if (exists Figure?.Caption)
      caption = Figure;

    var header = show.Design.GetFigureCaption(show.Experiment, Figure.?Title, caption);
    var height  = 0.0;
    if (valid header) {
      Paragraph {
        header;
      };
      height = GetLayoutSize(header, Extent.Size).Height;
    }

    Paragraph {
      ParAlignment: ParAlignments.Center;
      Frame {
        Height: height;

        var extent = SetExtentSize(new(Extent.Size.Width, Extent.Size.Height - height));
        Figure.Body(show.Experiment);
        SetExtent(extent);
      };
    };
    show.PageIndex++;
  };
}

//======================================================================

class TopicSlidesClass: SlideClass {
  ListClass<SlideGroupClass> Groups;
  var                        Main,
                             Start,
                             Topic,
                             Pause;

  Constructor(ShowClass show, TitleSlideClass main, variable, topic, pause) {
    super.Constructor(null);
    Topic       = topic;
    Main        = main;
    Pause       = pause;
    Start       = topic.Title;
    Groups      = new(32);

    var size  = Extent.Size;
    var width = size.Width - show.Design.TotalIndent;
    var group  = new SlideGroupClass(show, topic, width);
    Groups.Add(group);

    var height = 0.0;
    foreach (var iv in show.GetTopicItems(topic)) {
      var item = new SlideItemClass(show, iv, each1, width);
      main.Items.Add(item);

      if (group.Items.Length > 0 and height + item.Height >= size.Height) {
        group = new SlideGroupClass(show, topic, width);
        Groups.Add(group);
        height = 0.0;
      }
      group.Items.Add(item);
      height += item.Height + show.Design.ItemSpacer;
    }
  }

  ShowSet(ShowClass show, title, footer, SlideGroupClass group, count, number) = Block {
    var design = show.Design;
    design.HeaderFooter(show, this, title, footer);

    var size         = Extent.Size;
    var contentwidth = size.Width - design.TotalIndent;

    if (valid Start)
      show.Design.ShowTopicTitle(Start);

    Table {
      LeftIndent: design.ItemIndent;

      Columns: [design.BulletIndent, contentwidth];
      for (var i = 0; i < count; ++i) {
        Row {
          var gi = group.Items[i];
          Cell {
            Paragraph {
              Style.ItemTextFormat;
              if (gi.Numbered > 0) {
                HBox {
                  PaddingLR: 2 pts;
                  Background: 80%;
                  gi.Numbered;
                };
              }
              else if (gi.Number == number+count)
                design.BulletCurrent;
              else
                Pause ? design.BulletDone : design.Bullet;
            };
            Paragraph;
          };
          Cell {
            PaddingB: design.ItemSpacer;

            var extent = SetExtentSize(new(contentwidth, size.Height));
            gi.Content;
            SetExtent(extent);
          };
        }
      }
    };
  };

  override AddSlidePage(ShowClass show, title, footer) = Block {
    if (Pause) {
      var number = 0;
      foreach (var group in Groups) {
        foreach (var item in group.Items)
          ShowSet(show, group.Title, Main.Title, group, each1, number);
        number += group.Items.Length;
        show.PageIndex++;
      }
    }
    else {
      var group = Groups.FirstElement;
      ShowSet(show, group.Title, Main.Title, group, group.Items.Length, group.Items.Length);
      show.PageIndex++;
    }
  };

  override void CountSlidePage(ShowClass show) {
    if (Pause)
      show.PageTotal += Groups.Length;
    else
      show.PageTotal++;
  }
}
//======================================================================

class ShowClass: BaseDocumentClass {
  ListClass<SlideClass>      SlideDeck;
  PersonClass[]              AuthorList;
  ShowDesignClass            Design;
  ListClass<TitleSlideClass> Groups;
  var                        SlideData,
                             TypeFlags,
                             PageIndex,
                             PageTotal,
                             CompleteCount,
                             Bibliography;

  Constructor(ExperimentClass experiment, id, title, ShowDesignClass design, PersonClass[] authors, bibliography) {
    super.Constructor(experiment, id, title, DocumentTypes.SlideShow);
    Design       = design;
    Margin       = new(design.SideGap, design.HeaderHeight + design.HeaderGap, design.SideGap, design.FooterHeight);
    AuthorList   = authors;
    TypeFlags    = 0;
    Bibliography = bibliography;
    Groups       = new(32);
    SlideDeck    = new(128)
  }

  GetTopicItems(topic) {
    return topic.?Items ?? topic.?GetItems(this) ?? [];
  }

  AddSlide(SlideClass slide) = slide.AddSlidePage(this, slide.Title, slide.Footer);

  CanInclude(slide) {
    return TypeFlags == 0 or invalid slide.?Type or (Integer(slide.Type) & TypeFlags) != 0;
  }

  override GetContent = Block {
    var extent = SetExtentSize(new(Extent.Size.Width, Extent.Size.Height - Design.FooterGap));
    AddSlideGroup(SlideData);

    PageTotal = 1;
    foreach (var slide in SlideDeck)
      slide.CountSlidePage(this);

    PageIndex = 0;
    AddSlide(new IntroSlideClass(Title));
    foreach (var slide in SlideDeck)
      AddSlide(slide);
    AddSlide(new EndSlideClass);
    if (Bibliography)
      AddSlide(new BibSlideClass);

    SetExtent(extent);
  };

  void AddSlideGroup(slidesvar) {
    var types = Integer(TypeFlags);

    CompleteCount = 0;
    foreach (var slidevar in slidesvar) {
      if (CanInclude(slidevar)) {
        var first = CompleteCount;
        ++CompleteCount;

        var topics = slidevar.?Slide;
        if (valid topics) {
          var ts = new TitleSlideClass(slidevar);
          Groups.Add(ts);
          SlideDeck.Add(ts);

          foreach (var topic in topics) {
            if (CanInclude(topic)) {
              ++CompleteCount;

              SlideClass s;
              var figure = topic.?Figure;
              if (valid figure)
                s = new FigureSlideClass(this, topic, figure);
              else {
                var items = GetTopicItems(topic);
                if (items.Length > 0) {
                  var pause = topic.?Pause;
                  s = new TopicSlidesClass(this, ts, slidevar, topic, valid pause and pause);
                }
                else
                  s = new SingleSlideClass(topic, ts.Title);
              }
              SlideDeck.Add(s);
            }
          }
          ts.StartCount    = first;
          ts.CompleteCount = CompleteCount - first;
        }
        else {
          var figure = slidevar.?Figure;
          if (valid figure)
            SlideDeck.Add(new FigureSlideClass(this, slidevar, figure));
          else
            SlideDeck.Add(new SingleSlideClass(slidevar, slidevar.Title));
        }
      }
    }
  }
}
//======================================================================

