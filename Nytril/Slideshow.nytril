using Format, Units, Math, LinkTypes;

//======================================================================

class SlideDesignClass {
  Constructor {
  }

  virtual HeaderFooter(PresentationClass presentation, title, page) = Block {
    Paragraph {
      PageBreakBefore: true;
    };
  };
}

SlideDesigns.Plain = new SlideDesignClass;
SlideDesigns.Fancy = new FancyDesignClass;

//======================================================================

class FancyDesignClass: SlideDesignClass {
  Constructor {
    super.Constructor;
  }

  override HeaderFooter(PresentationClass presentation, title, page) = Block {
    Paragraph {
      PageBreakBefore: true;

      if (page > 0) {
        FixedFrame(0, 0, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader) {
          HeaderBackground(title, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader)
        };
        FixedFrame(0, DocMetrics.DocumentSize.Height - DocMetrics.SlideFooter, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter) {
          FooterBackground(title, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter, page);
        };
      }
    };
  };

  FixedFrame(x, y, width, height) = Frame {
    HRelative: HRelatives.Page;
    VRelative: VRelatives.Page;
    Wrapping: Wrappings.BehindText;
    X: x;
    Y: y;
    Width: width;
    Height: height;
  };

  Design(width, height, right, bar) = Canvas {
    Height: height;

    var x0 = 0;
    var y0 = 0;
    var t  = 0.10 height;
    var x1 = 0.80 width;
    var x2 = 0.90 width;
    var p1 = Point((x2 + x1)*0.5, height * (right ? 0.25 : 0.75));

    Figure {
      Fill: bar;
      FigurePath {
        Closed: true;
        LineTo(x0, t);
        LineTo(x1, t);
        QuadTo(p1, Point(x2, height));
        LineTo(x2, height);
        LineTo(x0, height);
      }
    };

    Figure {
      Fill: Style.BarLine;
      FigurePath {
        Closed: true;
        MoveTo(x0, y0);
        LineTo(x1, y0);
        QuadTo(p1, Point(x2, height-t));
        LineTo(width, height-t);
        LineTo(width, height);
        LineTo(x2, height);
        QuadTo(p1, Point(x1, t));
        LineTo(x0, t);
      }
    };
  };

  HeaderBackground(title, width, height) = Design(width, height, true, Style.HeaderLeftBar) {
    Frame {
      Width: 0.75 width;
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Paragraph {
        TextHeight: 30 pts;
        TextColor: Colors.White;
        title;
      };
    };
  };

  FooterBackground(title, width, height, page) = Design(width, height, false, Style.LeftBar) {
    Frame {
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Width: DocMetrics.PageContent.Width;
      Paragraph {
        TabStops: [(DocMetrics.PageContent.Width) {Type: TabTypes.Right}];
        TextHeight: 16 pts;
        Span {
          TextColor: 75%;
          title
        };
        Tab;
        Span {
          TextColor: Style.HeaderBar1;
          page;
        }
      }
    }
  };
}
//======================================================================

class SlideClass {
  var               Title,
                    Type;
  PresentationClass Presentation;

  Constructor(title, type, PresentationClass presentation) {
    Title        = title;
    Type         = type;
    Presentation = presentation;
  }

  virtual ShowBody = null;

  virtual AddSlidePage(page) = Block {
    Presentation.Design.HeaderFooter(Presentation, Title, page);
    ShowBody;
  };
}

//======================================================================

class IntroSlideClass: SlideClass {
  var Author;

  Constructor(title, author, PresentationClass presentation) {
    super.Constructor(title, AllTypes, presentation);
    Author = author;
  }

  override ShowBody = Block {
    var gap = (DocMetrics.SlideContent.Height - 2 inches) * 0.25;
    LeftIndent: 1 inch;

    Paragraph {
      TextHeight: 40 pts;
      SpaceBefore: gap;
      Title;
    };
    Paragraph {
      TextHeight: 18 pts;
      SpaceBefore: gap*2;
      Author.First;
      Space;
      Author.Last;
    };
    var department = Author.FindFirstFact(DepartmentLink);
    if (valid department) {
      Paragraph {
        TextHeight: 14 pts;
        department.Name;
      };
      var org = department.FindFirstFact(DepartmentLink);
      if (valid org) {
        Paragraph {
          TextHeight: 14 pts;
          org.Name;
        };
      }
    }
    Paragraph {
      TextHeight: 12 pts;
      var email = Author.FindFirstFact(WorkEmailLink);
      if (valid email)
        email.Value;
    };
  };
}
//======================================================================

class EndSlideClass: SlideClass {
  Constructor(PresentationClass presentation) {
    super.Constructor(Lang.Questions, AllTypes, presentation);
  }

  override ShowBody = Block {
    Paragraph {
      var h = 150 pts;
      ParAlignment: ParAlignments.Center;
      SpaceBefore: (DocMetrics.SlideContent.Height - h) * 0.5;
      Figure {
        TextHeight: h;
        Fill: (Style.LightColor..Style.DarkColor) {Vertical: true};
        "?";
      }
    };
  };
}

//======================================================================

class VarSlideClass: SlideClass {
  var Variable;

  Constructor(PresentationClass presentation, variable) {
    super.Constructor(variable.Title, variable.Type, presentation);
    Variable = variable;
  }

  override ShowBody = Block {
    Variable.Body(Presentation);
  };
}

//======================================================================

class SlideItemClass {
  var Height,
      Content,
      Number;

   Constructor(PresentationClass presentation, item, number) {
     Content = Frame {
       Style.MainStyle;
       Width: DocMetrics.SlideContent.Width - PresentationClass.ItemIndent;
       var text = item.?Text;
       if (exists text) {
         Paragraph {
           text;
         };
       }
       else
          item.Body(presentation);
     };
     Height = LayoutSize(Content).Height;
     Number = number;
   }
}

//======================================================================

class SlideGroupClass {
  var Items;

  Constructor {
    Items = new ListClass(8, SlideItemClass);
  }
}

//======================================================================

class VarItemsClass: VarSlideClass {
  static TitleHeight = 30 pts;

  var Intro,
      Groups;

  Constructor(PresentationClass presentation, variable) {
    super.Constructor(presentation, variable);
    Intro = Frame {
      Width: DocMetrics.SlideContent.Width - PresentationClass.ItemIndent;
      Paragraph {
        ParAlignment:ParAlignments.Center;
        SpaceBefore: DocMetrics.SlideContent.Height  * 0.5  - TitleHeight;
        Style.MainFamily;
        TextHeight: TitleHeight;
        Title;
      };
    };

    Groups = new ListClass(8, SlideGroupClass);

    var group = new SlideGroupClass;
    Groups.Add(group);

    var height = 0.0;
    foreach (var iv in variable.Items) {
      var item = new SlideItemClass(presentation, iv, EachOne);
      if (group.Items.Length > 0 && height + item.Height >= DocMetrics.SlideContent.Height) {
        group = new SlideGroupClass;
        Groups.Add(group);
        height = 0.0;
      }
      group.Items.Add(item);
      height += item.Height + PresentationClass.ItemSpacer;
    }
  }

  ShowSet(SlideGroupClass group, page, count, number) = Block {
    Presentation.Design.HeaderFooter(Presentation, Title, page);
    Table {
      Columns: [PresentationClass.ItemIndent, DocMetrics.SlideContent.Width - PresentationClass.ItemIndent];
      for (var i = 0; i < count; ++i) {
        Row {
          var item = group.Items[i];
          Cell {
            VAlign: VAligns.Center;
            Paragraph {
              if (item.Number != number+count) {
                Tex.blackcirc;
                TextColor: Colors.LightGray;
              }
              else
                Tex.circ;

            };
            Paragraph;
          };
          Cell {
            item.Content;
            PaddingB: PresentationClass.ItemSpacer;
          };
        }
      }
    };
  };

  override AddSlidePage(page) = Block {
    var number = 0;
    Presentation.Design.HeaderFooter(Presentation, Title, page++);
    Intro;

    foreach (var group in Groups) {
      for (var i = 1; i <= group.Items.Length; ++i)
        ShowSet(group, page, i, number);
      number += group.Items.Length;
    }
  };
}
//======================================================================

class PresentationClass: BaseViewClass {
  static ItemIndent = 0.25 inches;
  static ItemSpacer = 10 pts;

  SlideClass[]     SlideDeck;
  PersonClass      Author;
  SlideDesignClass Design;

  Constructor(ExperimentClass experiment, id, title, PersonClass author) {
    super.Constructor(experiment, id, title);
    DocumentType = ConfigurationClass.DocumentTypes.SlideShow;
    Author       = author;
    Design       = SlideDesigns.Fancy;
  }

  ShowFigureSlide(figure, format=null) = Block {
    figure.Caption(Experiment);
    Paragraph {
      ParAlignment: ParAlignments.Center;
      format;
      figure.Body(Experiment);
    }
  };

  override GetMainDocument = Style.MainDocument {
    var slides = [new IntroSlideClass(Title, Author, this)] +
                 SlideDeck +
                 [new EndSlideClass(this)];

    foreach (var slide in slides)
      slide.AddSlidePage(EachIndex);
  };

  ChooseSlideType(variable) {
    var items = variable.?Items;
    if (exists items)
      return new VarItemsClass(this, variable);
    else
      return new VarSlideClass(this, variable);
  }
}
//======================================================================

