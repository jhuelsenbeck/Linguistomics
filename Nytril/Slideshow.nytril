using Format, Units, Math, LinkTypes;

//======================================================================

class SlideDesignClass {
  Constructor {
  }

  virtual HeaderFooter(ShowClass presentation, title, page) = Block {
    Paragraph {
      PageBreakBefore: true;
    };
  };

  FixedFrame(x, y, width, height) = Frame {
    HRelative: HRelatives.Page;
    VRelative: VRelatives.Page;
    Wrapping: Wrappings.BehindText;
    X: x;
    Y: y;
    Width: width;
    Height: height;
  };
}

SlideDesigns.Plain = new SlideDesignClass;
SlideDesigns.Fancy = new FancyDesignClass;

//======================================================================

class ProgressDesignClass: SlideDesignClass {
  Constructor {
    super.Constructor;
  }

  override HeaderFooter(ShowClass presentation, title, page) = Block {
    Paragraph {
      PageBreakBefore: true;

      FixedFrame(0, 0, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader) {
        HeaderBackground(title, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader)
      };
      FixedFrame(0, DocMetrics.DocumentSize.Height - DocMetrics.SlideFooter, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter) {
        FooterBackground(title, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter, page);
      };
    };
  };

  HeaderBackground(title, width, height) = HBox {
    Frame {
      Paragraph {
        TextHeight: 30 pts;
        title;
      };
    };
  };

  FooterBackground(title, width, height, page) = Canvas {
    Width: width;
    Height: height;

    Frame {
//      VAlignment: VAligns.Right;
      TextHeight: 16 pts;
      Span {
        page;
      };
    }
  };
}
//======================================================================

class FancyDesignClass: SlideDesignClass {
  Constructor {
    super.Constructor;
  }

  override HeaderFooter(ShowClass presentation, title, page) = Block {
    Paragraph {
      PageBreakBefore: true;

      if (page > 0) {
        FixedFrame(0, 0, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader) {
          HeaderBackground(title, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader)
        };
        FixedFrame(0, DocMetrics.DocumentSize.Height - DocMetrics.SlideFooter, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter) {
          FooterBackground(title, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter, page);
        };
      }
    };
  };

  Design(width, height, right, bar) = Canvas {
    Height: height;

    var x0 = 0;
    var y0 = 0;
    var t  = 0.10 height;
    var x1 = 0.80 width;
    var x2 = 0.90 width;
    var p1 = Point((x2 + x1)*0.5, height * (right ? 0.25 : 0.75));

    Figure {
      Fill: bar;
      FigurePath {
        Closed: true;
        LineTo(x0, t);
        LineTo(x1, t);
        QuadTo(p1, Point(x2, height));
        LineTo(x2, height);
        LineTo(x0, height);
      }
    };

    Figure {
      Fill: Style.BarLine;
      FigurePath {
        Closed: true;
        MoveTo(x0, y0);
        LineTo(x1, y0);
        QuadTo(p1, Point(x2, height-t));
        LineTo(width, height-t);
        LineTo(width, height);
        LineTo(x2, height);
        QuadTo(p1, Point(x1, t));
        LineTo(x0, t);
      }
    };
  };

  HeaderBackground(title, width, height) = Design(width, height, true, Style.HeaderLeftBar) {
    Frame {
      Width: 0.75 width;
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Paragraph {
        TextHeight: 30 pts;
        TextColor: Colors.White;
        title;
      };
    };
  };

  FooterBackground(title, width, height, page) = Design(width, height, false, Style.LeftBar) {
    Frame {
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Width: DocMetrics.PageContent.Width;
      Paragraph {
        TabStops: [(DocMetrics.PageContent.Width) {Type: TabTypes.Right}];
        TextHeight: 16 pts;
        Span {
          TextColor: 75%;
          title
        };
        Tab;
        Span {
          TextColor: Style.HeaderBar1;
          page;
        }
      }
    }
  };
}
//======================================================================

class SlideClass {
  var              Title;
  ShowClass        Show;
  SlideDesignClass Design;

  Constructor(ShowClass show, title, SlideDesignClass design=null) {
    Title  = title;
    Show   = show;
    Design = design ?? show.Design;
  }

  virtual ShowBody = null;

  virtual AddSlidePage(page) = Block {
    Design.HeaderFooter(Show, Title, page);
    ShowBody;
  };
}

//======================================================================

class IntroSlideClass: SlideClass {
  PersonClass[] AuthorList;

  Constructor(ShowClass show, title, PersonClass[] authors) {
    super.Constructor(show, title, SlideDesigns.Plain);
    AuthorList = authors;
  }

  override ShowBody = Block {
    var gap = (DocMetrics.SlideContent.Height - 2 inches) * 0.25;

    Paragraph {
      ParAlignment: ParAlignments.Center;
      TextHeight: 32 pts;
      SpaceBefore: gap;
      Title;
    };

    foreach (var author in AuthorList) {
      Paragraph {
        ParAlignment: ParAlignments.Center;
        SpaceBefore: EachIndex > 0 ? 10 pts : gap;
        TextHeight: 18 pts;
        author.First;
        Space;
        author.Last;
      };
    }

    if (AuthorList.Length == 1) {
      var author     = AuthorList[0];
      var department = author.FindFirstFact(DepartmentLink);
      if (valid department) {
        Paragraph {
          TextHeight: 14 pts;
          department.Name;
        };
        var org = department.FindFirstFact(DepartmentLink);
        if (valid org) {
          Paragraph {
            TextHeight: 14 pts;
            org.Name;
          };
        }
      }
      Paragraph {
        TextHeight: 12 pts;
        var email = author.FindFirstFact(WorkEmailLink);
        if (valid email)
          email.Value;
      };
    }
  };
}
//======================================================================

class EndSlideClass: SlideClass {
  Constructor(ShowClass show) {
    super.Constructor(show, Lang.Questions);
  }

  override ShowBody = Block {
    Paragraph {
      var h = 150 pts;
      ParAlignment: ParAlignments.Center;
      SpaceBefore: (DocMetrics.SlideContent.Height - h) * 0.5;
      Figure {
        TextHeight: h;
        Fill: (Style.LightColor..Style.DarkColor) {Vertical: true};
        "?";
      }
    };
  };
}

//======================================================================

class SingleSlideClass: SlideClass {
  var Group;

  Constructor(ShowClass presentation, group) {
    super.Constructor(group.Title, presentation);
    Group = group;
  }

  override ShowBody = Block {
    Group.Body(Show);
  };
}

//======================================================================

class TitleSlideClass: SlideClass {
  var Variable;

  Constructor(ShowClass show, variable) {
    super.Constructor(show, variable.Title);
    Variable = variable;
  }

  override AddSlidePage(page) = Block {
    SlideDesigns.Plain.HeaderFooter(Show, Title, page++);
    Paragraph {
      ParAlignment:ParAlignments.Center;
      SpaceBefore: DocMetrics.SlideContent.Height  * 0.5  - Show.TitleHeight;
      Style.MainFamily;
      TextHeight: Show.TitleHeight;
      Variable.Title;
    };
  };
}

//======================================================================

class SlideItemClass {
  var Height,
      Content,
      Number;

   Constructor(ShowClass show, item, number) {
     Content = Frame {
       Style.MainStyle;
       Width: DocMetrics.SlideContent.Width - show.TotalIndent;
       var text = item.?Text;
       if (exists text) {
         Paragraph {
           TextHeight: show.ItemTextHeight;
           text;
         };
       }
       else
          item.Body(show);
     };
     Height = LayoutSize(Content).Height;
     Number = number;
   }
}

//======================================================================

class SlideGroupClass {
  var Items;

  Constructor {
    Items = new ListClass(8, SlideItemClass);
  }
}

//======================================================================

class TopicSlidesClass: SlideClass {
  var Category,
      Topic,
      Groups,
      Pause;

  Constructor(ShowClass show, category, topic, pause) {
    super.Constructor(show, category.Title);
    Topic = topic;
    Pause = pause;

    Groups = new ListClass(8, SlideGroupClass);

    var group = new SlideGroupClass;
    Groups.Add(group);

    var height = 0.0;
    foreach (var iv in topic.Items) {
      var item = new SlideItemClass(show, iv, EachOne);
      if (group.Items.Length > 0 && height + item.Height >= DocMetrics.SlideContent.Height) {
        group = new SlideGroupClass;
        Groups.Add(group);
        height = 0.0;
      }
      group.Items.Add(item);
      height += item.Height + show.ItemSpacer;
    }
  }

  ShowSet(SlideGroupClass group, page, count, number) = Block {
    Show.Design.HeaderFooter(Show, Topic.Title, page);

    Table {
      LeftIndent: 1 inch;

      Columns: [Show.BulletIndent, DocMetrics.SlideContent.Width - Show.TotalIndent];
      for (var i = 0; i < count; ++i) {
        Row {
          var item = group.Items[i];
          Cell {
            Paragraph {
              TextHeight: Show.ItemTextHeight;
              if (item.Number == number+count)
                Show.BulletCurrent;
              else
                Show.BulletDone;
            };
            Paragraph;
          };
          Cell {
            item.Content;
            PaddingB: Show.ItemSpacer;
          };
        }
      }
    };
  };

  override AddSlidePage(page) = Block {
    var number = 0;
    foreach (var group in Groups) {
      for (var i = 1; i <= group.Items.Length; ++i)
        ShowSet(group, page, i, number);
      number += group.Items.Length;
    }
  };
}
//======================================================================

class ShowClass: BaseViewClass {
  SlideClass[]     SlideDeck;
  PersonClass[]    AuthorList;
  SlideDesignClass Design;
  var              ItemTextHeight,
                   BulletIndent,
                   BulletSize,
                   BulletDone,
                   BulletCurrent,
                   ItemsIndent,
                   TotalIndent,
                   ItemSpacer,
                   TitleHeight,
                   BodyHeight;



  Constructor(ExperimentClass experiment, id, title, PersonClass[] authors) {
    super.Constructor(experiment, id, title);
    DocumentType   = ConfigurationClass.DocumentTypes.SlideShow;
    AuthorList     = authors;
    Design         = SlideDesigns.Fancy;
    ItemTextHeight = 20 pts;
    BulletIndent   = 0.25 inches;
    BulletDone     = Tex.blacksquare;
    BulletCurrent  = Tex.blacktriangleright;
    ItemsIndent    = 1 inch;
    TotalIndent    = ItemsIndent + BulletIndent;
    ItemSpacer     = 10 pts;
    TitleHeight    = 30 pts;
    BodyHeight     = 18 pts;
  }

  ShowFigureSlide(figure, format=null) = Block {
    figure.Caption(Experiment);
    Paragraph {
      ParAlignment: ParAlignments.Center;
      format;
      figure.Body(Experiment);
    }
  };

  override GetMainDocument = Document {
    RefStyle: Style.ReferenceStyle;
    Size: DocMetrics.DocumentSize;
    Margin: DocMetrics.PageMargin;
    Style.MainStyle;


    var slides = [new IntroSlideClass(this, Title, AuthorList)] +
                 SlideDeck +
                 [new EndSlideClass(this)];

    foreach (var slide in slides)
      slide.AddSlidePage(EachIndex);
  };

  AddSlideGroup(slidesvar) {
    var list = new ListClass(128);
    foreach (var slidevar in slidesvar) {
      var topics = slidevar.?Topics;
      if (exists topics) {
        list.Add(new TitleSlideClass(this, slidevar));

        foreach (var topic in topics) {
          var pause = topic.?Pause;
          list.Add(new TopicSlidesClass(this, slidevar, topic, exists pause and pause));
        }
      }
      else
        return list.Add(new SingleSlideClass(this, slidevar));
    }
    return list.Values;
  }
}
//======================================================================

