using Format, Units, IO;

include "Lang";
include "Languages";
include "LanguageTree";
include "Library";
include "DocumentStyles";
include "Graphics";
include "Tables";
include "IPA";
include "Segments";
include "Rules";
include "Experiments";
include "Nexus";
include "Config";
include "Data Validation";

// Choose between one of these 3 sets
//include "LanguagePhonetic";
include "LanguageSet";
//include "LanguageTest";

//======================================================================

readonly MainStyle = new APAContentClass(new APAStyleClass);

readonly namespace Main.Documents {
  DiagnosticsViewClass   Diagnostic    = new(DataSet);
  ConfigurationViewClass Configuration = new(DataSet, DataSet.TreeSets[0]);
  WordViewClass          Words         = new(DataSet, DataSet.Rule.Partitions);
  CreateViewClass        CreateFiles   = new(DataSet);
}

//======================================================================

class CreateExperimentClass: ActionClass {
  var DataSetClass Data;

  Constructor(DataSetClass data) {
    super.Constructor(Actions.Execute, null, "Create experiment files");
    Data = data;
  }

  override string ConfirmExecuteMessage {
    return "Overwrite configuration files for experiment \"{0}\"?"(DataSet.Name);
  }

  override EventResponseClass Execute {
    var data = DataSet;
    var root = Info.ExperimentRoot data.RootFolder;

    if (not FolderExists(root))
      CreateFolder(root);
    (each data.TreeSets).InitFolders(data);

    if (Write(new WordViewClass(data, data.Rule.Partitions).GetDocument, Info.ExperimentRoot data.WordFile))
      return EventResponses.MessageTip("Files Written");
    return EventResponses.MessageTip("Error creating files");
  }
}

//======================================================================

class CreateViewClass: DocumentClass {
  var DataSetClass Data;

  Constructor(DataSetClass data) {
    super.Constructor(#609a7aaf-af34-4de5-8406-bc0e054dde89#, "Create Experiment Files");
    Data = data;
  }

  override GetDocument = Document {
    Paragraph {
      TextHeight: 120%;
      Underline;
      "Experimental parameters";
    };
    ShowField("Unique Segments", Data.UniqueSegments.Length);
    ShowField("Output Path", Info.ExperimentRoot Data.RootFolder);
    Paragraph;

    var action = new CreateExperimentClass(Data);
    ButtonControl  (null, null, new EdgeClass(2, 3, Colors.Green)) {
      BorderRadius: 5;
      action.GetName;
      Action: action;
    };
  };

  ShowField(name, value) = Paragraph(null, [1.5 inch]) {
    Span {
      Bold
      name;
    };
    Tab;
    value;
  };
}
//======================================================================

class SegmentTransitionClass: ContentClass {
  Constructor {
    super.Constructor("Prior Segment Transition Counts");
  }

  override GetCaption(ContentStyleClass style) = Span {
    "The number of times that a segment on the left vertical bar differs from any other other segment at the same position. The rates of transitions to and from gaps are ignored. Partitions are ordered by frequency of occurrance. Transition counts are shown in a scaled red box. The chart has diagonal symmetry.";
  };

  override GetBody(ContentStyleClass style) = new PriorCountClass(DataSet).PartitionBox;
}

//======================================================================

