using Format, Units, IO;

include "Lang";
include "Languages";
include "LanguageTree";
include "Library";
include "DocumentStyles";
include "Graphics";
include "Tables";
include "IPA";
include "Segments";
include "Rules";
include "Experiments";
include "Nexus";
include "Config";
include "Data Validation";

// Choose between one of these 3 sets
//include "LanguagePhonetic";
include "LanguageSet";
//include "LanguageTest";

//======================================================================

readonly namespace Main.Documents {
  DiagnosticsViewClass   Diagnostic    = new(new IEEEStyleClass(), DataSet);
  ConfigurationViewClass Configuration = new(DataSet, DataSet.TreeSets[0]);
  WordViewClass          Words         = new(DataSet, DataSet.Rule.Partitions);
  CreateViewClass        CreateFiles   = new(DataSet);
}

//======================================================================

class CreateExperimentClass: ActionClass {
  var DataSetClass Data;

  Constructor(DataSetClass data) {
    super.Constructor(Actions.Execute, null);
    Data = data;
  }

  override string ConfirmExecuteMessage {
    return "Overwrite configuration files for experiment \"{0}\"?"(DataSet.Name);
  }

  override EventResponseClass Execute {
    var data = DataSet;
    var root = Info.ExperimentRoot data.RootFolder;

    if (not FolderExists(root))
      CreateFolder(root);
    (each data.TreeSets).InitFolders(data);

    if (Write(new WordViewClass(data, data.Rule.Partitions).GetDocument, Info.ExperimentRoot data.WordFile))
      return EventResponses.MessageTip("Files Written");
    return EventResponses.MessageTip("Error creating files");
  }
}

//======================================================================

class CreateViewClass: DocumentClass {
  var DataSetClass Data;

  Constructor(DataSetClass data) {
    super.Constructor(#609a7aaf-af34-4de5-8406-bc0e054dde89#, "Create Experiment Files");
    Data = data;
  }

  override GetDocument = Document {
    Paragraph {
      TextHeight: 120%;
      Underline;
      "Experimental parameters";
    };
    ShowField("Unique Segments", Data.UniqueSegments.Length);
    ShowField("Output Path", Info.ExperimentRoot Data.RootFolder);
    Paragraph;

    var action = new CreateExperimentClass(Data);
    ButtonControl(null, null, new EdgeClass(1, 10)) {
      Background: new RadialGradientClass(10%, 20%, 10%, 20%, 90%, 50%, [new(0, Colors.White), new(100%, Colors.LightGreen)]);
      BorderRadius: 4;
      TextHeight: 12 pts;
      Bold;
      "Create experiment files";
      Action: action;
    };
  };

  ShowField(name, value) = Paragraph(null, [1.5 inch]) {
    Span {
      Bold
      name;
    };
    Tab;
    value;
  };
}

//======================================================================

