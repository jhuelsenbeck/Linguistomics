using Format, Units, Math, IO;

//======================================================================

with Slides.Questions {
  Title = Lang.Questions;

  Body = Paragraph {
    ParAlignment: ParAlignments.Center;
    SpaceBefore: 1 inch;
    Figure {
      TextHeight: 150 pts;
      Fill: (Style.LightColor..Style.DarkColor) {Vertical: true};
      "?";
    }
  };
}

with Slides.Introduction {
  Title = Content.Introduction.Title;
  Body  = Content.Introduction.Body;
}

with Slides.ExampleTree {
  Title = "Example Tree";
  Body  = Style.SlideFigure(Figures.ExampleTree);
}

with Slides.Alignment {
  Title = "Alignment";
  Body  = Style.SlideFigure(Figures.Alignment, 5 pts);
}

with Slides.ShowResults {
  Title = "Results";
  Body  = Style.ReadTree(Lang.MCC, Results.OutFolder Results.GammaMCC);
}

with Slides.LanguagesUsed {
  Title = Lang.Languages;
  Body  = Results.ShowLanguages;
}

with Slides.ConceptsUsed {
  Title = Lang.ConceptsUsed;
  Body  = AllWords.ShowTable;
}

with Slides.CharacterRules {
  Title = Lang.CharacterRules;
  Body  = Results.CharacterRule.ShowDescription;
}

with Slides.PartitionRules {
  Title = Lang.PartitionRules;
  Body  = Results.PartitionRule.ShowPartitions;
}
//======================================================================

class PresentationViewClass: BaseViewClass {
  var SlideList,
      Author;

  Constructor(title, key, author) {
    super.Constructor(title, key, ConfigurationClass.DocumentTypes.SlideShow);
    Author    = author;
    SlideList = new ListClass(64);
  }

  void AddSlide(slide) {
    SlideList.Add(slide);
  }

  override GetDocument = Style.MainDocument {
    Block {
      LeftIndent: 1 inch;

      Paragraph {
        TextHeight: 40 pts;
        SpaceBefore: 1.5 inches;
        Info.Title;
      };
      Paragraph {
        TextHeight: 18 pts;
        SpaceBefore: 1.5 inches;
        Author.FirstName;
        Space;
        Author.LastName;
      };
      Paragraph {
        Seperator: ", ";
        TextHeight: 12 pts;
        foreach (var email in Author.FindFacts(LinkTypes.WorkEmail))
          email.Value;
      };
    };

    foreach (var slide in SlideList)
      AddSlideBlock(slide, EachIndex+1);
  };
}
//======================================================================

class JohnPresentationClass: PresentationViewClass {
  Constructor {
    super.Constructor("John's Presentation", "pre-john", People.JPHuelsenbeck);
    AddSlide(Slides.Introduction);
    AddSlide(Slides.LanguagesUsed);
    AddSlide(Slides.ExampleTree);
    AddSlide(Slides.Alignment);
    AddSlide(Slides.CharacterRules);
    AddSlide(Slides.PartitionRules);
    AddSlide(Slides.ShowResults);
    AddSlide(Slides.Questions);
  }
}
//======================================================================

class DavidPresentationClass: PresentationViewClass {
  Constructor {
    super.Constructor("David's Presentation", "pre-david", People.DMGoldstein);
    AddSlide(Slides.Introduction);
    AddSlide(Slides.LanguagesUsed);
//    AddSlide(Slides.ExampleTree);
    AddSlide(Slides.ConceptsUsed);
    AddSlide(Slides.CharacterRules);
    AddSlide(Slides.PartitionRules);
    AddSlide(Slides.ShowResults);
    AddSlide(Slides.Questions);
  }
}
//======================================================================

