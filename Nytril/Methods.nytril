using Format, Units, Math, IO, Defs, Equations, WorldLanguages, References, PaperStyle;

//======================================================================

SubLabel(label) = Span {
  SansSerif;
  TextHeight: 20 pts;
  "("; label; ")";
};

//======================================================================


readonly PartitionAssignmentsClass Figures.PartitionAssignments = new(MainResults.Rule);

class PartitionAssignmentsClass: ContentClass {
  var RuleClass Rule;

  Constructor(RuleClass rule) {
    super.Constructor(Lang.PartitionRules);
    Rule = rule;
  }

  override GetCaption(ContentStyleClass style) = Rule.GetCaption(style);

  override GetBody(ContentStyleClass style) = Rule.ShowPartitions;
}

//======================================================================

readonly ExperimentalRunsClass Figures.ExperimentalRuns = new;

class ExperimentalRunsClass: ContentClass {
  Constructor {
    super.Constructor("Experimental Runs");
  }

  ShowTrees(ContentStyleClass style, ModelClass model) = Block {
    var anytree = false;
    foreach (var r in model.Run) {
      if (r.ResultTree is not null) {
        anytree = true;
        break;
      }
    }

    if (anytree) {
      style.FirstPar {
        Lang.Model;
        ColonSpace;
        model.Name;
      };

      foreach (var r in model.Run) {
        if (r.ResultTree is not null)
          PaperStyle.ShowTree(style, r.ResultTree, 100%, "Run {0}"(each1));
      }
    }
  };

  override GetCaption(ContentStyleClass style) = Span {
    Lang.Experiment;
    Space;
    each1;
    Space;
    style.DQuote {MainResults.Data.Name};
  };

  override GetBody(ContentStyleClass style) = Block {
    var data = MainResults.Data;

    Span {
      foreach (var tree in data.PriorTrees)
        PaperStyle.ShowTree(style, tree, 30%, Lang.Tree+each1);
    };

    foreach (var treeset in data.TreeSets) {
      style.Heading3 {
        Lang.Tree;
        each1;
      };
      ShowTrees(style, each treeset.Models);
    }
  };

}

//======================================================================

readonly ModelTrees Figures.ModelTreesUsed = new;

class ModelTrees: ContentClass {
  Constructor {
    super.Constructor("Model trees used in all analyses");
  }

  ShowTrees(ContentStyleClass style, ModelClass model) = Block {
    var anytree = false;
    foreach (var r in model.Run) {
      if (r.ResultTree is not null) {
        anytree = true;
        break;
      }
    }

    if (anytree) {
      style.FirstPar {
        Lang.Model;
        ColonSpace;
        model.Name;
      };

      foreach (var r in model.Run) {
        if (r.ResultTree is not null)
          PaperStyle.ShowTree(style, r.ResultTree, 100%, "Run {0}"(each1));
      }
    }
  };

  override GetCaption(ContentStyleClass style) = Span {
    //Lang.Experiment;
    //Space;
    //each1;
    //Space;
    //style.DQuote {MainResults.Data.Name};
  };

  override GetBody(ContentStyleClass style) = Block {
    var data = MainResults.Data;

    Span {
      foreach (var tree in data.PriorTrees)
        PaperStyle.ShowTree(style, tree, 30%, Lang.Tree+each1);
    };
  };

}

//======================================================================

readonly TransitionRatesClass Figures.TransitionRates = new;

class TransitionRatesClass: ContentClass {
  Constructor {
    super.Constructor("Transition Rates between Partitions");
  }

  override GetCaption(ContentStyleClass style) = Span {
    "The area of the circles is proportional to the estimated equilibrium frequencies. ";
    "The width of the lines is proportional to the estimated rates. ";
  };

  override GetBody(ContentStyleClass style) = new CalcRatesClass(MainResults).PartitionDiagram(style);
}

//======================================================================

readonly AlignmentChartClass AlignmentResults = new(MainResults);

readonly AlignmentsClass Figures.Alignments = new;

class AlignmentsClass: ContentClass {
  Constructor {
    super.Constructor("Alignments");
  }

  override GetCaption(ContentStyleClass style) = Span {
    MainResults.AlignmentCutoff * 100.0;
    "% credible set of alignments";
  };

  override GetBody(ContentStyleClass style) = Block {
    AlignmentResults.ShowChart(new(ExtentWidth, ExtentHeight - 1 inch));
  };
}

//======================================================================

class AllAlignmentsClass: ContentClass {
  Constructor {
    super.Constructor("All Alignments");
  }

  override GetCaption(ContentStyleClass style) = Span {
    MainResults.AlignmentCutoff * 100.0;
    "% credible set of alignments";
  };

  override GetBody(ContentStyleClass style) = AlignmentResults.ShowAll;
}

//======================================================================

class AlignmentExamplesClass: ContentClass {
  var CognateIdClass[] Examples;

  Constructor(name, CognateIdClass[] examples) {
    super.Constructor(name);
    Examples = examples;
  }

  override GetCaption(ContentStyleClass style) = "Credible sets for cognate alignments";

  override GetBody(ContentStyleClass style) = Block {
    AlignmentResults.ShowSet(MainResults.Data, Examples, true);
  };
}

readonly AlignmentExamplesClass Figures.AlignmentExamples = new(
  "Alignment Examples",
  [new("Moon", null, 5), new("One", null, 8), new("Tooth", null, 3)]
);

//======================================================================

class SingleAlignmentClass: AlignmentExamplesClass {
  Constructor(count, name) {
    super.Constructor("Credible sets for alignments of the cognate '{0}'"(name), [new(name, null, count)]);
  }

  override GetCaption(ContentStyleClass style) = Span {
    "Segments are colored according to natural class. Dashes denote gaps where there is no homologous segment for the alignment position. ";
    "The alignments are ordered from highest posterior probability (top-left alignment) to lowest posterior probability (bottom-right alignment) in row order. ";
  };

  override GetBody(ContentStyleClass style) = Block {
    AlignmentResults.ShowSet(MainResults.Data, Examples, false);
  };
}

readonly SingleAlignmentClass Figures.AlignmentExample1 = new(17, "Flower");

//======================================================================

class AlignmentCompareClass: ContentClass {
  var Cognate;

  Constructor() {
    super.Constructor("Alignment comparison");
    Cognate = "Sky";
  }

  override GetCaption(ContentStyleClass style) = Span {
    "Ten alignments of highest posterior probability of the cognate for the concept ‘sky’ under the natural-class model (b) and under the simple model isomorphic to the Jukes-Cantor model (a, the ‘Poisson’ model, 39). ";
    "The ten alignments under the Poisson model account for 0.098 ";
    "posterior probability whereas the ten alignments under the natural-class model account for a cumulative posterior probability of 0.56.";
  };

  override GetBody(ContentStyleClass style) = Block {
    VBox {
      SubLabel("a");
      new SingleAlignmentClass(7, Cognate).GetBody(style);
      SubLabel("b");
      new SingleAlignmentClass(7, Cognate).GetBody(style);
    };
  };
}

readonly AlignmentCompareClass Figures.AlignmentExample2 = new;

//======================================================================

readonly ExchangeabilityTableClass Figures.ExchangeabilityTable = new;


class ExchangeabilityTableClass: ContentClass {
  Constructor {
    super.Constructor(Lang.Exchangeability);
  }

  override GetBody(ContentStyleClass style) = Block {
    var th = ExtentWidth * 0.015;
    PaperStyle.SansSerif;
    TextHeight: th;

    var stats      = MainResults.TransitionStats;
    var count      = stats.Rows;
    var partitions = MainResults.Rule.Partitions;
    var dy         = 2 pts;
    var left       = 1 inch;
    var w          = (ExtentWidth - 1 inch) / count;

    Table(PadR(4 pts), null, [left] + [w] * count) {
      HAlign: HAligns.Center;
      TextDigits: 3;

      Row {
        Empty;

        foreach (var p in partitions) {
          Frame(w) {
            ParAlignment: ParAlignments.Center;
            TextHeight: th*0.8;
            TextColor: p.Color;
            p.Name.Split(Space);
          };
        }
      };

      for (int i = 0; i < count; ++i) {
        Row {
          VAlign: VAligns.Center;
          Frame(w) {
            ParAlignment: ParAlignments.Right;
            var p = partitions[i];
            TextColor: p.Color;
            p;
          };

          for (int j = 0; j < count; ++j) {
            var c = stats[i, j];
            if (c is valid)
              c.ShowBox {Margin: PadT(dy)};
            else
              "-";
          }
        };
      }
    };
  };
}

//======================================================================

readonly NaturalClassRateChartClass Figures.RateChart = new;

class NaturalClassRateChartClass: ContentClass {
  Constructor {
    super.Constructor("Natural Class Rates");
  }

  private ShowRight(number) = HBox {
    Space*2;
    TextHeight: 80%;
    TextColor: Colors.Gray;
    number;
  };

  override GetCaption(ContentStyleClass style) = Span {
    "The average rates of change between and within the ten segment groups of the natural class model. ";
    "Circle area is proportional to the rate of change between natural class groups ("; Defs.qij; "). ";
    "Shaded area represent the 95% credible interval. ";
  };

  override GetBody(ContentStyleClass style) = Block {
    PaperStyle.SansSerif;
    TextHeight: ExtentWidth * 0.015;

    var partitions = MainResults.Rule.Partitions;
    var stats      = MainResults.NCQRates;
    var bx         = 20 pts;
    var tx         = 60 pts + bx;
    var size       = Math.Min(ExtentWidth, ExtentHeight);
    var dy         = size / (partitions.Length + 1);
    var d          = Math.Min(dy, (size  - tx) / partitions.Length);

    var max = 0.0;
    foreach (var pi in partitions) {
      foreach (var pj in partitions) {
        var c = stats[pi.Index, pj.Index];
        if (c is valid and c.Upper > max)
          max = c.Upper;
      }
    }

    HBox {
     TextHeight: 10 pts;
      VBox {
        HAlign: HAligns.Right;
        VAlignment: VAligns.Bottom;

        foreach (var p in partitions) {
          HBox(null, d, PadR(2)) {
            VAlign: VAligns.Center;
            TextColor: p.Color;
            p.Name;
          }
        }
      };

      VBox {
        HAlign: HAligns.Left;
        Canvas {
          HAlignment: HAligns.Right;
          VAlign: VAligns.Bottom;
          foreach (var p in partitions) {
            HBox(null, d, PadR(0 pts)) {
              X: d * (each0 + 0.3);
              TextColor: p.Color;
              Transform: TransformClass.Rotate(-90 degrees);
              TransformFit: true;
              p.Name;
            };
          }
        };

        VBox {
          var factor = 1.0 / max;

          foreach (var pi in partitions) {
            HBox {
              foreach (var pj in partitions) {
                var c = stats[pi.Index, pj.Index];
                Canvas(d, d) {
                  if (c is valid) {

                    Tip: c;
                    var center = new PointClass(d * 0.5);
                    var x      = d  * Math.Sqrt(c.Upper * factor);
                    //Shape(pj.Color, null) {
                    //  ClosedPath(0) {
                    //    LineTo(d,0);
                    //    LineTo(d,d);
                    //  }
                    //};
                    //
                    //Shape(pi.Color, null) {
                    //  ClosedPath(0) {
                    //    LineTo(d,d);
                    //    LineTo(0,d);
                    //  }
                    //};

                    Shape(90%) {
                      EllipsePath(new(new(center.X - x*0.5 , center.Y - x*0.5), x));
                      x = d * Math.Sqrt(c.Lower * factor);
                      EllipsePath(new(new(center.X - x*0.5 , center.Y - x*0.5), x));
                    };

                    Shape(null, 1) {
                      x = d * Math.Sqrt(c.Mean * factor);
                      EllipsePath(new(new(center.X - x*0.5 , center.Y - x*0.5), x));
                    };
                  }
                };
              }
            };
          }
        }
      };
    };
  };
}

//======================================================================

readonly ExchangeabilityChartClass Figures.ExchangeabilityChart = new;

class ExchangeabilityChartClass: ContentClass {
  Constructor {
    super.Constructor(Lang.Exchangeability);
  }

  private ShowRight(number) = HBox {
    Space*2;
    TextHeight: 80%;
    TextColor: Colors.Gray;
    number;
  };

  override GetBody(ContentStyleClass style) = Block {
    style.SansSerif;
    TextHeight: ExtentWidth * 0.015;

    var partitions = MainResults.Rule.Partitions;
    var stats      = MainResults.TransitionStats;
    var count      = stats.Rows;
    var bx         = 20 pts;
    var tx         = 60 pts + bx;
    var size       = Math.Min(ExtentWidth, ExtentHeight);
    var dy         = size / (partitions.Length + 1);
    var d          = Math.Min(dy, (size  - tx) / partitions.Length);

    var max = 0.0;
    for (int i = 0; i < count; ++i) {
      for (int j = 0; j < count; ++j) {
        var c = stats[i, j];
        if (c is valid and c.Upper > max)
          max = c.Upper;
      }
    }

    var fm = 1.0 / max;
    var fc = d * fm;

    HBox {
      VAlign: VAligns.Top;
      VBox {
        Canvas(bx, bx);

        foreach (var p in partitions) {
          HBox(null, d) {
            Separation: 10 pts;
            VAlign: VAligns.Center;
            HAlignment: HAligns.Right;
            Frame {
              p;
            };
            Canvas(bx, d) {
              Background: p.Color;
            };
          }
        }
      };

      VBox {
        HAlign: HAligns.Left;
        HBox {
          foreach (var p in partitions) {
            Canvas(d, bx) {
              Background: p.Color;
              VAlign: VAligns.Center;
              HAlign: HAligns.Center;
              Frame(d) {
                TextColor: p.Color.TextCompliment;
                ParAlignment: ParAlignments.Center;
                TextHeight: 70%;
                p.Name;
              };
            };
          }
        };

        VBox {
          for (int i = 0; i < count; ++i) {
            HBox {
              for (int j = 0; j < count; ++j) {
                var c = stats[i, j];
                Canvas(d, d) {
                  if (c is valid) {
                    Tip: c;
                    var center = new PointClass(d * 0.5);
                    var x      = fc * c.Upper;
                    Shape(95%) {
                      EllipsePath(new(new(center.X - x*0.5 , center.Y - x*0.5), x));
                      x = fc * c.Lower;
                      EllipsePath(new(new(center.X - x*0.5 , center.Y - x*0.5), x));
                    };

                    Shape(null, 1) {
                      x = fc * c.Mean;
                      EllipsePath(new(new(center.X - x*0.5 , center.Y - x*0.5), x));
                    };
                  }
                };
              }
            };
          }
        }
      };
    };
  };
}

//======================================================================

readonly EquilibriumFrequencyChartClass Figures.EquilibriumCharts = new;

class EquilibriumFrequencyChartClass: ContentClass {
  Constructor {
    super.Constructor("The equilibrium frequencies (π) of the segment groups.");
  }

  override GetBody(ContentStyleClass style) = Chart(50%, 3.5 inches) {
    Type: ChartTypes.Bar;
    style.SansSerif;
    TextHeight: 12 pts;

    ValueLabel: Span {
      TextHeight: 20 pts;
      Defs.EquilibriumDistribution;
    };

    var partitions = MainResults.Data.Rule.Partitions.Reverse;
    var stats      = MainResults.NCQFreqs;

    XAxis: ChartAxis(null, null, PadR(8)) {
      foreach (var p in partitions) {
        Span {
          Tip: p;
          TextColor: p.Color;
          p.Name;
        }
      }
    };

    ChartSeries {
      foreach (var p in partitions) {
        var c = stats[p.Index];
        new DataPointClass(each0, c.Mean) {
          ErrorLo: c.Mean - c.Lower;
          ErrorHi: c.Upper - c.Mean;
          Reference: c;
          Fill: p.Color;
        }
      }
    };
  };
}

//======================================================================

//adonly EquilibriumFrequencyChartClass Figures.EquilibriumCharts = new;
//
//ass EquilibriumFrequencyChartClass: ContentClass {
//Constructor {
//  super.Constructor("The equilibrium frequencies (π) of the segment groups.");
//}
//
//override GetBody(ContentStyleClass style) = Chart(50%, 3.5 inches) {
//  Type: ChartTypes.Bar;
//  style.SansSerif;
//  TextHeight: 12 pts;
//
//  ValueLabel: Span {
//    TextHeight: 20 pts;
//    Defs.EquilibriumDistribution;
//  };
//
//  var partitions = MainResults.Data.Rule.Partitions.Reverse;
//  var stats      = MainResults.NCQFreqs;
//
//  XAxis: ChartAxis(null, null, PadR(8)) {
//    foreach (var p in partitions) {
//      Span {
//        Tip: p;
//        TextColor: p.Color;
//        p.Name;
//      }
//    }
//  };
//
//  ChartSeries {
//    foreach (var p in partitions) {
//      var c = stats[p.Index];
//      new DataPointClass(each0, c.Mean) {
//        ErrorLo: c.Mean - c.Lower;
//        ErrorHi: c.Upper - c.Mean;
//        Reference: c;
//        Fill: p.Color;
//      }
//    }
//  };
//};
//
//======================================================================

readonly GappinessChartClass Figures.GappinessChart = new;

class GappinessChartClass: ContentClass {
  Constructor {
    super.Constructor("Gap Frequency Spectrum");
  }

  override GetBody(ContentStyleClass style) = Block {
    string[] names = ["first", "middle", "last"];

    SansSerif;
    var gaps = MainResults.GapSpectrum;

    VBox {
      foreach (var gap in gaps) {
        Chart(3.5 inches, 1.5 inches) {
          Type: ChartTypes.Column;
          ValueLabel: HBox(null, null, PadB(8)) {
            "{0} ({1} times)"(names[each0], gap[0]);
            Transform: TransformClass.Rotate(-90 degrees);
            TransformFit: true;
          };
          if (each1 == 3) {
            XLabel: HBox (100%) {
              Justify: Justifiers.SpaceAround;
              "(beginning)"; "Position"; "(end)";
            };
          }

          ValueAxis: ChartAxis;

          XAxis: ChartAxis {
            each (1..<gap.Length step 1) as string;
          };

          ChartSeries {
            foreach (var value in gap[1..])
              new DataPointClass(each0, value * 0.01);
          };
        }
      }
    };
  };
}

//======================================================================

readonly FractionGapsChartClass Figures.FractionGapsChart  = new;

class FractionGapsChartClass: ContentClass {
  Constructor {
    super.Constructor("Deletions at the right edge");
  }

  override GetBody(ContentStyleClass style) = Block {
    PaperStyle.SansSerif;
    "To be completed";
  };
}

//======================================================================

const int TopCount = 15;

//======================================================================

readonly QRatesMatrixClass Figures.QRatesMatrix = new;

class QRatesMatrixClass: ContentClass {
  Constructor {
    super.Constructor("Rate Matrix " Defs.RateMatrix);
  }

  override GetBody(ContentStyleClass style) = MainResults.QRates.PartitionBox(style, ExtentSize);
}

//======================================================================

readonly QRatesDiagonalClass Figures.QRatesDiagonal = new;

class QRatesDiagonalClass: ContentClass {
  Constructor {
    super.Constructor("The rate of change when in a particular segmental state (or " Defs.neg_qii ")");
  }

  override GetBody(ContentStyleClass style) = new DiagonalClass(MainResults, MainResults.QRates).Display(style);
}

//======================================================================

readonly TreeContentClass Figures.PriorTree = new("Tree topology", 33%, MainResults.Data.PriorTrees.FirstElement);

//======================================================================

readonly LanguageDistributionClass  Figures.LanguageDistribution = new;

class LanguageDistributionClass: ContentClass {
  Constructor {
    super.Constructor("The geographic distribution of the Romance languages examined in this study");
  }

  override GetBody(ContentStyleClass style) = Paragraph {
    FitBox(IO.Read(Info.ImageFolder FileName("areas.png")), 75%);
  };
}

//======================================================================

readonly AverageAllClass Figures.AverageAll = new;

class AverageAllClass: ContentClass {
  Constructor {
    super.Constructor("All Rates");
  }

  override GetBody(ContentStyleClass style) = MainResults.QRates.ShowAllRates;
}

//======================================================================

readonly AverageSortedClass Figures.AverageSorted = new;

class AverageSortedClass: ContentClass {
  Constructor {
    super.Constructor("Rate vs. Direction");
  }

  override GetBody(ContentStyleClass style) = MainResults.QRates.ShowRateDirected;
}

//======================================================================

readonly RateDirectionClass Figures.RateDirection = new;

class RateDirectionClass: ContentClass {
  Constructor {
    super.Constructor("Directionality");
  }

  override GetBody(ContentStyleClass style) = MainResults.QRates.ShowDirection;
}

//======================================================================

readonly SpecificRatesClass Figures.SpecificRates = new;

class SpecificRatesClass: ContentClass {
  Constructor {
    super.Constructor("Specific Rates");
  }

  static bool Predicate(RateClass a) = a.IsPair("p", "f") or a.IsPair("s", "h") or a.IsPair("k", "ʧ");

  override GetBody(ContentStyleClass style) = MainResults.QRates.Pairs(-1, @Predicate);
}

TransitionTitle(type) = "The top {0} {1} transitions"(TopCount, type);

//======================================================================

readonly QRatesTopClass Figures.QRatesTop = new;

class QRatesTopClass: ContentClass {
  Constructor {
    super.Constructor(TransitionTitle("segmental"));
  }

  override GetBody(ContentStyleClass style) = MainResults.QRates.Extrema(TopCount, true);
}

//======================================================================

readonly QRatesConsonantConsonantClass Figures.QRatesConsonantConsonant = new;

class QRatesConsonantConsonantClass: ContentClass {
  Constructor {
    super.Constructor(TransitionTitle("Consonant-Consonant"));
  }

  static bool Predicate(RateClass a) = a.F0.HasFlagMask(SegmentFeatures.Vowel, SegmentFeatures.NoFeature) and
                                       a.F1.HasFlagMask(SegmentFeatures.Vowel, SegmentFeatures.NoFeature);

  override GetBody(ContentStyleClass style) = MainResults.QRates.Pairs(TopCount, @Predicate);
}

//======================================================================

readonly QRatesOneWayClass Figures.QRatesOneWay = new;

class QRatesOneWayClass: ContentClass {
  Constructor {
    super.Constructor(TransitionTitle("highly directed"));
  }

  override GetBody(ContentStyleClass style) = MainResults.QRates.ShowChartPairs(TopCount, MainResults.QRates.SortByDirection);
}

//======================================================================

readonly AllSegmentFrequenciesClass Figures.AllSegmentFrequencies = new;

class AllSegmentFrequenciesClass: ContentClass {
  var SegmentDisplayClass Display;

  Constructor {
    super.Constructor("Segment occurrance rates for all languages");
    Display = new SegmentDisplayClass(MainResults.Data).FrequencyChart(new(ExtentWidth, Math.Min(ExtentHeight, 5 inches)));
  }

  override GetCaption(ContentStyleClass style) = "The frequency of occurrance of each segment for all languages";

  override GetBody(ContentStyleClass style) = Block {
    Display;
  };
}

//======================================================================

readonly ConsensusTreeClass Figures.ConsensusTree = new;

class ConsensusTreeClass: ContentClass {
  Constructor {
    super.Constructor(Lang.ConsensusTree);
  }

  override GetBody(ContentStyleClass style) = PaperStyle.ShowTree(style, MainResults.Data.MainRun.ResultTree, ExtentWidth);
}

//======================================================================

readonly SegmentOccuranceCaption = Span {
  var l0 = MainResults.Data.Taxa[0].Language;

  "Comparison of occurance rates of segments in each language. Segments are sorted by the rates in ";
  l0;
  ". Bars are normalized to the rate of the most frequently ocurring segment in each language. ";
  "Languages are ordered by their Euclidian distance from "; l0; " indicated by the red line.";
};

readonly SegmentOccuranceRatesClass Figures.SegmentOccuranceRates = new;

class SegmentOccuranceRatesClass: ContentClass {
  Constructor {
    super.Constructor("Segment Occurance Rates");
  }

  override GetCaption(ContentStyleClass style) = SegmentOccuranceCaption;

  override GetBody(ContentStyleClass style) = new SegmentFrequencyClass(MainResults.Data, false).ShowChart(style);
}

//======================================================================

readonly SegmentOccuranceGroupedClass Figures.SegmentOccuranceGrouped = new;

class SegmentOccuranceGroupedClass: ContentClass {
  Constructor {
    super.Constructor("Segment Occurance Rates (by partition)");
  }

  override GetBody(ContentStyleClass style) = new SegmentFrequencyClass(MainResults.Data, true).ShowChart(style);
}

//======================================================================

readonly PartitionFrequenciesClass Figures.PartitionFrequencies = new;

class PartitionFrequenciesClass: ContentClass {
  Constructor {
    super.Constructor("Partition Occurance Rates");
  }

  override GetCaption(ContentStyleClass style) = SegmentOccuranceCaption;

  override GetBody(ContentStyleClass style) = new PartitionFrequencyClass(MainResults.Data).ShowChart(style);
}

//======================================================================

namespace ExampleAnimals {
  Chimpanzee = "AAGCTTCACCGGCGCAATTATCCTCATAATCGCCCACGGACTTACATCCT";
  Gorilla    = "AAGCTTCACCGGCGCAGTTGTTCTTATAATTGCCCACGGACTTACATCAT";
  Human      = "AAGCTTCACCGGCGCAGTCATTCTCATAATCGCCCACGGGCTTACATCCT";
}

//=====================================================================

class ExampleConceptClass {
  var CognateClass    Cognate;
  var LanguageClass[] ExLanguages,
                      LangNames;
  var TaxonClass[]    TaxonList;
  var TaxonClass      Callout,
                      Taxon;
  var ConceptClass    Concept;
  var                 TaxonIndex,
                      Name,
                      CalloutSegment,
                      LangWord;

  Constructor(DataSetClass data, AttributeClass concept) {
    Concept        = new ConceptClass(concept);
    Cognate        = data.GetCognate(concept);
    TaxonIndex     = 0;
    Taxon          = data.Taxa[TaxonIndex];
    Callout        = data.Taxa[3];
    Name           = Cognate.Concept.Name.ToLower;
    ExLanguages    = [Languages.French, WorldLanguages.Portuguese, WorldLanguages.Catalan, WorldLanguages.Friulian, WorldLanguages.Romanian];
    TaxonList      = data.Taxa.FindSlice(t => ExLanguages.Contains(t.Language));
    LangNames      = (each TaxonList).Language;
    CalloutSegment = FirstLetter(Callout);
    LangWord       = Span {(each Cognate.Words[TaxonIndex].Segments).Ipa};
  }

  FirstLetter(TaxonClass taxon) = Cognate.Words[taxon.Index].Segments[0].ShowSegment;
  FirstLetters = FirstLetter(each TaxonList);
}

//======================================================================

readonly ExampleTreeClass Figures.ExampleTree = new;

class ExampleTreeClass: ContentClass {
  Constructor {
    super.Constructor("Example Tree");
  }

  override GetCaption(ContentStyleClass style) = Span {
    "An example tree showing the relationships of {0} languages."(SampledLanguages(MainResults.Data.LanguageSet.Length));
  };

  override GetBody(ContentStyleClass style) = PaperStyle.ShowTree(style, MainResults.Data.NumberedTree, 5 inches);
}

//======================================================================

readonly ExampleConceptsClass Figures.ExampleConcepts = new;

class ExampleConceptsClass: ContentClass {
  Constructor {
    super.Constructor(Lang.ConceptsExamples);
  }

  override GetBody(ContentStyleClass style) = AllWords.ShowTable(11 pts, MainResults.Data, 2);
}

//======================================================================

readonly LanguagesUsedClass Figures.LanguagesUsed = new;

class LanguagesUsedClass: ContentClass {
  Constructor {
    super.Constructor(Lang.Languages);
  }

  override GetBody(ContentStyleClass style) = Block {
    var rows      = 2;
    var data      = MainResults.Data;
    var cols      = (data.Taxa.Length + 1) div rows;
    var taxagroup = data.Taxa / cols;
    var h         = 14 pts;
    var space     = 5 pts;
    var border    = 1 pts;
    var width     = ExtentWidth / cols - space;
    var height    = ExtentHeight / rows - space*(rows-1) - (border*2*rows);

    VBox {
      HAlign: HAligns.Center;

      foreach (var group in taxagroup) {
        HBox(null, null, PadT(space)) {
          VAlign: VAligns.Top;

          foreach (TaxonClass taxon in group) {
            var language = taxon.Language;
            VBox(width, height) {
              Margin: PadR(space);
              HAlign: HAligns.Center;

              Paragraph {
                TextHeight: h;
                language.Name;
                var r = language.FindFirstFact(ReferenceClass);
                if (r is not null)
                  Span {TextHeight: 75%; Citation {r}};
              };

              var mh = height - h;
              HBox(width, mh, new EdgeClass(1, 0, 90%)) {
                VAlign: VAligns.Center;
                BorderRadius: 20 pts;
                BorderClip: true;

                Span {
                  TipAction: language;
                  language.ShowMap(width, mh);
                }
              };
            }
          }
        }
      }
    }
  };
}

//======================================================================

readonly SegmentAssignmentsClass Figures.UniqueSegments = new(MainResults.Data);

//======================================================================

readonly AlignmentClass Figures.Alignment = new;

class AlignmentClass: ContentClass {
  const ArrowWidth  = 40;
  const Arrowhead   = 8 pts;
  const ArrowColor  = 80%;

  const HMap1 = [
    "00111110",
    "10001111",
    "10001110",
    "01101111",
    "10101010",
    "10101110",
    "10001111",
    "00001110",
    "10001110",
    "10011111",
  ];

  const HMap2 = [
    "111110000",
    "000111100",
    "000111111",
    "000111111",
    "101010100",
    "000101111",
    "000101111",
    "000111000",
    "111100000",
    "000111111",
  ];

  Constructor {
    super.Constructor(Lang.Alignment);
  }

  TName(TaxonClass taxon) = Cell {
    PaperStyle.SansSerif;
    taxon.Language;
  };

  SegmentTable(ExampleConceptClass example, DataSetClass data, aligned) = MatrixBlock {
    TextHeight: 9 pts;

    foreach (var taxon in data.Taxa) {
      Row {
        TName(taxon);
        Cell {
          IPAFamily;
          Span {
            var word = example.Cognate.Words[taxon.Index];
            var segs = aligned ? word.Padded : word.Segments;
            (each segs).ShowBlock;
          }
        };
      }
    }
  };

  AlignSegments(SegPartClass[] segments, map) = Span {
    IPAFamily;

    var i = 0;
    foreach (var c in map) {
      if (c == '1' and i < segments.Length)
        segments[i++].ShowBlock;
      else
        IPASegments.GapSegment.ShowBlock;
    }
  };

  MapTable(ExampleConceptClass example, DataSetClass data, map, text) = MatrixBlock {
    foreach (var taxon in data.Taxa) {
      Row {
        TName(taxon);
        Cell {
          var t = map[each0];
          Span {
            if (text)
              AlignSegments(example.Cognate.Words[taxon.Index].Segments, t);
            else {
              TextFixed: true;
              t;
            }
          }
        };
      }
    }
  };

  LabelBox(label) = HBox {
    TextHeight: 18 pts;
    Bold;
    Equation {label};
  };

  ContentBox(content) = HBox(null, null, new EdgeClass(0.5 pts, 2 pts, ArrowColor)) {
    Margin: PadL(4 pts);
    content;
  };

  ArrowFigure(SizeClass size) = Canvas(size.Width, size.Height) {
    Shape(null, new(1.5, ArrowColor)) {
      OpenPath(0) {
        QuadTo(new(size.Width*0.92, size.Height*0.4), new(size.Width - Arrowhead*0.5, size.Height - Arrowhead));
      };
    };
    Shape(ArrowColor) {
      ClosedPath(size.Width - Arrowhead, size.Height - Arrowhead) {
        LineTo(size.Width, size.Height - Arrowhead);
        LineTo(size.Width - Arrowhead * 0.5, size.Height);
      };
    };
    Canvas {
      Background: Colors.White;
      X: size.Width * 0.3;
      Y: (size.Height - 25 pts) * 0.5;
      TextHeight: 20 pts;
      TextColor: ArrowColor;
      Bold;
      Tex.Plus;
    };
  };

  NumBox(num, c1, c2) = MatrixBlock {
    VAlign: VAligns.Top;
    HAlign: HAligns.Center;
    ColumnGap: 0;
    Row {
      LabelBox(HomologyMap sub num);
      ContentBox(c1);
    };
    Row {
      Empty;
      Canvas {
        TextColor: ArrowColor;
        Margin: PadB(5 pts);
        TextHeight: 20 pts;
        HAlign: HAligns.Center;
        Span {
          Tex.downarrow;
          X: 1 pts;
        };
        "=";
      }
    };
    Row {
      LabelBox(SegmentalAlignment sub num);
      ContentBox(c2);
    };
  };

  HomBox(ExampleConceptClass example, DataSetClass data, i, map) = NumBox(i, MapTable(example, data, map, false), MapTable(example, data, map, true));

  override GetCaption(ContentStyleClass style) = Span {
    "Alignments (";
    SegmentalAlignment;
    ") are formed from the observed segments (";
    SegmentalInfo;
    ") and a homology map (";
    HomologyMap;
    "). ";
  };

  override GetBody(ContentStyleClass style)= VBox {
    TextHeight: 12 pts;
    Separation: 4 pts;
    Margin: 5 pts;
    HAlign: HAligns.Center;

    var data    = MainResults.Data;
    var example = new ExampleConceptClass(data, data.ExampleConcept);

    HBox {
      VAlign: VAligns.Bottom;
      var fsize = new SizeClass(ArrowWidth, data.Taxa.Length * 8 pts);

      ArrowFigure(fsize) {
        Transform: new TransformClass(-1, 0, 0, 1, fsize.Width, 0);
      };
      HBox {
        VAlign: VAligns.Top;
        LabelBox(SegmentalInfo);
        ContentBox(SegmentTable(example, data, false)) {
          Margin: PadRB(10 pts);
        };
      };
      ArrowFigure(fsize);
    };
    HBox {
      HomBox(example, data, 1, HMap1);
      Separation: 24 pts;
      HomBox(example, data, 2, HMap2);
    }
  };
}

//======================================================================

namespace StateSection {
  MatrixRow(states, state) = {
    foreach (var s in states) {
      Cell {
        sym.q sub (state s);
      }
    }
  };

  StateRow(states, state) = Row {
    Cell(PadR(3 pts)) {
      HAlign: HAligns.Right;
      Span {
        each0 == states.Length div 2 ? "From   " : Empty;
        state;
      }
    };
    MatrixRow(states, state);
  };

  GetStates(count) = 'A'..('A' + (count - 1)) step 1;

  StateTable(count) = Table(new ThicknessClass(1 pts, 1 pts, 3 pts, null), null, [new ColumnClass(56 pts, BorderR(PaperStyle.TableEdgeSize)), 32 pts]) {
    ParAlignment: ParAlignments.Center;
    VAlign: VAligns.Center;
    HAlign: HAligns.Center;

    var states = GetStates(count);
    Row {
      Empty;
      Cell(null, states.Length) {
        Lang.To;
      };
    };
    Row(BorderB(PaperStyle.TableEdgeSize)) {
      Empty;
      states;
    };
    StateRow(states, each states);
  };

  StateMatrix(count) = MatrixBlock(PadB(3)) {
    var states = GetStates(count);

    Bracket: Brackets.FlatRound;
    foreach (var state in states) {
      Row {
        MatrixRow(states, state);
      }
    }
  };
}

//======================================================================

readonly PhylogenyResultsClass PaperSections.PhylogenyResults = new;

class PhylogenyResultsClass: ContentClass {
  Constructor {
    super.Constructor("Results");
  }

  override GetBody(ContentStyleClass style) = Block {

      style.FirstPar {
          SubSection {"Phylogeny"};
          "Our statistical analysis treats all model parameters as random variables with prior probability distributions. ";
          "The tree topology describing the relationships of the languages is also considered a random variable with a uniform prior probability in which all possible tree topologies are assigned equal prior probability. ";
          "As described in the Methods section, we use MCMC to numerically approximate the posterior probability distribution of the model parameters. ";
          "Our analyses consistently found a handful of topologies that best explained the data. Unfortunately, the MCMC poorly explored the tree space: ";
              "the MCMC algorithm would find a good tree then become stuck on it. Why is this the case? In our MCMC implementation, parameters are updated in blocks. ";
          "A parameter is randomly selected and then updated. In a single MCMC cycle, either the tree topology or the alignment is updated, but not both simultaneously. ";
          "The tree topology and alignments are confounded. As the MCMC procedure found better trees, the alignments that were accepted by the MCMC procedure tended to fit the current tree in computer memory. ";
          "As the alignment becomes better adapted to the current tree in memory, it becomes more difficult for the MCMC procedure to accept alternative topologies, even if they would be sensible ones on a different alignment.";
    };

    style.BodyPar {
      TextDigits: 3;
        "This problem was likely not encountered in the other implementations of the TKF91 model";
        Citation {Lunter2004}; ", which analyzed an alignment of amino acid sequences. ";
        "In our analysis of cognate data, the insertion and deletion rates were estimated to be quite high relative to the substitution rate: ";
        InsertionRate; " = "; MainResults.InsertionRate; " ("; MainResults.InsertionRateLow; ", "; MainResults.InsertionRateHigh; ") and ";
        DeletionRate; " = "; MainResults.DeletionRate; " ("; MainResults.DeletionRateLow; ", "; MainResults.DeletionRateHigh; ") ";
           "for the insertion and deletion rates, respectively. ";
        "(The credible intervals in the parentheses contain the true value of the parameter with probability 0.95.) ";
        "Roughly speaking, this means that for every two segmental transitions there was one insertion or deletion event. ";
        "Just like substitution events, insertion and deletion events can be informative about phylogeny. ";
        "Unlike the earlier analysis of amino acid sequence data, the insertion and deletion events were strongly informative about ";
           "specific tree topologies, and this tree support could change depending on the homology assignments for the alignment.";
    };

    style.BodyPar {
    "In all subsequent analyses, we examine the pattern of language change using three topologies ("
       style.FigureReference(Figures.ModelTreesUsed); "). ";
    "Although there is considerable debate about the phylogeny of the Romance languages, in recent decades most specialists have converged on the view that the first two clades to ";
       "form included Sardinian followed by Romanian";
        Citation {Hall1950; Hall1976; Dardel1985; Swiggers2001; Vallejo2012; Buchi2015; Dworkin2016}; DotSpace;
    "Since Sardinian is not in our study group, the clade containing Romanian is then the first to form in each of the trees in ";
       style.FigureReference(Figures.ModelTreesUsed); DotSpace;
    "The sub-trees containing the remaining dialects differ in their topologies, but they all contain Spanish and Portuguese as a clade, as well as Catalan, French, and Walloon. ";
    "The question of the exact relationship between Latin and Romance continues to be debated ";
        // \citep{goldstein24}.";
        "(Citations)"; DotSpace;
    };

     style.FigureBlock( Figures.ModelTreesUsed);

  };
 }

//======================================================================

class RatioClass {
  var int    Numerator,
             Denominator;
  var double Ratio;

  Constructor(int numerator, int denominator) {
    Numerator   = numerator;
    Denominator = denominator;
    Ratio       = Numerator / Denominator;
  }

  override GetLayoutSpan = Span {
    Span {
      TextDigits: 1;
      100.0 * Ratio;
    };
    "% (";
    Numerator;
    " out of ";
    Denominator;
    ")";
  };
}

//======================================================================

class PartitionValueClass {
  var double         Value;
  var PartitionClass Partition;

  Constructor(PartitionClass p, double value) {
    Partition = p;
    Value     = value;
  }

  static int CompareFunction(PartitionValueClass v1, PartitionValueClass v2) = v1.Value.Compare(v2.Value);

  override GetLayoutSpan = Span {
    Partition.ShowPlural;
    " (";
    Span {
      TextDigits: 3;
      TextSignificant: true;
      Value;
    };
    ")";
  };
}

//======================================================================

readonly SegmentModelsClass PaperSections.SegmentModels = new;

class SegmentModelsClass: ContentClass {
  Constructor {
    super.Constructor("");
  }

  override GetBody(ContentStyleClass style) = Block {

    var rule = MainResults.Rule;

    style.FirstPar {
        SubSection {"Models of segmental change"};
        "We considered three models of segmental change in this study: ";
        Model1; ", a model isomorphic to the model of DNA sequence evolution first described by Jukes and Cantor";
        Citation {Jukes1969};
        " with equal rates between all pairs of states and in which the number of substitutions follows a Poisson distribution (hereafter referred to as the `Poisson' model); ";
        Model2; ", a model isomorphic to the model of DNA sequence evolution first described by Felsenstein";
        Citation {Felsenstein1981};
        " in which the rate of change between a pair of segments is proportional to the equilibrium frequency of the destination segment; ";
        "and "; Model3; ", a natural class model, in which segments that share articulatory properties are grouped together with different rates of change within and between these segmental classes.";
    };

    var segments = MainResults.Data.UniqueSegments.Length - 1;
    var rp       = rule.Filters.Length;

    style.BodyPar {
        "The models differ in the number of parameters to estimate. ";
        "The first model, "; Model1; ", has no free parameters. ";
        "The second model, "; Model2; ", has "; segments; " free parameters (one less than the number of segments). ";

        "The natural class model, "; Model3; ", has "; rp*(rp-1)/2 + rp; " additional segmental class rate parameters: ";
        Equation {segments; " + "; (rp*(rp-1)/2 + rp); Tex.Equals; segments + rp*(rp-1)/2 + rp}; " free parameters.";
    };

    style.BodyPar {
        "We compared the fit of the models to the data using the Bayes factor. ";
        "The Bayes factor is the ratio of the marginal likelihoods, ";
    };

    Equations.BayesFactorEq;

    style.ResumePar {
        "with ratios greater than one favoring model "; ModelI; ". ";
        "As the models examined are nested, we could calculate the Bayes factor using the Savage-Dickey ratio";
          Citation {Dickey1971}; ", ";
          "which is the ratio of the posterior to prior densities evaluated at the restriction that makes the parameter rich model equivalent to the simpler model. "
        "The natural class model explains the data substantially better than the two simpler models, with log Bayes ";
        // TODO: Maybe update the log bayes factor numbers dynamically, though this will be more tricky.
        "factors of ";
        Equation {Tex.ln; BayesFactor12; Tex.Equals; -1074.2}; " and ";
        Equation {Tex.ln; BayesFactor12; Tex.Equals; -117.3};
        ", respectively, for a comparison of "; Model1; " to "; Model2; " and "; Model2; " to "; Model3; ". ";
        "This indicates overwhelming support for the more parameter-rich natural class model";
        Citation {Jeffreys1939}; DotSpace;
    };

    style.FigureBlock(Figures.RateChart);

    var partitions = MainResults.Rule.Partitions;
    var diagonal   = new ListClass<PartitionValueClass>(partitions.Length);

    style.BodyPar {
      style.FigureReference(Figures.RateChart);
      " shows the estimated rates of change between the "; rp; " groups of the natural class";
      " model. ";
      "Several patterns stand out. ";
      "For one, rates of change are generally highest among segments in the same class. ";
      "The estimated rates of change from one word segment to another under the natural class model were ";

      var stats       = MainResults.NCQRates;
      var numSegments = MainResults.Data.UniqueSegments.Length - 1;
      var smallOnes   = new ListClass<PartitionClass>(partitions.Length);
      var numClasses  = partitions.Length;
      var cntSame     = 0;
      var cntDiff     = 0;
      foreach (var pi in partitions) {
        diagonal.Add(new(pi, stats[pi.Index, pi.Index].Mean));
        foreach (var pj in partitions) {
          var val = stats[pi.Index, pj.Index].Mean * numSegments;
          if (val >= 1.0) {
            if (pi == pj)
              cntSame++;
            else
              cntDiff++;
          }
        }
      }

      TextList {
        TextDigits: 2;
        foreach (var p in partitions) {
          var val = stats[p.Index, p.Index].Mean * numSegments;
          if (val < 1.0)
            smallOnes.Add(p);
          val;
        }
      };

      " times higher than expected under an equal rates Poisson model for ";
      TextList {
        TextCase: TextCases.AllLower;
        (each partitions).ShowPlural;
      };
      ", respectively. ";

      "(In other words, the ";
      TextList {
        TextCase: TextCases.AllLower;
        SelfArrow(each smallOnes);
      };
      " rates were lower than would be expected if all rates of change were the same.) ";
      "Long vowels and diphthongs counter the general pattern as they transition more often to short vowels than to other long vowels or diphthongs, which ";
        "reflects the well-known loss of phonemic vowel length in Latin and Romance";
        Citation {Janson1979; Loporcaro2015}; DotSpace;

      var same = new RatioClass(cntSame, numClasses);
      var diff = new RatioClass(cntDiff, numClasses*(numClasses-1));

      if (same.Ratio > diff.Ratio) {
        "Note that "; same; " of the changes within a group are higher than expected under an equal rates model, whereas ";
        diff; " of the changes between different natural class groups are higher than expected under an equal rates model, ";
        "supporting the pattern of a generally higher rate of change between word segmetns assigned to the same natural class group. ";
      }
      else
        System.Assert(false, "Inconsistency between text and data!");

      //"Second, short vowels exhibit the highest rates along the diagonal and diphthongs the lowest. ";
      //"Both characteristics are due to frequency, as short vowels are the most frequent class and diphthongs the least. ";
      //"Finally, the rate of change from nasal consonants to nasal vowels is a pathological trait of the model: ";
      //"it infers transitions from nasal consonants to nasal vowels (and vice versa) as opposed to oral vowels.";
    };

    style.BodyPar {
      style.FigureReference(Figures.EquilibriumCharts);
      " shows the estimated equilibirum frequencies of the natural classes under model "; Model3; ". ";
      "The equilibirum frequenices are used in two ways when calculating the probability of the observed data. ";
      "First, they are used at the root of the tree as the probability of the word segment state at the root. ";
      "Second, they modify the rate of change between word segments for models "; Model2; " and "; Model3;
      ", with the rate of change being proportional to the frequency of the destination word segment. ";
      "Indeed, the rates of change to ";
      TextList {diagonal.ToSortedArray(true, @PartitionValueClass.CompareFunction)[0..2]};
      " are the highest as are the estimated equilibirum frequencies for those classes. ";
      "Generally speaking, the estimated equilibrium frequency tracks the frequency of the word segments in the data. ";
      };

    style.FigureBlock(Figures.EquilibriumCharts);
  };

  SelfArrow(text) = Span {text; Tex.rightarrow; text};
 }

//======================================================================

readonly WordTransformationClass PaperSections.WordTransformation = new;

class WordTransformationClass: ContentClass {
  Constructor {
    super.Constructor("");
  }

  override GetBody(ContentStyleClass style) = Block {
    style.FirstPar {
      SubSection {"Segmental Stability"};
      style.FigureReference(Figures.QRatesDiagonal); " presents the absolute values of the diagonal elements of the rate matrix of the continuous-time Markov model describing phonemic ";
          "change estimated under the natural class model. ";
      "These diagonal elements can be interpreted as a measure of segmental volatility, since they are the sum of the rates at which they transition to other segments. ";
      "When the process is in segment "; sym.i; ", the rate "; neg_qii; " is the rate at which the segment changes to another segment. ";
      "The higher the rate, the more rapidly a change to another state will occur, on average. ";
      //"In contrast to the rates in Figure [rate figure], those in ";
      //style.FigureReference(Figures.QRatesDiagonal); " assume the process is in segment "; sym.i;
      // " and measures the rate of flow away from it (to any other segment). ";
    };

    style.FigureBlock(Figures.QRatesDiagonal);

    style.BodyPar {
      "The most striking aspect of "; style.FigureReference(Figures.QRatesDiagonal); " is the robust distinction between the stability of vowels and consonants. ";
      "Except for the affricates, the most volatile segments are all vowels. ";
      "Among the vowels, the diphthongs and long vowels are the most susceptible to change. ";
      "Overall, the most stable segments are all consonants, with the stops the most stable of all. ";
      "These results are in part consistent with the recent study of Bybee and Easterday ";
          Citation{Bybee2022};
          ", who identify ";
          TextIpa {"p t k b d g m n ŋ s l"};
          " as primal consonants. ";
      "The rates of change in "; style.FigureReference(Figures.QRatesDiagonal); " are also remarkably similar within each class. ";
      "For instance, all the long vowels cluster together, as do the affricates, fricatives, short vowels, nasal vowels, fricatives, nasal consonants, and stops. ";
      "The only exceptions to the clustering are the liquid "; IPASegments.r;
      " (which appears with the fricatives) and mid front vowel "; IPASegments.ay; " (which appears among the nasal vowels).";

      //style.FigureReference(Figures.QRatesTop); " presents the "; Enumerators.Cardinal(TopCount); " transitions with the highest instantaneous rates of change. ";
      //"In contrast to "; style.FigureReference(Figures.QRatesDiagonal); " above, the focus here is on individual sound changes. ";
      //"The results paint a similar picture, however. The input segments in ";
      //style.FigureReference(Figures.QRatesTop); " are either long vowels or diphthongs. ";
      //"The output segments are similarly restricted. ";
      //"Although there are eight transitions in the graph, there are only two output segments, the mid-high front vowel /e/ and the high back vowel /u/. ";
    };

    //style.FigureBlock(Figures.QRatesTop);
  };
}

//======================================================================

readonly WordSegmentRelationshipsClass PaperSections.WordSegmentRelationships = new;

class WordSegmentRelationshipsClass: ContentClass {
  Constructor {
    super.Constructor("");
  }

  override GetBody(ContentStyleClass style) = Block {
    var align1 = Figures.AlignmentExample1;

    style.FirstPar {
      SubSection {"Segmental Alignments"};
      "Our method treats the homology relationships of segments from one language to another as a random variable. ";
      "Our Bayesian analysis numerically approximates the posterior probability of alignments. ";
      "We summarize the posterior distribution by constructing a credible set of alignments. ";
      "A 95% credible set of alignments is constructed by ordering the alignments for a cognate from highest to lowest posterior probability. ";
      "The alignments are then included in a credible set, starting with the alignment with the highest posterior probability, until the cumulative posterior probability is ";
      0.95; DotSpace;
    };

    style.FigureBlock(align1);

    style.BodyPar {
      style.FigureReference(align1); " shows alignments for the concept "; style.SQuote {align1.Examples[0].Cognate};
      ", which illustrates three key properties we observed for all alignments. "
      "First, the distributions of credible sets are heavily weighted in favor of a single alignment with most of the posterior probability. ";
      "In this case, one alignment had a posterior probability of 0.79. ";
      "Second, insertions and deletions occur predominantly at word-end, where gaps are more frequent on average compared to other positions (see Figure [Frequency of INDELS in words]). ";
      "Finally, the alignments tend to assign segments from the same segment group to the same column in the alignment.";
    };




      //"Our method treats the relationships of word segments from one language to another as a random variable. ";
      //style.FigureReference(Figures.AlignmentExamples); " shows alignments for ";
      //Enumerators.Cardinal(Figures.AlignmentExamples.Examples.Length);
      //" of the words we analyzed. ";
      //"For each word, the alignments form a 95% credible set, with alignments ordered from highest to lowest posterior probability. ";
      //"This sample of alignments illustrates three key properties. ";
      //"First, the distributions of credible sets exhibit extreme skew. ";
      //"There is always a decisively optimal alignment. ";
      //"Second, deletions occur predominantly at the end of the words. ";
      //"Finally, the alignments tend to assign word segments from the same segment group to the same column in the alignment. ";
      //"The alignment of the nasalized vowels is surprising, since they are aligned with nasal consonants, when in fact they are homologous with the preceding vowels.";

    var align2 = Figures.AlignmentExample2;
    style.BodyPar {
        "Interestingly, the distribution of alignments depends on the model of segmental change. ";
        style.FigureReference(align2); " shows the 95% credible set of alignments for the concept ";
        style.SQuote {align2.Cognate}; " under the Poisson and natural class models. ";
        "The credible set contains over 1500 alignments under the Poisson model, but only 250 under the natural-class model. ";
        "This difference makes sense given the rates estimated under the natural-class model ("; style.FigureReference(Figures.RateChart); "). ";
        "For example, the rate of change between "; IPASegments.u; " and "; IPASegments.oh; " are estimated to be high, whereas the rate between consonants and "; IPASegments.oh; " is low. ";
        "The distribution of alignments under the Poisson model often makes consonant and "; IPASegments.oh; " segments homologous. ";
        "Under the natural-class model, however, the same alignments are improbable, as the rates of substitution between those alignments are low.";
    };

    style.FigureBlock(align2);
  };
}

//======================================================================

readonly DiscussionClass PaperSections.Discussion = new;

class DiscussionClass: ContentClass {
  Constructor {
    super.Constructor("Discussion");
  }

  override GetBody(ContentStyleClass style) = Block {
   style.FirstPar {
     "There is a long-standing debate—known as the "; style.DQuote{"Neogrammarian controversy"}; "—about the units involved in sound change. ";
     "Leonard Bloomfield famously declared "; style.DQuote{"phonemes change"}; Citation {Bloomfield1933}; DotSpace;
     "According to this view, sound change is not only abrupt but also non-independent. ";
     "It is abrupt in that there are no intermediary stages in a transition from "; IPASegments.ah; " to "; IPASegments.oh; ", for instance. ";
     "It is non-independent because the transitions from one phoneme to another in each individual word are regarded as a single event, regardless of how many words are affected. ";
     "One consequence of this view is that the changes in each individual word-form are not independent and there is therefore just one change event from "; IPASegments.ah; " to "; IPASegments.oh; DotSpace;
     "Other scholars have emphasized the role of acoustic and auditory phonetics in sound change";
     Citation {Blevins2004a; Ohala2003; Ohala2012};
     ", while yet another view contends that sound change occurs by gradually making its way through the lexicon in a process known as lexical diffusion"; Citation {Chen1975a; Phillips2015}; DotSpace;
   };

   style.BodyPar {
     "Our method is not located within any one of these traditions, but rather has affinities with the phonemic approach and lexical diffusion. ";
     "Since our analysis is based on phonemic representations, it is phonemes that undergo insertions, deletions, and transitions. ";
     "These events are treated as independent, however. ";
     "Consider again the change from "; IPASegments.ah; " to "; IPASegments.oh; DotSpace;
     "This is not modeled as a single transition in our framework. ";
     "Instead, a rate of change is inferred based on the homologies of ";
     IPASegments.ah; " and "; IPASegments.oh; " in the data and how often the former transitions to the latter.";
   };

   style.BodyPar {
     "MORE DISCUSSION OF STABILITY/RESULTS. ALSO MENTION TIME REVERSIBILITY AND HOW THIS AFFECTS THE INTERPRETATION OF THE RESULTS?";
   };

   style.BodyPar {
     "Our results are based on a unigram model of segmental transition, in which the three possible events described above are applicable only to individual segments. ";
     "Certain patterns of sound change cannot be adequately captured under such a model. ";
     "For instance, metathesis, a change in which two segments exchange positions, is modeled as two separate transitions. ";
     "The Latin verb "; textit{"exprimere"}; Space; style.SQuote{"press out"}; " begins with "; TextIpa{"eks"}; ", which in Romanian has become "; TextIpa{"sk"}; DotSpace;
     "The initial vowel has been lost and "; IPASegments.k; " and "; IPASegments.s; " have undergone metathesis. ";
     "Under our model, this single event is treated as two, one from "; IPASegments.k; " to "; IPASegments.s; " and another from "; IPASegments.s; " to "; IPASegments.k; DotSpace;
     "A second limitation is that the context in which a segmental transition takes place plays no role in the estimation of transition rates. ";
     "It is well known that the evolution of phonemes can be sensitive to neighboring sound changes (a phenomenon known as "; textit{"conditioned"}; " "; textit{"sound"}; " "; textit{"change"};"). ";
   };

   style.FigureBlock(Figures.GappinessChart);

   style.BodyPar {
     "Under our framework a new issue in linguistic phylogenetics emerges, that of segmental sampling"; Citation {References.Dockum2019}; DotSpace;
     "Certain segmental transitions can play a crucial role in topological inference, but under a sampling scheme such as ours, in which selection of concepts is guided by a Swadesh list, ";
     "there is no guarantee that the necessary segmental correspondences will be sampled. ";
     "There is the further question of the frequency distribution of segments in the dataset. ";
     "Some segments will be sampled more often than others simply because they are more frequent in a language. ";
     "The sampling can thus influence estimates of equilibrium frequencies and transition rates. ";
     "The principles that guide the creation of Swadesh sampling schemes (namely low rates of borrowing and lexical change) will likely have to be modified under our framework to consider issues of segmental distribution. ";
   };

   style.BodyPar {
     "Our event-based approach to linguistic history has the power to transform the discipline by offering an inroad into questions that were previously intractable. ";
     "For instance, questions pertaining to the relationship between phonological change and the phonemic inventory of a language can now be addressed. ";
     "Does the frequency of a phoneme in the words of a language affect its diachronic stability? ";
     "To what extent is phonemic change sensitive to the size and structure of the phonemic inventory of a language? ";
     "What is the role of "; style.DQuote{"natural classes"}; " in phonological change? ";
     "This last question can be addressed through comparison of models with different numbers of rate parameters. ";
     "The method can also be extended to handle more complex phonological changes (such as those involving context dependency), ";
     "to estimate divergence times and diversification rates in addition to topology, ";
     "or to model the history of words along a phylogenetic tree.";
   };

   style.BodyPar {
     "In sum, our approach offers not simply a new framework for linguistic phylogenetics, but one for computational historical linguistics in general, ";
     "which can be expanded and refined in various ways. For instance, it can be combined with methods of automatic cognate detection. ";
     "It can also address more complicated questions, such as context-dependent changes and changes involving multiple segments (such as metathesis). ";
   };
  };
}

//======================================================================

readonly MethodsSummaryClass PaperSections.MethodsSummary = new;

class MethodsSummaryClass: ContentClass {
  Constructor {
    super.Constructor(Lang.Methods);
  }

  override GetBody(ContentStyleClass style) = Block {
    style.FirstPar {
      "A detailed description of the model and analysis can be found in the supplemental material, [reference]. ";
      "What follows is an outline, sufficient in detail to provide an understanding of the model and experiments performed in this study.";
    };
  };
}

//======================================================================

readonly DataSummaryClass PaperSections.DataSummary = new;

class DataSummaryClass: ContentClass {
  Constructor {
    super.Constructor(Lang.Data);
  }

  readonly W = TextIpa {TextAlignment: TextAlignments.Superscript; "w"};

  override GetBody(ContentStyleClass style) = Block {
    var data = MainResults.Data;

    style.FirstPar {
      "The initial set of data was downloaded from"; CitationName(Wiktionary); ", which was then manually checked for accuracy and augmented. ";
      "Words were double-checked against data from"; CitationName(SoundComparisons); DotSpace;
      "For each concept, lexical items descending from a common ancestor were grouped together into cognate sets. ";
      "Membership in a particular cognate set depends solely on shared descent; meaning is irrelevant. ";
      "For instance, the Latin adjective "; textit{"gravis"}; " means "; style.SQuoteComma{"heavy"}; "but its French descendant "; textit{"grave"}; " means "; style.SQuoteEnd{"serious"};
      "Despite this semantic difference, they are assigned to the same cognate set because they are segmentally homologous"; DotSpace;
      "Each word-form is represented phonemically in the International Phonetic Alphabet (IPA). ";
      "Phonemic representations were used in lieu of phonetic representations since phonetic data is harder to come by especially with corpus languages such as Latin. ";
      "Suprasegmental features such as stress are not represented in the data. ";
    };

    style.BodyPar {
      "The raw data set contains many cognate word-forms, but data for this experiment was limited to only those cognates that have word-forms from ";
      data.WordCutoff == data.Taxa.Length ? "all " : "at least ";
      data.WordCutoff; " languages. ";
      "There are in total "; data.UsedConcepts.Length; " concepts, "; data.UsedCognates.Length; " cognate sets, "; data.WordCount; " word-forms, using "; data.UniqueSegments.Length; " unique segments. ";
    };

//  style.FigureTable(Figures.PartitionAssignments, 8 pts);

    style.BodyPar {
      "Latin is a highly inflectional language, which means that there are multiple word-forms for verbs, nouns, and adjectives. ";
      "For verbs, infinitive forms were selected. ";
      "For nouns, singular forms in either the accusative or (rarely) the nominative case were used, since these are the two case forms ancestral to Romance descendants. ";
      "The selection of word-forms is not without consequences, since it impacts the rates of phonological change. ";
      "For instance, most masculine singular nominative adjectives in Latin end in -"; textit{"us"}; DotSpace;
      "By contrast, feminine singular nominative adjectives end in -"; textit{"a"}; DotSpace;
      "Use of the feminine forms would increase the number of transitions originating in this vowel.";
    };

    style.BodyPar {
      "All word-forms were manually aligned, so that historically related segments occur in the same column. ";
      "The manual alignments serve as the starting point for the MCMC sampling procedure (see below), so our analysis did not condition on any alignment of word segments being correct. ";
      style.TableReference(TableFigures.ManualAlignment); " provides an illustrative example of the alignment for the concept ";
      TableFigures.ManualAlignment.WordDisplay(style);
      "The Latin form "; TextIpa{"kʷ-id"}; " begins with a voiceless velar stop with a secondary labial articulation "; W; DotSpace;
      "In most Romance languages, this secondary articulation is lost, ";
      "but in some, it develops into a consonant (e.g., the "; TextIpa{"kw"}; " of French and Walloon). ";
      "To accommodate this change, the Latin form has two segmental slots before the vowel (i.e., ";
      IPASegments.kw.ShowSegment; "-), the second of which anticipates the development of the secondary articulation " W; "in French and Walloon"; DotSpace;
    };

    style.TableBlock(TableFigures.ManualAlignment, 10 pts);
  };
}

//======================================================================

readonly ManualAlignmentClass TableFigures.ManualAlignment = new;

class ManualAlignmentClass: ContentClass {
  Constructor {
    super.Constructor("An example of an aligned cognate set");
  }

  readonly WordDisplay(ContentStyleClass style) = style.SQuoteEnd {
    TextCase: TextCases.AllLower;
    MainResults.Data.FigureConcept.Name;
  };

  override GetCaption(ContentStyleClass style) = Span {
    "Manual alignment of the words for the concept ";
    WordDisplay(style);
  };

  override GetBody(ContentStyleClass style) = LanguageTable([ColumnClass.Expand]*3) {
    var th = ExtentWidth * 0.02;
    TextHeight: th;

    var cognate = MainResults.Data.GetCognate(MainResults.Data.FigureConcept);
    LanguageTitleRow {
      Lang.Language; Lang.PhonemicRep; Lang.Alignment;
    };

    foreach (var word in cognate.Words) {
      Row {
        word.Language;
        TextIpa {word};
        word.ShowPaddedBlocks(th);
      };
    }
  };
}

//======================================================================

readonly WordCountTableClass TableFigures.WordCountTable = new;

class WordCountTableClass: ContentClass {
  Constructor {
    super.Constructor("Manual Alignment");
  }

  override GetCaption(ContentStyleClass style) = Span {
    "Manual alignment of the words for the concept ";
    style.SQuote {
      TextCase: TextCases.AllLower;
      MainResults.Data.FigureConcept.Name;
      DotSpace;
    };
  };

  override GetBody(ContentStyleClass style) = LanguageTable([1.5 inches]) {
    LanguageTitleRow {
      Lang.Language; Lang.WordForms; Lang.SegmentCount;
    };

    foreach (var taxon in MainResults.Data.Taxa) {
      Row {
        taxon.Language;
        taxon.WordCount;
        Span {
          TextGroup: true;
          taxon.SegmentCount;
        }
      };
    }
  };
}

//======================================================================

readonly ModelInferenceClass PaperSections.ModelInference = new;

class ModelInferenceClass: ContentClass {
  Constructor {
    super.Constructor("Model and Statistical Inference");
  }

  InsertionLessThanDeletion = Span {InsertionRate; Tex.lt; DeletionRate};

  override GetBody(ContentStyleClass style) = Block {
    var rule = MainResults.Rule;

    style.FirstPar {
      "We assume that modern languages are related to one another through an unknown phylogenetic tree, ";
      UnknownTree;
      ", that contains information on the relatedness of the languages ";
      InParens {Topology};
      " and the expected number of sound substitutions "; ExpectedEvents; " that occur along each branch of the tree. ";
      "Language evolves along the branches of the tree according to the TKF91 model"; Citation {Thorne1991}; " which allows either a word segment transition, insertion, or deletion to occur in an instant of time. ";
      "Insertions and deletions occur at rates "; InsertionRate; " and "; DeletionRate; " respectively, with "; InsertionLessThanDeletion; DotSpace;
      "Phonemic substitution is modeled as a continuous-time Markov model with phonemes as the states of the process (our inventory consists of "; MainResults.Data.UniqueSegments.Length; " phonemes). ";
      "The rates of change between all pairs of states are contained in the rate matrix "; RateMatrix; ", which has parameters "; Span {Bold; RateMatrixParams}; DotSpace;
    };

    style.BodyPar {
      "We perform estimation in a Bayesian framework, basing parameter estimates on the joint posterior probability distribution, ";
    };

    Equations.BayesianEstimation;

    style.ResumePar {
      "where "; SegmentalInfo; " are the observed word segments for the cognate words. ";
      "The likelihood function, "; LiklihoodFunction;
      ", is calculated using the algorithm described by Lunter "; textit{"et al."}; Citation {Lunter2003}; DotSpace;
      "We use priors for the model parameters that are standard in phylogenetics, except for the rate parameters for the insertions and deletions, ";
      "which are assumed to follow independent and identically distributed exponential distributions with "; InsertionLessThanDeletion; DotSpace;
      "We numerically approximate the posterior distribution of the parameters using MCMC. ";
      "Specifically, we constructed a Markov chain that has as its states the parameters of the model and a stationary distribution that is the posterior distribution of interest. ";
      "Samples from this chain when at stationarity are valid, albeit dependent, samples from the posterior distribution. ";
      "Besides sampling the phylogenetic parameters of the model, the chain also samples word segment alignments"; Citation{Lunter2004}; DotSpace;
    };

    style.BodyPar {
      "Our model of segmental transitions is based on phonological natural classes, which are groups of segments that share articulatory properties. ";
      "The segmental inventory of our dataset was exhaustively partitioned into "; Enumerators.Cardinal(rule.Filters.Length); " classes, which are presented in ";
      style.TableReference(Figures.PartitionAssignments); DotSpace;
      "This "; style.SQuote{rule.Name}; " model allows different rates among the ";
      Enumerators.Cardinal(rule.Filters.Length); " classes of segments. ";
      //Span {
      //  Separator: CommaSpace;
      //  LastSeparator: " and ";
      //  rule.Filters;
      //};
      " It has "; MainResults.Data.UniqueSegments.Length; " parameters for the equilibrium distribution and ";
      (rule.Filters.Length-1)^2-1; " parameters describing rates among natural classes. ";
      "The equilibrium frequencies are modeled as random variables drawn from a flat Dirichlet prior distribution. ";
    };

    style.TableBlock(Figures.PartitionAssignments);
  };
}

//======================================================================

readonly DataCurationClass PaperSections.DataCuration = new;

class DataCurationClass: ContentClass {
  Constructor {
    super.Constructor("Data Curation and Analysis");
  }

  override GetBody(ContentStyleClass style) = Block {
    var example = new ExampleConceptClass(MainResults.Data, MainResults.Data.DataConcept);

    style.FirstPar {
      "Our analysis is coordinated using a program written in the Nytril programming language"; Citation {nytrilprogram}; DotSpace;
      "We created an automated framework for the experiment that comprises a reusable IPA library, word data, ";
      "data quality checks, typeset output and input files for the MCMC software (written in C++). ";
    };

    style.BodyPar {
      "Word-forms from the "; MainResults.Data.Taxa.Length; " languages in our study, coded in standard Unicode IPA, are organized into classes by concept and then by cognate class. ";
      "For example, the concept "; style.SQuote{TextCase: TextCases.AllLower; example.Name}; " is coded in the following way:";
    };

    SourcePar(MainResults.Data, example.Concept);

    style.BodyPar {
      "The dashes ("; style.SQuote{"-"}; ") denote the absence of a homologous segment present in other word-forms. ";
      "A challenge for programming in linguistics is that the IPA representation of words is expressed in Unicode (UCS), not ASCII or ANSI. ";
      "This requires care with file formats, text encodings and diacritic compositional form. ";
      "Furthermore, each IPA segment string can comprise several UCS code-points, so that the mapping between string characters and segments is not one-to-one. ";
      "Below is an example of a more complex encoding, ";
    };

    style.BodyPar {
      ParAlignment: ParAlignments.Center;
      Frame(2 inches, 60 pts) {
        IPASegments.VlAlveolarNSAffricate.Display(null, 20 pts);
      };
    };

    style.ResumePar {
      "where the numbers in grey are the hexadecimal UCS code points for the letters and diacritics. ";
      "Since our analysis requires each word to be separated into segments, a parser converts word strings into arrays of segment objects that facilitate the manipulation of segments at a high level. ";
      "A reusable library of such objects endows each segment with linguistic features that can be used for analysis. ";
      "After the input step, all steps are coded using properties such as "; style.SQuote{"vowel"}; " and "; style.SQuote{"nasal"}; ", rather than working with strings of characters directly.";
    };

    style.BodyPar {
      "After the raw input is parsed, the control program aggregates and partitions the words and builds the data files for the MCMC program to perform Bayesian phylogenetic analysis under the TKF91 model. ";
      "The MCMC analysis runs for "; Span {MainResults.Data.MainRun.Config.Generations; TextGroup: true}; " cycles and repeats to check for convergence. ";
      "Samples taken during the first "; Span {MainResults.Data.MainRun.Config.PreBurn; TextGroup: true}; " cycles of the chain are discarded as burn-in. ";
      "When the analysis is complete, the results are read back into the control program. ";
      "The resulting tables, trees and graphical figures are automatically generated from the MCMC output and combined with narrative elements created by the authors to make the final paper and supplemental materials. ";
    }
  };
}

//======================================================================

readonly AcknowledgementsClass PaperSections.Acknowledgements = new;

class AcknowledgementsClass: ContentClass {
  Constructor {
    super.Constructor("Acknowledgements");
  }

  override GetBody(ContentStyleClass style) = Block {
    style.FirstPar {
      style.ShowInitials(People.Huelsenbeck_John); " was supported through NSF (1759909) and the Koret Foundation. We thank "; style.ShowPerson(People.Lunter_Gerton); " for help with the TKF91 model.";
    }
  };
}

//======================================================================

readonly ContributionsClass PaperSections.Contributions = new;

class ContributionsClass: ContentClass {
  Constructor {
    super.Constructor("Author contributions statement");
  }

  override GetBody(ContentStyleClass style) = Block {
    style.FirstPar {
      style.ShowInitials(People.Goldstein_David) " collected data, ";
      style.ShowInitials(People.Buchi_Éva); " corrected it, ";
      style.ShowInitials(People.McCreight_Shawn); " developed the control software, and ";
      style.ShowInitials(People.Huelsenbeck_John); " developed the MCMC software. ";
      style.ShowInitials(People.Goldstein_David); CommaSpace;
      style.ShowInitials(People.McCreight_Shawn); ", and ";
      style.ShowInitials(People.Huelsenbeck_John); " wrote the manuscript. ";
    }
  };
}

//======================================================================

readonly MethodsClass PaperSections.Methods = new;

class MethodsClass: ContentClass {
  const StateCount = 5;

  Constructor {
    super.Constructor(Lang.Methods);
  }

  override GetBody(ContentStyleClass style) = Block {
    var data = MainResults.Data;
    var ec   = new ExampleConceptClass(data, data.ExampleConcept);

    style.FirstPar {
      "We use ancestral classes, in which the descendant forms are segmentally aligned. ";
      "It is important to note that our definition of cognate refers only to segmental descent. ";
      "It takes no account of semantics whatsoever. ";
      "So the lexical items for "; style.SQuote{"ear"}; " in Romance are paired with the Latin word "; textit{"auricula"}; " which is the diminute form of "; style.SQuoteEnd{"ear"};
    };

    style.FirstPar {
      "Other things we have to mention: "
    };

    NumberList {
      "The data are surface forms, not underlying forms. ";
      "We used the accusative singular for nouns in Latin. ";
    };

    style.BodyPar {
      "Here, we describe the details of the modeling assumptions we make for the linguistic characters, how we estimate the parameters of the linguists model, and how different models describing the evolution of words can be compared in a statistical framework.";
    };

    style.BodyPar {
      BodyTitle {"Phylogeny relating languages"}; DotSpace;
      "We assume that modern-day languages are related by an unknown evolutionary tree, called a ";
      style.SQuote {Phylogeny.Name}; " and denoted "; Phylogeny; DotSpace;
      "The phylogeny contains information on the topological relationships among "; NumLanguages;
      " sampled languages as well as information on the divergence times of the languages or on the amount of change that occurred between the languages. ";
    };

    style.BodyPar {
      style.FigureReference(Figures.ExampleTree); " shows an example of a phylogeny for "; SampledLanguages(data.Taxa.Length); " languages. ";
      "In the terminology of evolutionary biology, the tree is composed of "; style.SQuote{"nodes"}; " and "; style.SQuoteEnd{"branches"};
      "(By contrast, mathematicians call nodes and branches "; style.SQuote{"vertices"} " and "; style.SQuote{"edges,"}; " respectively.) ";
      "The nodes represent the tips of the tree, each of which is assigned a language, and the points on the tree where the languages diverge from one another. ";
      "Each language-assigned tip node is labeled "; (TipLabelNumbers); ". ";
      "The interior nodes are labeled "; TipLabelInterior; " in preorder sequence (i.e., ordered sequentially from the tips to the root). ";
      "The root node is always assigned the label "; TipLastLabel; DotSpace;
      "We denote the ancestor of node "; NodeIndex; " as "; AncestorNode(NodeIndex); DotSpace;
      "In the tree of "; style.FigureReference(Figures.ExampleTree); ", the ancestor of node 3 is "; Equation {AncestorNode(3); Tex.Equals; 12}; DotSpace;
    };

    style.BodyPar {
      "The branches connect the nodes of the tree and are represented as lines in "; style.FigureReference(Figures.ExampleTree); DotSpace;
      "The branch is assigned the label from its descendant node, so for example in the tree of ";
      style.FigureReference(Figures.ExampleTree);
      ", the branch connecting nodes 14 and 15 is assigned the label 16. ";
    };

    style.FigureBlock(Figures.ExampleTree);

    style.BodyPar {
      "A phylogeny is an information-rich graph. ";
      "For one, it contains information on the relationships of the languages. ";
      "This topological information is denoted "; Topology; DotSpace;
      style.FigureReference(Figures.ExampleTree);
      " for example, suggests that "; French; " and ";  Walloon; " are each others’ closest relatives. ";
      "They are more closely related to each other than they are to any another language on the tree because they share a more recent common ancestor with each other than they do with any other language. ";
      "This common ancestor is the node numbered 15 in "; style.FigureReference(Figures.ExampleTree); DotSpace;
      French; " and "; Walloon; ", together, are more closely related to "; Friulian; " in the tree of "; style.FigureReference(Figures.ExampleTree); DotSpace;
      "Both French and Walloon are equally related to "; Friulian; " because they both share the same common ancestor with ";
      Friulian; ", at the node numbered ";
      WorldLanguageList.FindElementIndex(Friulian)+1; " in "; style.FigureReference(Figures.ExampleTree); DotSpace;
      "It is important to realize that there are many possible ways in which the languages can be related to one another, with the tree of ";
      style.FigureReference(Figures.ExampleTree);
      " depicting only one of the possibilities. ";
      "In fact, for the case in which ";
      SampledLanguages(data.Taxa.Length);
      " languages are considered, there are "
      BranchFormula(data.Taxa.Length);
      " possible trees relating the languages. ";
      "In general, the number of possible rooted trees is the product of the odd numbers up to, and including, ";
      MaxBranch;
      ": ";
      PossibleTrees; DotSpace;
      "Each topology is given a unique label, ";
      Equation {
        EllipsisList {
          Topology sub 1;
          Topology sub 2;
          Topology sub BN;
        };
      }; DotSpace;
      "The number of possible tree topologies becomes quite large very quickly — it is a factorial, after all. ";
      "A linguist interested in the relationships among ";
      var langnumber = 60;
      SampledLanguages(langnumber);
      " languages, for example, would contend with ";
      Span {
        TextEquation: true;
        TextScientific: true;
        TextDigits: 2;
        BranchFormula(langnumber);
      };
      " possible topologies, each depicting a unique and different way the languages can be related. ";
      "For comparison, the number of atoms in the known universe is on the order of "; 10 sup 80; DotSpace;
    };

    style.BodyPar {
     "Ideally, the linguist would not only be able to estimate the correct topology relating the languages of interest, but also the times at which the languages diverged. ";
     "The interior nodes of the tree represent language divergence events that occurred at specific times in the past and are denoted ";
     Equation {
       Span {Bold; Time};
       Tex.Equals;
       InParens {
         EllipsisList {
           Time sub (NumLanguages Tex.Plus 1);
           Time sub (NumLanguages Tex.Plus 2);
           Time sub TipLastLabel;
         };
       }
     }; DotSpace;

     "The tip nodes are all assigned the time ";
     Equation {
       Time; Tex.Equals; 0;
     }; DotSpace;

     "Below, we will discuss in more detail a stochastic model of language change. ";
     "However, the model we use, along with every other stochastic model for phylogenies, has an all-important parameter that describes the rate at which the language changes. ";
     "This parameter is called the substitution rate and is denoted "; SubstitutionRate; DotSpace;

     "Without external information that constrains the divergence times, such as one language divergence time that is considered known, perhaps from textual information, it is impossible to estimate the divergence times. ";
     "The problem is that one obtains the same net divergence between two languages from a high rate of language evolution and a short divergence time separating the languages, or a low rate of language evolution and a long time separating the languages. ";
     "In fact, the expected number of evolutionary events that occurred between two languages that diverged at time "; Time; " is ";
     Equation {
       ExpectedEvents;
       Tex.Equals;
       2;
       Time;
       SubstitutionRate;
     }; DotSpace;

     "(The factor of two is introduced because the path between the two languages is the time from one language to the common ancestor, and then back up the tree to the other language.) ";
     "In this paper, we allow each of the "; MaxBranches; " branches of the tree to have an independent substitution rate. ";
     "Hence, the expected number of evolutionary events that occur along the "; Ith; " branch of the tree is ";
     ExpectedEventsPerBranch;
     DotSpace;
     "In this study, we do not estimate the divergence times on the tree, but rather estimate the compound parameter representing the branch lengths (the ";
     Equation {ExpectedEvents sub sym.i};
     " which are in units of expected number of substitutions per segment (see below). ";
    };

    style.BodyPar {
      "To summarize, we assume languages only diverge from one another, ignoring events such as word assimilation. ";
      "We represent the divergence as a phylogeny containing information on both the topology and branch lengths, together denoted ";
      UnknownTree;
      DotSpace;
      "One of the goals of this study is to estimate these parameters from the data collected from each language."
    };

    style.BodyPar {
      BodyTitle {"Data"}; DotSpace;
      "The similarities of words from different languages are informative about how the languages are related. ";
      "In this study, we use statistical methods developed in the field of evolutionary biology to estimate the relationships of species based on either the morphological characteristics of the species or the DNA sequences sampled from the same gene and compared across the species. ";
      "The methods assume that the characteristics compared across species are homologous. ";
      "Homology, in evolutionary biology, is similarity in some characteristic that is caused by common ancestry. ";
      "Consider as an example the following DNA sequences sampled from three species,";
    };

    BodyTable([1 inch, 5 inches]) {
      foreach (var a in attribute(ExampleAnimals).Children) {
        Row {
          TextHeight: 10 pts;
          a.Name;
          Cell {
            Span {
              TextFixed: true;
              a.Value;
              Tex.ldots;
            };
          };
        };
      }
    };

    style.BodyPar {
      "These are partial mitochondrial sequences from Gojobori"; Citation {Gojobori988}; DotSpace;
      "In the original paper, the complete data had ";
      SampledLanguages(12);
      " primate species and the sequences were each 898 nucleotides in length. ";
      "In a phylogenetic analysis of DNA sequenes, homology is assumed at two levels. ";
      "First, one assumes that the sequences that are compared are homologous. ";
      "Typically, homology at this level is established by sequence similarity and synteny of the gene (e.g., the gene that is compared across species is in the same, or at least similar, position along the chromosome when compared across species, which is another way of saying the gene that is compared has the same neighboring genes in all the species in the analysis). "
    };

    style.BodyPar {
      "Not only must the DNA sequences be homologous, but the fine-scale homology of the sequences must also be established. ";
      "The DNA sequences, above, are in an aligned form in which the fine-scale homology has been established; ";
      "each column of the alignment is considered to be homologous. ";
      "So, for example, the first column of the alignment which happens to be the nucleotide A in all three species is assumed to be homologous; ";
      "it is assumed that the common ancestor of gorillas, chimpanzees, and humans had the same gene that also had a position that was homologous to the first column in the alignment. ";
      "Fine-scale homology is established using computer programs in a process called "; style.SQuoteEnd{"alignment"};
      "Importantly, phylogenetic methods assume that the homology established by the alignment program is correct.";
    };

    style.BodyPar {
      "Linguistic information, of course, is not like biological information. ";
      "In the past, linguists attempted to find homologous words, called cognates. ";
      "Typically, words are chosen that are thought to be resistant to assimilation. ";
      "Variation in the cognate words is carefully scrutinized by the linguist and encoded in a way that computer software, developed with biological character data in mind, can read and produce sensible results. ";
      "The encoding process produces variants on a cognate word with the variant states coded as 0 or 1 (or sometimes more, if there are more than two states for the word). ";
    };

    style.BodyPar {
      "In this study, we take a different approach. ";
      "Like others, we concentrate on the so-called "; style.SQuote{"basic vocabulary"}; " of a language "
      NeedsReview("SWADESH REFERENCE");
      ", since the lexical items that instantiate concepts in this domain are less prone to horizontal transmission (i.e., linguistic borrowing). ";
      "In contrast to every study of linguistic phylogenetics that we are aware of, however, our investigation draws inferences from segmental information. ";
      "For each concept in our dataset, homologous lexical items are assigned to the same class, which we refer to as a ";
      Definition("cognate class"); DotSpace;
      "The word-forms within each cognate class are phonemic representations based on the International Phonetic Alphabet (IPA) ";
      NeedsReview("IPA REFERENCE"); DotSpace;
      "Consider the following word-forms for one of the cognate classes for the concept ";
      style.SQuote {ec.Name};
    };

    SegmentTable(ec, data, true);

    style.ResumePar {
      "The word for "; style.SQuote {ec.Cognate.Concept.Name};  " in "; ec.Taxon.Language; ", for example, is "
      "/"; ec.LangWord; "/. ";
      "The matrix for the word "; ec.Name; " also assumes that the fine-scale homology of the segments has been established. ";
      "For example, the above matrix for the concept "; style.SQuote {ec.Name};  " assumes that the first segment of the ";
      TextList {ec.LangNames};
      " languages (respectively, ";
      TextList {
        PaperStyle.IPAFamily;
        ec.FirstLetters
      };
      ") are homologous. ";
      "The dashes indicate that there is no homologous segment at that potential position in the word. ";
      "Note that the first segment for the word ";
      ec.Name;
      " in "; ec.Callout.Language; " is also "; ec.CalloutSegment; DotSpace;
      "Why wasn't the first segment from Italian considered to be homologous to the first segments in ";
      TextList {ec.LangNames};
      "? ";
      "In this case, the alignment program chose the alignment that did not consider ";
      style.SQuote {ec.CalloutSegment}; " of "; ec.Callout.Language; " as homologous to the ";
      style.SQuote {ec.CalloutSegment}; " of French based on the settings chosen by the user. ";
      "It may be that other alignments are nearly as good as the one that is illustrated. ";
      style.FigureReference(Figures.Alignment);
      " shows two possible alignments of the word "
      ec.Name;
      DotSpace;
    };

    style.BodyPar {
      "Note that a segmental alignment, denoted ";
      SegmentalAlignment;
      ", is constructed by combining the word segment information for the languages of interest with information on the homology of the segments. ";
      "The segmental information for the ";
      NumLanguages;
      " languages of interest is denoted ";
      Equation {
        SegmentalInfo;
        Tex.Equals;
        SpanParens {
          EllipsisList {
            Segment sub 1;
            Segment sub 2;
            Segment sub NumLanguages;
          }
        }
      };
      ", where ";
      Defs.Segment sub sym.i;
      " is the segmental string for the ";
      Ith;
      " language. ";
      "The segmental information for the ";
      SampledLanguages(MainResults.Data.Taxa.Length);
      " languages for the cognate class above for ";
      style.SQuote {ec.Name}; " is:";
    };

    SegmentTable(ec, MainResults.Data, false);

    style.BodyPar {
      "Here, the segments for "; ec.Taxon.Language; " would be ";
      Equation {
        Segment sub 1;
        Tex.Equals;
        SpanParens {
          ec.LangWord
        }; DotSpace;
      };
      "The alignment of the segments is accomplished by the use of a map, ";
      HomologyMap;
      ", describing the homology of the word segments. ";
      "The alignment is formed by combining the word segment information with the homology map, ";
      Equation {
        SegmentalAlignment;
        Tex.Equals;
        Arguments {
          SegmentalInfo;
          HomologyMap;
        };
      }; DotSpace;
      style.FigureReference(Figures.Alignment);
      " shows an example of two alignments for the word ";
      ec.Name;
      " that can be formed using two different homology maps. ";
    };

    style.FigureBlock(Figures.Alignment);

    style.BodyPar {
      "Ultimately, the linguist observes the phonetic (in the case of contemporary languages) or graphemic (in the case of corpus languages) forms of words, on the basis of which phonemic representations are posited. ";
      "The alignment, by contrast, is not directly observed. ";
      "There are many different ways in which the segments from a cognate word can be homologous. ";
      "The example from the word "; ec.Name; ", above, shows only one such way. ";
      "In this study, we develop the statistical and analytical machinery that allow us to marginalize over the segmental alignments. ";
      "Our method considers all possible segmental alignments of the word-forms in a cognate class, weighting each such possibility by its probability under a model. ";
      "In this way, our method does not condition on any specific segmental alignment.";
    };

    style.BodyPar {
      BodyTitle {"Language evolution model"}; DotSpace;
      "We assume that cognate words evolve along the branches of a phylogenetic tree through substitution of one segment by another, insertion of a new segment, or deletion of a segment.";
    };

    style.BodyPar {
      TextColor: Colors.Red;
      LeftIndent: 0.25 inches;
      "The process of linguistic change is more complex than this sentence allows. ";
      "There are cases where entire words disappear and emerge. ";
      "There are also cases in which the form of word can change with addition or deletion of a block of segments (called a morpheme). ";
      "If we want to restrict our scope to the forms of change mentioned at the beginning of this paragraph (i.e., to segmental transitions), we can do that, but that will impact the data that I collect. ";
      "We would also need to make it explicit that we are by design excluding certain types of well-known linguistic change.";
    };

    style.BodyPar {
      "Substitution of one segment for another is modeled using a continuous-time Markov model in which the possible states are the set of segments in the phonemic representations. ";
      "At the heart of a continuous-time Markov chain is a rate matrix describing the rate of change between all pairs of states. ";
      "As an example, consider a simplified Markov process with only "; Enumerators.Cardinal(StateCount); " segments as states. ";
      "The rates of change between the pairs of states can be represented in table form as";
    };

    style.BodyPar {
      ParAlignment: ParAlignments.Center;
      Frame {
        StateSection.StateTable(StateCount);
      };
    };

    style.ResumePar {
      "where ";
      RateChange;
      " is the rate of change from segment "; sym.i; " to segment "; sym.j; DotSpace;
      "The diagonal elements of the rate matrix "; qii; " are specified such that each row sums to zero (i.e., ";
      DiagonalElements;
      "); this negative value can be interpreted as the rate at which the process moves away from state "; sym.i; DotSpace;
      "Note that the information on rates of change between all pairs of states is not typically represented in table form, but rather in matrix form as";
    };

    RatesOfChangeBetweenStates;

    style.ResumePar {
      "Here, we introduce an additional parameter, ";
      RateMatrixScale;
      ", that scales the rate matrix such that the average rate of segmental substitution is one.";
    };

    style.BodyPar {
      "A continuous-time Markov model has a simple physical interpretation. ";
      "Specifically, when the process is in state "; sym.i; ", one waits an exponentially-distributed time with parameter ";
      neg_qii; " until the next  segmental substitution occurs. ";
      "The change, when it occurs, is to state ";
      sym.j;
      " with probability ";
      Equation {Tex.Negative; qij; Tex.Divide; qii;}; DotSpace;
      "Several important quantities can be calculated using the information contained in the rate matrix, ";
      RateMatrix; DotSpace;
      "For one, the probability the process ends in state ";
      sym.j;
      " conditional on starting in state ";
      sym.i;
      " after a period ";
      ExpectedEvents;
      " can be calculated through exponentiation of the rate matrix, ";
      ExponentiationOfRateMatrix; DotSpace;
      "One can also calculate the equilibrium distribution of the process — denoted ";
      EquilibriumDistribution;
      " and interpreted as the probability of capturing the process in a particular state after a very long time (formally, an infinite amount of time) has passed — by solving the system of equations defined by ";
      RateMatrixSolution; DotSpace;
      "Both the transition probabilities and equilibrium probability distribution play an important role in calculating the likelihood (see below).";
    };

    style.BodyPar {
      "Insertions and deletions of single segments occur at rates ";
      InsertDelete(" and ");
      ", respectively. ";
      "Consider, for a moment, the long-term behavior of a process in which ";
      InsertDelete(Tex.gt); DotSpace;
      "On average, segments would be inserted more frequently than they would be deleted. ";
      "Word-forms, then, would evolve to become a mouthful, growing without bounds. ";
      "The opposite situation occurs when ";
      InsertDelete(Tex.lt);
      ", in which segments are deleted at a higher rate than they are inserted. ";
      "In this case, words would be whittled down to nothing; ";
      "a language speaker would not find the words to describe anything, even important people in the person's life, such as the person who gave birth to him or her! ";
    };

    style.BodyPar {
      "TKF91"; Citation {Thorne1991}; " described a model of DNA sequence evolution that allowed single nucleotides to be inserted and deleted at rates ";
      InsertDelete(" and "); DotSpace;
      "They introduced a convention for thinking about a DNA sequence in which nucleotides were connected by invisible links. ";
      "Each nucleotide paired with the link to its right. ";
      "The left-most nucleotide had to its left a special link, termed the immortal link. ";
      "Importantly, when a nucleotide was inserted, it was inserted to the right of a link and brought along its own link (to its right). ";
      "Deletions removed a nucleotide and the paired link. Importantly, the immortal link is never deleted. ";
      "So, in the event that "; InsertDelete(Tex.lt); ", the process does not actually go extinct. ";
      "Rather, a nucleotide (and its link) can be inserted to to the right of the immortal link. ";
      "In the model described by TKF91 they constrain the insertion rate to be less than the deletion rate ";
      SpanParens {InsertDelete(Tex.lt)}; DotSpace;
      "The equilibrium distribution of a sequence length is then geometrically-distributed with parameter ";
      InsertDelete(Tex.Divide); DotSpace;
      "We follow the convention of TKF91 in this study. ";
      "In fact, the model we use is precisely the same as the TKF91 model, but with a different continuous-time Markov model used to describe segmental transitions (instead of the four-state process describing nucleotide substitutions used by Throne et al., 1991)."
    };

    style.BodyPar {
      "The overall substitution and insertion/deletion process can be described as follows. ";
      "In a sequence ";
      WordLength;
      " segments in length, of which ";
      WordLength sub sym.i;
      " of them are of segment type ";
      sym.i;
      ", the time until the next event occurs is exponentially-distributed with parameter ";
    };

    InDelDistribution;

    style.BodyPar {
      "When an event occurs, it is a substitution with probability ";
      InDelProbability;
      ", an insertion with probability ";
      EventInsertionProbability;
      ", and a deletion with probability ";
      EventDeletionProbability;
      DotSpace;
      "Importantly, the process allows the alignment map ";
      SpanParens {HomologyMap};
      " to be treated as a parameter of the model. ";
    };

    style.BodyPar {
      BodyTitle {"Bayesian estimation of language evolution model parameters"}; DotSpace;
      "We estimate the parameters of the language-evolution model in a Bayesian framework. ";
      "Bayesians base inferences on the posterior probability distribution of a parameter, which can be calculated using Bayes’ theorem as";
    };

    BayesTheorem;

    style.ResumePar {
      "where the vertical bar indicates a conditional statement. ";
      "In words, the posterior probability distribution of the parameters is equal to the likelihood ";
      InBrackets {PPO};
      " times the prior probability distribution ";
      InBrackets {PP};
      ", divided by the marginal likelihood ";
      InBrackets {PO}; DotSpace;
    };

    style.BodyPar {
      "In this study, parameters include:";
    };

    BodyTable([new ColumnClass(1 inch, null, null, HAligns.Right), 20 pts, 4 inches]) {
      ParamRow {
        ParamList(Topology);
        "Tree Topologies";
      };
      ParamRow {
        ParamList(ExpectedEvents);
        "Branch length parameters";
      };
      ParamRow {
        Equation {RateMatrixParams};
        Span {RateMatrixParams.Description; Space; Equation {RateMatrix}};
      };
      ParamRow {
        Equation {InsertDelete(", "); Space; InParens {InsertDelete(Tex.lt)}};
        "The insertion and deletion rates of  segments";
      };
      ParamRow {
        HomologyMap;
        HomologyMap.Description;
      };
    };

    style.BodyPar {
      "We assign prior probability distributions to all parameters of the model (see Table 1). ";
      "The posterior probability distribution of the linguistic model parameters is then";
    };

    PosteriorProbabilityDistribution;

    style.ResumePar {
      "Note that the likelihood is marginalized over all possible alignments, "
    };

    MarginalizationOverAlignments;

    style.ResumePar {
      "where the sum is over all possible alignment maps, which implies that our inferences are not conditioned on any particular alignment of segments being correct. ";
      "Similarly, the marginal likelihood accounts for all possible combinations of model parameters:";
    };

    MarginalLikelihoodParameters;

    style.ResumePar {
      "where the integrals represent integration over all possible combinations of branch lengths, rate matrix parameters, and insertion/deletion rates.";
    };

    style.BodyPar {
      "We calculate the likelihood on a per-word basis using the algorithm described by Lunter et al. (2003) that conditions on an alignment. ";
      "Although the posterior probability distribution can be written down, and individual components such as the prior probability or likelihood for a particular combination of parameters can be calculated, analytically solving the high dimensional summations and integrals required for the posterior probability is unfeasible. ";
      "Instead, we numerically approximate the joint posterior probability distribution of the parameters using Markov chain Monte Carlo.";
    };

    style.BodyPar {
      BodyTitle {"Markov chain Monte Carlo"}; DotSpace;
      "The aim with Markov chain Monte Carlo (MCMC) is to construct a Markov chain that has as its possible states the parameter values of the statistical model and a stationary distribution that is the posterior probability distribution of the parameters. ";
      "Metropolis et al. (1953)";
      Citation {Metropolis1953};
      " and Hastings (1970)";
      Citation {Hastings1970};
      " described rules that allow the scientist to construct such a chain. ";
      "When at stationarity, samples from this chain form valid, albeit dependent, samples from the posterior probability distribution. ";
      "The Metropolis-Hastings algorithm constructs the Markov chain using the following algorithm:";
    };

    style.NumberedList {
      ParAlignment: ParAlignments.Left;

      Paragraph {
        "The current state of the chain is denoted ";
        RateMatrixParams; DotSpace;
        "If this is the first cycle of the Markov chain, initialize ";
        RateMatrixParams;
        ", perhaps by choosing a value from the prior distribution.";
      };

      Paragraph {
        "Propose a new value for "; RateMatrixParams; " denoted "; NewValueProposal; DotSpace;
        "The proposal mechanism is up to the programmer, but must involve the generation of random numbers ";
        RandomNumber;
        " such that the proposed value is a function of the current value and the random numbers, ";
        Equation {
          NewValueProposal;
          Tex.Equals;
          "h"; Arguments {
            RateMatrixParams;
            RandomNumber;
          };
        }; DotSpace;

        "The probability of proposing the new value is ";
        NewProposal(RateMatrixParams, RateMatrixParams);
        " whereas the probability of the imagined reverse move, not actually made in computer memory, is ";
        NewProposal(NewValueProposal, RateMatrixParams);
      };

      ListItem {
        FirstIndent: 0;
        "Calculate the probability of accepting the proposed value:";
        ProbOfAcceptingProposal;
        "In words, the acceptance probability is the product of the likelihood, prior, and proposal ratios.";
      };

      Paragraph {
        "Generate a uniform(0,1) random variable, ";
        Equation {
          RandomNumber
        }; DotSpace;
        "If ";
        Equation {
          RandomNumber;
          Tex.lt;
          ProbOfAccepting;
        };
        ", accept the proposed state, setting ";
        Equation {
          RateMatrixParams;
          Tex.Equals;
          NewValueProposal;
        }; DotSpace;
        "Otherwise, the proposed state is said to be rejected and the chain remains in state ";
        Equation {
          RateMatrixParams;
        };
      };

      Paragraph {
        "Return to Step # 1.";
      };
    };

    style.BodyPar {
      "The proposals we implement in this study are all typical for phylogenetic models. ";
      NeedsReview("Some details here");
      "The unique aspect of this study is a proposal mechanism for the alignments of the segments for various words. ";
      "Here, we use the proposal mechanism described by Lunter et al. (2005). ";
    };

    style.BodyPar {
      NeedsReview("A bit on interpretation of MCMC results here.");
    };

    style.BodyPar {
      BodyTitle {"Model comparison"}; DotSpace;
      "In a Bayesian analysis, parameter estimates are based on the joint posterior probability distribution of the parameters, which we numerically approximate using the Metropolis-Hastings algorithm. ";
      "Often, however, the linguist is interested in the comparison of two or more models with the goal of evaluating which of the models best explains the observations. ";
      "Bayesian model comparison is based on the marginal likelihoods of the models. ";
      "Consider two different linguistics models, ";
      Model sub 1; " and "; Model sub 2;
      " with marginal likelihoods, "; PSM(1); " and "; PSM(2);
      " (note the marginal likelihoods are calculated for the same observations). The ratio of the marginal likelihoods,";
    };

    ModelComparison;

    style.ResumePar {
      "called the Bayes Factor, measures the relative support of the two models; ";
      "a Bayes Factor less than one favors ";
      Model sub 1;
      " whereas the oppose is true for a Bayes factor greater than one. ";
      "Unlike in frequentist statistics, one does not obtain p-values in a Bayesian comparison of models. ";
      "Rather, the Bayes Factor is interpreted as is, or on a log scale. ";
      "Jeffreys (1961) provided a table to help with the interpretation of Bayes Factors:";
    };

    BodyTable([1 inches, 1 inches, 3 inches]) {
      Row(BorderB(0.5 pts)) {
        BayesFactor;
        Span {"log" sub 10; BayesFactor};
        "Interpretation";
      };
      Row {
        Span {1; Tex.Minus; 3.2};
        Span {0; Tex.Minus; 1/2};
        "Not worth a bare mention";
      };
      Row {
        Span {3.2; Tex.Minus; 10};
        Span {1/2; Tex.Minus; 1};
        "Substantial";
      };
      Row {
        Span {10 Tex.Minus 100};
        Span {1 Tex.Minus 2};
        "Strong";
      };
      Row {
        Span {Tex.gt; 100};
        Span {Tex.gt; 2};
        "Decisive";
      };
    };

    style.BodyPar {
      "In a Bayesian analysis, there is no need to penalize parameter rich models for having more parameters. ";
      "Rather, the penalization is built into the comparison; ";
      "the additional parameters in a complicated model are each assigned a prior probability distribution. ";
      "A parameter-rich model has lower prior probability for any combination of model parameters than a simpler model. ";
      "Hence, there is no need to compare the Bayes factor to a null distribution as there is in frequentist hypothesis testing.";
    };

    style.BodyPar {
      "The main limitation of Bayesian model comparison is numerically approximating the marginal likelihoods of the models. ";
      "This can be done in numerous ways. ";
      "For example, one can construct a Markov chain that jumps between models, even if the models differ in dimensions, using a generalization of MCMC described by Green (1995; reversible-jump MCMC). ";
      "Alternatively, one can numerically approximate the marginal likelihoods using what is called path-sampling in which numerous MCMC chains explore a path between the prior and posterior distributions ";
      NeedsReview("citations"); DotSpace;
    };

    style.BodyPar {
      "In this study, we compare two models. ";
      "The first model is the simplest one we could devise, assuming that the rate of change between all segments is equal. ";
      "Our first model is isomorphic to the earliest model of DNA substitution, called the Jukes and Cantor model in molecular evolution (Jukes and Cantor, 1969)";
      Citation{Jukes1969}; DotSpace;
      "The second model assumes that the rate of change to ";
      NeedsReview("something");
      " is potentially different than the rate of change to ";
      NeedsReview("something else");
      ":";
    };

    BodyTable([0.5 inches, 5 inches]) {
      Row {
        Span {Model sub 1; ":"};
        Equation {
          qij;
          Tex.Equals;
          Tex.alpha;
          " (i.e., all elements of rate matrix are equal)";
        };
      };
      Row {
        Span {Model sub 2; ":"};
        HBox {
          VAlign: VAligns.Center;
          qij;
          Tex.Equals;
          VBox {
            Bracket: Brackets.FlatCurly.Left;
            IfValue(Tex.alpha, " is a something");
            IfValue(Tex.beta, " is a something else");
          };
        };
      };
    };
  };
}

//======================================================================

SegmentTable(ExampleConceptClass example, DataSetClass data, aligned) = BodyTable([1.5 inches, 16 pts]) {
  var words = example.Cognate.Words;
  foreach (var taxon in data.Taxa) {
    Row {
      taxon.Language;
      var list = aligned ? words[taxon.Index].Padded : words[taxon.Index].Segments;
      (each list).ShowSegment;
    }
  }
};

//======================================================================

readonly ConclusionClass PaperSections.Conclusion = new;

class ConclusionClass: ContentClass {
  Constructor {
    super.Constructor("The Rate Matrix in this model of Linguistics");
  }

  override GetBody(ContentStyleClass style) = Block {
    style.FirstPar {
      "Our model describes how the segments evolve along the branches of the tree. We have three events that can occur to change a word: an insertion of a single segment, a deletion of a single segment, and a substitution of a segment.";
    };


    style.BodyPar {
      "A substitution is the replacement of a word segment by another segment. We model substitutions as occurring according to a continuous-time Markov model. Such a model can be understood if you know two things: the possible states and the rate of change between all pairs of states. For our work, the states are the "; MainResults.Data.UniqueSegments.Length; " possible segments. The rates of change between all pairs of states are contained in a rate matrix, which we denote "; RateMatrix; DotSpace;
    };

    style.BodyPar {
      "You can completely describe the substitution process if you have "; RateMatrix; DotSpace; "We use "; RateMatrix; " to calculate transition probabilities (by exponentiating the product of the rate matrix and the branch length) and also to get the stationary frequencies of the process (which are the probability of capturing the process in some state after infinite time has passed)."
    };

    style.BodyPar {
      "Now, for understanding the rate matrix. Let’s denote "; qij; " as the rate of change from state "; sym.i; " to state "; sym.j; ". (It’s simply an element of the rate matrix, "; RateMatrix; "). This is literally the rate of change to that state when the process is in state "; sym.i; ". Comparing rates in the rate matrix can be useful. You can say things such as, “ This rate is higher than that rate. This makes sense because everyone knows that such changes occur frequently in language.” I would especially compare rates in a single row. Does it make sense to see, for example, that when changes occur, they are more likely to be to other states in the same class? Does it make sense that when we have a change and a segment is in the green class that it is more likely to be to a word segment in the dark gray and brown classes? That’s how I read ";
      style.FigureReference(Figures.QRatesMatrix); DotSpace;
    };

    style.BodyPar {
      "That said, I think the diagonals are quite interesting because they give you an idea of the relative volatility of the word segments. The diagonals are simply the negative of the sum of the off-diagonal components of the row:"
    };

    Equations.OffDiagonalComponents;


    style.BodyPar {
      "where "; sym.j; " is iterated over all states (for "; sym.i; Tex.neq; sym.j; "). What does this mean? Let’s consider two segments one of which has a diagonal value of –1.0 and the other that has a value of –2.0. The rate of change for the first, then, is 1.0 and the second is 2.0. This means that the second segment is in a sense more volatile than the first. When we are in the second segment, we move to another state at a rate 2.0 which is twice the rate of the first segment."
    };

    style.BodyPar {
      "What should you look for here with respect to the linguistic data? Well, I don’t know. I’m hoping that, with this interpretation under his belt, David will see patterns that make sense. Are certain word segments known to be more volatile in language? Are others known to be more conservative? Does this background knowledge in the field match up with the rates we are getting (the diagonal values)?"
    };

    style.BodyPar {
      "The other graphs show the average rates. The average rates can be calculated from the rate matrix, "; RateMatrix; ". To distinguish the average rate matrix from the rate matrix, "; RateMatrix; ", I will denote it "; AverageMatrix; ". The "; sym.ij sup "th"; " element of this average rate matrix is calculated as "; AverageRateElement; ". In words, the average rate of change from state "; sym.i; " to state "; sym.j; " is equal to the probability of starting in state "; sym.i; " and then moving to state "; sym.j; "."
    };

    style.BodyPar {
      "What do the average rates tell us? I think the interpretation is a little more confusing, but still well defined. We are looking at averages now, over all of the characters and taking into account their frequencies. A segment that is frequent in the data set will have a boost, here, because "; Probability sub sym.i; " will be higher."
    };

    style.BodyPar {
      "Perhaps the best way to think of this is as follows: "; AverageMatrix; " tells you the average rates and takes into account the probability of starting in state "; sym.i; DotSpace; RateMatrix; ", by contrast, assumes you are already in state "; sym.i; " and tells you how rapidly you move to various states (from "; sym.i; " to the other possible states). I believe for our purposes, you should concentrate on "; RateMatrix; DotSpace;
    };
  };
}
//======================================================================

