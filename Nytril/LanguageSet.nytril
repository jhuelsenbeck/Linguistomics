using IO, WordGroups, Languages;

include "Concepts/Nouns";
include "Concepts/Pronouns";
include "Concepts/Verbs";
include "Concepts/Adjectives";
include "Concepts/Numbers";
include "Concepts/Misc";
include "../Experiments/Europe200/Custom/Posterior/Run1/Execute/Alignments";

namespace Trial;

ExampleConcept = Concepts.Stone;
FigureConcept  = Concepts.What;
DataConcept    = Concepts.Mountain;

//======================================================================

NodeClass GetPriorTree(portuguese) = new Branch {
  new Leaf(Latin);
  new Branch {
    new Leaf(Romanian);
    new Branch {
      new Branch {
        new Branch {
          new Leaf(Walloon);
          new Leaf(French);
        };
        new Branch {
          new Branch {
            portuguese;
            new Leaf(Spanish);
          };
          new Leaf(Catalan);
        }
      };
      new Branch {
        new Leaf(Friulian);
        new Leaf(Italian);
      }
    }
  }
};

//======================================================================

LanguageClass[] Romance = [Latin, Romanian, Portuguese, Spanish, Catalan, French, Walloon, Friulian, Italian];

class EuropeBrazilExperimentClass: ExperimentClass {
  Constructor {
    var data = new DataSetClass(Swadesh100 Leipzig Swadesh207, Romance + [PortugueseBrazil], "207-word Swadesh list of basic vocabulary");
    super.Constructor(#8bbc5666-8f8d-49d9-b67d-fc12321ace43#, "Europe Brazil", "EuropeBrazil", new NaturalPartitionClass(data));
  }

  Extra = new Branch {
    new Leaf(Portuguese);
    new Leaf(PortugueseBrazil);
  };

  override NodeClass PriorTree = GetPriorTree(Extra);

  NodeClass NExtra = new NBranch(12) {
    new NLeaf(Data, Portuguese, 1);
    new NLeaf(Data, PortugueseBrazil, 1);
  };

  override NodeClass NumberedTree = GetNumberedTree(NExtra);
}

//======================================================================

class Europe100ExperimentClass: ExperimentClass {
  Constructor {
    var data = new DataSetClass(Swadesh100, Romance, "100-word Swadesh list of basic vocabulary");
    super.Constructor(#896d37be-ebe1-44a6-a94d-7eade795760a#, "Europe100", "Europe100", new NaturalPartitionClass(data));
  }

  override NodeClass PriorTree = GetPriorTree(new Leaf(Portuguese));

  override NodeClass NumberedTree = GetNumberedTree(new NLeaf(Data, Portuguese, 2));
}

//======================================================================

class Europe200ExperimentClass: ExperimentClass {
  Constructor {
    var data = new DataSetClass(Swadesh100 Leipzig Swadesh207, Romance, "All word sets included");
    super.Constructor(#ca9b67db-c29e-4fc9-a421-8dc4fe82d370#, "Europe200", "Europe200", new NaturalPartitionClass(data));
  }

  override NodeClass PriorTree = GetPriorTree(new Leaf(Portuguese));

  override NodeClass NumberedTree = GetNumberedTree(new NLeaf(Data, Portuguese, 2));
}

//======================================================================

ExperimentClass[] Experiments = [
   new Europe200ExperimentClass,
//   new EuropeBrazilExperimentClass,
//   new Europe100ExperimentClass,
];

//======================================================================


