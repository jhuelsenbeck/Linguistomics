using Format, Units, Math, IO;
//======================================================================

with PaperSizes {
  Letter = Size(8.5 inches, 11 inches);
  A4     = Size(210 millimeters, 297 millimeters);
}
//======================================================================

with DocMetrics if (PaperSystem == PaperSystems.US and DocumentType == DocumentTypes.Normal) {
  DocumentSize = PaperSizes.Letter;
  PageMargin   = Margin(1 inches);
}

with DocMetrics if (PaperSystem == PaperSystems.US and DocumentType == DocumentTypes.SlideShow) {
  DocumentSize = PaperSizes.Letter.Landscape;
  PageMargin   = Margin(0.5 inches, 1.5 inches, 0.5 inches, 0.75 inches);
}

with DocMetrics if (PaperSystem == PaperSystems.A and DocumentType == DocumentTypes.Normal) {
  DocumentSize = PaperSizes.A4;
  PageMargin   = Margin(20 millimeters);
}

with DocMetrics if (PaperSystem == PaperSystems.A and DocumentType == DocumentTypes.SlideShow) {
  DocumentSize = PaperSizes.A4.Landscape;
  PageMargin   = Margin(0.5 inches, 1.5 inches, 0.5 inches, 0.75 inches);
}
//======================================================================

with DocMetrics {
  PageContent    = DocumentSize - PageMargin - Size(Gutter, 0);
  TableSpace     = 24 pts;
  TreeWidth      = PageContent.Width;
  BoxSize        = Size(18 pts, 20 pts);
  CellSize       = Size(BoxSize.Width * 2, BoxSize.Height);
  Gutter         = 0;
  SegmentColumns = 4;
  SegmentSize    = 40 pts;
  SlideFooter    = 0.5 inches;
  SlideHeader    = 1 inches;
}
//======================================================================

class AppendixClass {
  var Title,
      Content;

  Constructor(title, content) {
    Title   =  title;
    Content = content;
  }
}
//======================================================================

class AuthorClass {
  var Title,
      First,
      Middle,
      Last,
      Address,
      Website,
      EMail;

  override GetPopup = Block {
    Paragraph {
      Bold;
      First;
      Space;
      Middle;
      Space;
      Last;
    };
    Block {
      Address;
    };
    if (exists Website) {
      Paragraph {
        Span {
          TextColor: Colors.Gray;
         "web: ";
        };
        Website;
      };
    }
    if (exists EMail) {
      Paragraph {
        Span {
          TextColor: Colors.Gray;
          "email: ";
        };
        EMail;
      };
    }
  };
}
//======================================================================

class DefClass {
  var Symbol,
      Name,
      Description;

  Constructor(symbol, name, description) {
    Symbol      = symbol;
    Name        = name;
    Description = description;
  }

  Var = Span {
    Popup: this;
    Symbol;
  };

  Sub(i) = Nary {
    Operator: Var;
    Lower: i;
  };

  Appendix = Block {
    Paragraph {
      TextHeight: 16 pts;
      Style.Equation {Symbol};
      Tab;
      Name;
    };
    Paragraph {
      LeftIndent: 0.5 inches;
      Description;
    };
  };

  override GetPopup = Block {
    Paragraph {
      TextHeight: 20 pts;
      Style.Equation {Symbol};
    };
    Paragraph {
      Bold; Name;
    };
    Paragraph {
      Description;
    };
  };
}
//======================================================================

Main.MathFamily = "CMU Serif"; //"Linux Libertine Display O";

with Style {
  Fancy                = {TextFamily: "CMU Serif"; TextItalic: true};
  Extra                = {TextFamily: "CMU Serif Extra"};
  GreekFamily          = {TextFamily: "CMU Sans Serif"; TextItalic: true};
  MainFamily           = {TextFamily: "CMU Serif"};
  SansSerif            = {TextFamily: "CMU Sans Serif"};
  MonoFamily           = {TextFamily: "CMU Typewriter Text"};
  IPAFamily            = {TextFamily: "Linux Libertine O"};

  ImpossibleBackground = {Background: 80%};
  CommentColor         = Color(0, 0x64, 0);
  StringColor          = Color(168, 21, 53);
  AlignBackColor       = 95%;
  Used                 = {TextColor: Colors.Red};
  TitleBackground      = {Background: 90%};
  TableEdgeSize        = 0.25 pts;
  TableEdge            = {Edge: TableEdgeSize};
  ColumnEdge           = {EdgeR: TableEdgeSize};
  SegmentBottom        = {EdgeB: TableEdgeSize {Color: 80%}};
  Logo1                = Color(0, 0, 0xFF);
  Logo1A               = Color(0, 0, 0xE0);
  Logo2                = Color(0xFF, 0xA5, 00);
  LightColor           = Colors.Orange;
  DarkColor            = Colors.DarkBlue;
  ArrowColor           = Colors.LightGray;
  HighlightColor       = Colors.Orange;
  TextColor            = Colors.Black;
  SectionBack          = DarkColor;
  SectionFore          = Colors.White;
  HeaderText           = Colors.White;
  SlideHeader          = Colors.SlateGray;
  Hyperlink            = Color(100, 42, 143);
  HeaderBar1           = Color(23, 54, 114);
  HeaderBar2           = 99%;
  RightBar             = (99%)..(90%);
  LeftBar              = (90%)..(99%);
  BarLine              = LightColor;
  FooterBar1           = Color(223, 232, 249);
  FooterBar2           = Colors.White;
  TitleColor           = Colors.Orange;
  HeaderLeftBar        = HeaderBar1..HeaderBar2;
  HeaderRightBar       = (99%)..(90%);
  FooterLeftBar        = FooterBar1..FooterBar2;
  FooterRightBar       = FooterBar2..FooterBar1;
  Word(w)              = Span {TextItalic: true; w};
  DoubleQuote          = Span {Begin: "“"; End: "”"};
  SingleQuote          = Span {Begin: "‘"; End: "’"};
  eos                  = ". ";

  RowBar(i) = {
    if (i mod 2 != 0)
      Background: 95%;
  };

  NormalHeader(text) = Block {
    Span {TextCase: TextCases.AllUpper; text}
  };

  PageSection = Section {
    SectionBreak: SectionBreaks.NextPage;
    Footer: Block {
      Distance: 0.5 inches;
      ParAlignment: ParAlignments.Center;
      PageNumber
    };
  };

  TableNotes = Paragraph {
    SpaceAfter: DocMetrics.TableSpace;
  };

  AnimalRow(a) = Row {
    TextHeight: 10 pts;
    a.GlobalVariableName;
    Cell {
      Span {
        Style.MonoFamily;
        a;
      }
      Chars.ldots;
    }
  };

  TitleCase(text) = Span {
    if (exists text) {
      TextCase: TextCases.SmallCaps;
      Separator: Space;
      text;
    }
  };

  Title(text) = Paragraph {
    KeepWithNext: true;
    SpaceBefore: 12 pts;
    SpaceAfter: 6 pts;
    ParAlignment: ParAlignments.Center;
    TextHeight: 18 pts;
    text
  };

  HeaderCentered(text) = Paragraph {
    KeepWithNext: true;
    SpaceBefore: 12 pts;
    SpaceAfter: 6 pts;
    ParAlignment: ParAlignments.Center;
    TitleCase(text)
  };

  Header1(text) = Paragraph {
    KeepWithNext: true;
    SpaceBefore: 18 pts;
    SpaceAfter: 8 pts;
    TitleCase(text)
  };

  Header2(text) = Paragraph {
    KeepWithNext: true;
    SpaceBefore: 12 pts;
    SpaceAfter: 6 pts;
    TextHeight: 14 pts;
    text
  };

  Header3(text) = Paragraph {
    KeepWithNext: true;
    Border: 0.25 pts;
    ParBackground: 97%;
    SpaceAfter: 12 pts;
    TextHeight: 14 pts;
    text
  };

  SourceFile(source) = Block {
    Style.Header3(GetFileName(source.Path));
    Paragraph {
      LeftIndent: 0.25 inches;
      ParAlignment: ParAlignments.Left;
      Style.MonoFamily;
      TextHeight: 8 pts;
      SourceSelection(source)
    }
  };

  SourceCodeBlock = TextBlock {
    Style.MonoFamily;
    TextHeight: 10 pts;
    ParBackground: 97%;
  };

  Author(author) = Span {
    Link: author.GlobalVariablePath;
    Popup: author;
    author.Title;
  };

  Citation(r) = Span {
    Link: r.GlobalVariablePath;
    r.Cite;
  };

  Definition(s) = Span {
    Italic;
    s
  };

  void Collect(list, node) {
    if (node.Label)
      list.Add(node, node.Label);
    Collect(list, each node);
  }

  GetTimes(node) {
    var list = new ListClass(100);
    Collect(list, node);
    return list[1..];
  }

  ByYear(x, y) = x.BranchLength.Compare(y.BranchLength);

  TimelineNodes = GetTimes(Info.LanguageTree).Sort(true, ByYear);

  TimelineRow(options, node) = HBox {
    X: options.Width - options.Width * node.BranchLength / options.MaxYear;
    Figure {
      Fill: Colors.Green;
      Rectangle(Rect(Point(0), Size(5, options.TextHeight)))
    };
    Paragraph {
      Space;
      node.Label;
    }
  };

  NumberedList = ListBlock {
    ParAlignment: ParAlignments.Justify;
    LeftIndent: 0.5 inches;
    FirstIndent: -0.25 inches;
    Marker: i => "{0}."(i+1);
  };

  ReadTree(title, path) {
    var data = IO.Read(path, FileFormats.Nexus);
    return Style.ShowTree(title, Lang.ChangesPerBranch, data.trees.TREE1);
  }

  TreeOptions = Tree {
    TextHeight: 10 pts;
    Style.SansSerif;
    NodeGap: 6 pts;
    Width: 5 inches;
    Curvature: 30%;
    Bevel: 20%;
    Marker: {Style.IPAFamily; TextHeight: 4 pts; TextColor: Colors.Gray} Chars.blackcirc;
  };

  ShowTree(title, axis, root) = VBox {
    Corner: 8 pts;
    MarginB: 20 pts;
    PaddingLR: 15 pts;
    Border: 0.5 pts {Color: 90%};
//    Background: 98%;
    Paragraph {
      HAlignment: HAligns.Center;
      TextHeight: 14 pts;
      Bold;
      title;
    };
    TreeOptions {
      Width: DocMetrics.TreeWidth - 30 pts;
      ValueLabel: axis;
      ValueAxis: ChartAxis;
      Root: root;
    };
  };

  ShowContent(content) = Block {
    Header1(content.Title);
    Block {
      content.Body;
    }
  };

  ShowAuthorFull(author) = Block {
    LeftIndent: 0.25 inches;
    Paragraph {
      LocationMark: author.GlobalVariablePath;
      FirstIndent: -0.25 inches;
      Span {
        Separator: Space;
        if (exists author.Website)
          Link: author.Website;
        author.First;
        author.Middle;
        author.Last;
      };
    };
    Span {
      Separator: ", ";
      author.Address
    };
    Span {
      "{0}: "(Lang.EMail);
      author.EMail;
    };
    Empty;
  };

  AppendixRow(appendix) = Paragraph {
    LeftIndent: 20 pts;
    FirstIndent: -20 pts;
    EachIndex + 1;
    ".";
    Tab;
    Span {
      Link: Lang.Appendix + EachIndex;
      appendix.Title
    };
  };

  ShowAuthors(authors) = Block {
    HeaderCentered(Lang.Authors);
    ShowAuthorFull(each authors);
  };

  ShowReference(r) = Paragraph {
    LeftIndent: 0.25 inches;
    FirstIndent: -0.25 inches;
    if (exists r.Author) {
      TitleCase(r.Author);
      if (exists r.Title) {
        ", ";
        r.Title;
      }
    }
    else
      r.Title;

    if (exists r.Year) {
      ", ";
      r.Year;
    }
    if (exists r.Publisher) {
      ", ";
      Italic r.Publisher;
      r.?Page;
    }
    if (exists r.?Link) {
      ". : ";
      Span {
        Link: r.Link;
        TextColor: Colors.DarkBlue;
        r.Link;
      };
    }
  };

  ShowReferences(references) = Block {
    HeaderCentered(Lang.References);
    ShowReference(each references)
  };

  ShowAppendix(appendix) = PageSection {
    Header: Block {
      Paragraph {
        BorderB: 1 pts;
        ParAlignment: ParAlignments.Center;
        TextHeight: 14 pts;
        SpaceAfter: 8 pts;
        LocationMark: Lang.Appendix + EachIndex;
        "{0} {1} - "(Lang.Appendix, EachIndex+1);
        appendix.Title;
      };
    };
    Block {
      appendix.Content;
    };
  };

  LanguageRow(lang) = Row {
    Background: ((EachIndex mod 2) == 0 ? Colors.White : 97%);
    lang.GlobalVariableName;
  };

  ShowLanguageList(list) = Table {
    PaddingLR: 2;
    Columns: [1.5 inch];
    Row {
      Background: Colors.DarkGray;
      TextColor: Colors.White;
      Lang.Name;
    };
    Edge: 0.25 pts {Color: Colors.DarkGray};
    LanguageRow(each list)
  };

  HeaderCell(d, halign=HAligns.Left) = Cell {
    HAlign: halign;
    VAlign: VAligns.Center;
    Style.SansSerif;
    Style.TitleBackground;
    EdgeB: 1 pts;
    Padding: 2 pts;
    d
  };

  TitleBar(name, columns) = Row {
    Cell {
      Padding: 2 pts;
      ParAlignment: ParAlignments.Center;
      Background: 40%;
      TextHeight: 16 pts;
      TextColor: Colors.White;
      ColSpan: columns;
      name
    }
  };

  BulletList = ListBlock {
    Marker: Chars.bullet;
    LeftIndent: 24 pts;
    FirstIndent: -16 pts;
  };

  NumberList = ListBlock {
    Marker: i => (i+1) ".";
    LeftIndent: 24 pts;
    FirstIndent: -16 pts;
  };

  BodyPar = Paragraph {
    TextHeight: 10.5 pts;
    ParAlignment: ParAlignments.Justify;
    SpaceBefore: 6 pts;
  };

  BodyTable = Table {
    SpaceBefore: 10 pts;
    LeftIndent: 0.5 inches;
  };

  BodyTitle = Span {
    Bold;
  };

  NeedsReview(text) = InParens {
    TextColor: Colors.Red;
    text;
  };

  FigureBody = Paragraph {
    KeepWithNext: true;
    ParAlignment: ParAlignments.Center;
    SpaceBefore: 6 pts;
  };

  Equation = HBox {
    TextEquation: true;
  };

  EquationPar = Paragraph {
    SpaceBefore: 10 pts;
    TextEquation: true;
    TextStacked: true;
    ParAlignment: ParAlignments.Center;
  };

  FigureLabel = Paragraph {
    TextHeight: 12 pts;
    ParAlignment: ParAlignments.Center;
    SpaceBefore: 6 pts;
  };

  FigureName(figure) = Span {
    Lang.Figure;
    Space;
    figure.Number;
  };

  DocumentFigure(figure, textheight=null) = Block {
    FigureBody {
      TextHeight: textheight;
      figure.Body;
    };

    FigureLabel {
      TextHeight: 10 pts;
      FigureName(figure);
      ": ";
      figure.Caption;
    };
  };

  SlideFigure(figure, textheight=null) = Block {
    Paragraph {
      figure.Caption;
    };
    Block {
      ParAlignment: ParAlignments.Center;
      TextHeight: textheight;
      figure.Body;
    }
  };
}
//======================================================================

Logo = Frame {
  Size: Size(5 inches, 0.5 inches);
  Padding: 4 pts;
  Background: Color(51, 66, 81);
  Table {
    Columns: [4.3 inches, 0.6 inches];
    Row {
      Cell {
        Paragraph {
          TextColor: Color(129, 166, 207);
          Bold;
          TextHeight: 12 pts;
          "Transactions of the";
        };
        Paragraph {
          Bold;
          TextHeight: 20 pts;
          TextColor: Colors.White;
          "Bayesian Society"
        };
      };
      Cell {
        Read(Folders.Source FileName("bayes") Extensions.PNG) {Width: 0.5 inches}
      };
    }
  }
};
//======================================================================

abstract class BaseViewClass: DocumentViewClass {
  Constructor(name) {
    super.Constructor(name, name ShowOutput);
  }

  DocMetadata = {
    Size: DocMetrics.DocumentSize;
    Margin: DocMetrics.PageMargin;
    Style.MainFamily;

    Title: Info.Title;
    Author: Info.AuthorList;
//  Description: "Test Description";
//  Comment: "Test Comment";
//  Subject: "Test Subject";
//  Keywords: "Test Keywords";
  };

  FixedFrame(x, y, width, height) = Frame {
    HRelative: HRelatives.Page;
    VRelative: VRelatives.Page;
    Wrapping: Wrappings.BehindText;
    X: x;
    Y: y;
    Width: width;
    Height: height;
  };

  Design(width, height, right, bar) = Canvas {
    Height: height;

    var x0 = 0;
    var y0 = 0;
    var t  = 0.10 height;
    var x1 = 0.80 width;
    var x2 = 0.90 width;
    var p1 = Point((x2 + x1)*0.5, height * (right ? 0.25 : 0.75));

    Figure {
      Fill: bar;
      FigurePath {
        Closed: true;
        LineTo(x0, t);
        LineTo(x1, t);
        QuadTo(p1, Point(x2, height));
        LineTo(x2, height);
        LineTo(x0, height);
      }
    };

    Figure {
      Fill: Style.RightBar;
      FigurePath {
        Closed: true;
        LineTo(x1, y0);
        LineTo(width, y0);
        LineTo(width, height-t);
        LineTo(x2, height-t);
        QuadTo(p1, Point(x1, y0));
      }
    };

    Figure {
      Fill: Style.BarLine;
      FigurePath {
        Closed: true;
        MoveTo(x0, y0);
        LineTo(x1, y0);
        QuadTo(p1, Point(x2, height-t));
        LineTo(width, height-t);
        LineTo(width, height);
        LineTo(x2, height);
        QuadTo(p1, Point(x1, t));
        LineTo(x0, t);
      }
    };
  };

  HeaderBackground(title, width, height) = Design(width, height, true, Style.HeaderBar1..Style.HeaderBar2) {
    Frame {
      Width: 0.75 width;
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Paragraph {
        TextHeight: 30 pts;
        TextColor: Colors.White;
        title;
      };
    };
  };

  FooterBackground(title, width, height, page) = Design(width, height, false, Style.LeftBar) {
    Frame {
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Width: DocMetrics.PageContent.Width;
      Paragraph {
        TabStops: [(DocMetrics.PageContent.Width) {Type: TabTypes.Right}];
        TextHeight: 16 pts;
        Span {
          TextColor: 75%;
          title
        };
        Tab;
        Span {
          TextColor: Style.HeaderBar1;
          page;
        }
      }
    }
  };

  AddSlideBlock(slide, page) = Block {
    Paragraph {
      PageBreakBefore: true;
      FixedFrame(0, 0, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader) {
        HeaderBackground(slide.Title, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader)
      };
      FixedFrame(0, DocMetrics.DocumentSize.Height - DocMetrics.SlideFooter, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter) {
        FooterBackground(Info.Title, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter, page);
      };
    };
    slide.Body;
  };
}
//======================================================================

