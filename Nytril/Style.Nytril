using Format, Units, Math, IO
//======================================================================

with Metrics {
  let MarginL = 0.75 inches
  let MarginR = MarginL
  let MarginT = 0.5 inches
  let MarginB = 0.4 inches
  let Paper   = Type.Size(8.5 inches, 11 inches)
  let Content = Type.Size(Paper.Width - MarginL - MarginR, Paper.Height - MarginT - MarginB)
  let TableSpace = 24 pts
}
//======================================================================

with Style {
  let ImpossibleBackground = {Background: 80%}
  let IPAFamily            = {TextFamily: "Arial Unicode MS"}//            = TextFamilies.CambriaMath
  let SansSerif            = {TextFamily: TextFamilies.Arial}
  let Used                 = {TextColor: Colors.Red}
  let TitleBackground      = {Background: 90%}
  let TableEdge            = {Edge: 0.3 pts}
  let ColumnEdge           = {EdgeR: 0.3 pts}
  let SoundBottom          = {EdgeB: 0.25 pts {Color: 80%}}

  let RowBar(i) = {
    if (i mod 2 != 0)
      Background: 95%
    end
  }

  let WhitePaper = Document {
    Size: Metrics.Paper,
    TextFamily: TextFamilies.TimesNewRoman,
    TextHeight: 11.5 pts,
    MarginL: Metrics.MarginL,
    MarginR: Metrics.MarginR,
    MarginT: Metrics.MarginT,
    MarginB: Metrics.MarginB,
  }

  let NormalHeader(text) = Block {
    Span {{TextUppercase: true} text}
  }

  let PageSection = Section {
    SectionBreak: SectionBreaks.NextPage,
    Footer: Block {
      Distance: 0.5 inches,
      ParAlignment: ParAlignments.Center,
      PageNumber
    },
  }

  let TableNotes = Paragraph {
    SpaceAfter: Metrics.TableSpace,
  }

  let TitleWord(text, height) = Span {
    {TextHeight: height pts} text[0],
    {TextHeight: height * 0.6 pts} text[1..]
  }

  let TitleCase(text, height) = {
    if (text)
      return Span {
        TextUppercase: true,
        Separator: Space,
        TitleWord(each text.Split(Space), height)
      }
    else
      return null;
    end
  }

  let Title(text) = Paragraph {
    KeepWithNext: true,
    SpaceBefore: 12 pts,
    SpaceAfter: 6 pts,
    ParAlignment: ParAlignments.Center,
    TextHeight: 14 pts,
    text
  }

  let HeaderCentered(text) = Paragraph {
    KeepWithNext: true,
    SpaceBefore: 12 pts,
    SpaceAfter: 6 pts,
    ParAlignment: ParAlignments.Center,
    TitleCase(text, 14)
  }

  let Header1(text) = Paragraph {
    KeepWithNext: true,
    SpaceBefore: 18 pts,
    SpaceAfter: 8 pts,
    TitleCase(text, 14)
  }

  let Header2(text) = Paragraph {
    KeepWithNext: true,
    SpaceBefore: 12 pts,
    SpaceAfter: 6 pts,
    TextHeight: 14 pts,
    text
  }

  let Header3(text) = Paragraph {
    KeepWithNext: true,
    Border: 0.25 pts,
    ParBackground: 97%,
    SpaceAfter: 12 pts,
    TextHeight: 14 pts,
    text
  }

  let SourceFile(source) = Block {
    Style.Header3(source.Path.GetFileName),
    Paragraph {
      LeftIndent: 0.25 inches,
      ParAlignment: ParAlignments.Left,
      TextFamily: TextFamilies.Consolas,
      TextHeight: 8 pts,
      SourceSelection(source)
    }
  }

  let SourceCodeBlock = TextBlock {
    TextFamily: TextFamilies.Consolas,
    TextHeight: 10 pts,
    ParBackground: 97%,
  }

  let Author(author) = Span {
    Link: author.FullSymbolName,
    author.Title,
  }

  let DataLabel(node) = node.Data.Name

  let ShowTree(tree) = Tree {
//    TextHeight: 5.5 pts,
    Label: DataLabel,
    Curvature: 30%,
    Bevel: 20%,
    Marker: {TextFamily: TextFamilies.CambriaMath, TextHeight: 4 pts}Chars.Circle {TextColor: Colors.Gray},
    Width: 6 inches,
    tree
  }

  let ShowAbstract(content) = Block {
    HeaderCentered(content.Title),
    Block {
      content.Body
    }
  }

  let ShowContent(content) = Block {
    Header1(content.Title),
    Block {
      content.Body
    }
  }

  let ShowReference(r) = Paragraph {
    LeftIndent: 0.25 inches,
    FirstIndent: -0.25 inches,
    if (r.Author)
      Span {
        Separator: ", ",
        TitleCase(r.Author, 12),
        r.Title,
        r.Year,
      }
    end,
    if (r.Publisher)
      Span {
        ", ",
        Separator: Space,
        Italic r.Publisher,
        r.Page,
      }
    end,
    if (r.Link)
      ". {0}: "(Lang.AvailableAt),
      Span {Link: r.Link, TextColor: Colors.DarkBlue, r.Link}
    end,
  }

  let ShowAuthorFull(author) = Block {
    LeftIndent: 0.25 inches,
    Paragraph {
      LocationMark: author.FullSymbolName,
      FirstIndent: -0.25 inches,
      Span {
        Separator: Space,
        if (author.Website)
          TextColor: Colors.Blue,
          Link: author.Website,
        end,
        author.First, author.Middle, author.Last,
      }
    },
    Span {
      Separator: ", ",
      author.Address
    },
    Span {"{0}: "(Lang.EMail), author.EMail},
    Empty
  }

  let AppendixRow(appendix) = Row {
    Cell {
      Span {EachIndex + 1, ")"}
    },
    Cell {
      Span {
        Link: appendix.FullSymbolName,
        appendix.Title
      }
    }
  }

  let ShowAppendixTable = Block {
    HeaderCentered(Lang.Appendices),
    Table {
      Columns: [15 pts, 5 inches],
      AppendixRow(each Appendix)
    }
  }

  let ShowAuthors(authors) = Block {
    HeaderCentered(Lang.Authors),
    ShowAuthorFull(each authors),
  }

  let ShowReferences(references) = Block {
    HeaderCentered(Lang.References),
    ShowReference(each references)
  }

  let ShowAppendix(appendix) = PageSection {
    Paragraph {
      BorderB: 1 pts,
      ParAlignment: ParAlignments.Center,
      TextHeight: 14 pts,
      SpaceAfter: 8 pts,
      "{0} {1} - "(Lang.Appendix, EachIndex+1),
      LocationMark: appendix.FullSymbolName,
      appendix.Title,
    },
    Block {
      appendix.Content
    }
  }

  let LanguageRow(lang) = Row {
    Background: ((EachIndex mod 2) == 0 ? Colors.White : 97%),
    lang.Name,
  }

  let ShowLanguageList(list) = Table {
    PaddingLR: 2,
    Columns: [1.5 inch],
    Row {
      Background: Colors.DarkGray,
      TextColor: Colors.White,
      Lang.Name,
    },
    Edge: 0.25 pts {Color: Colors.DarkGray},
    LanguageRow(each list)
  }

  let HeaderCell(d) = Cell {
    HAlign: HAligns.Center,
    VAlign: VAligns.Center,
    Style.SansSerif,
    Style.TitleBackground,
    EdgeB: 1 pts,
    Padding: 2 pts,
    d
  }

  let TitleBar(name, columns) = Row {
    Cell {
      Padding: 2 pts,
      ParAlignment: ParAlignments.Center,
      Background: 40%,
      TextHeight: 16 pts,
      TextColor: Colors.White,
      ColumnSpan: columns,
      name
    }
  }
}
//======================================================================

with DisplayWords {
  let WordRow(word) = Row {
    Cell {
      Style.SansSerif,
      Style.TitleBackground,
      WordMeanings.GetReference(word.Meaning).SymbolName
    },
    Cell {
      word.Text
    },
    Cell {
      Span {
        TextFamily: TextFamilies.Consolas,
        Separator: ", ",
        each word.Text
      }
    }
  }

  let HeaderCell(d) = Cell {
    Style.SansSerif,
    Style.TitleBackground,
    EdgeB: 1 pts,
    Padding: 2 pts,
    d
  }

  let WordTable(language) = Block {
    Table {
      Columns: [0.8 inches, 0.7 inches, Metrics.Content.Width - 2 inches],
      Style.TitleBar(language.Name, 3),
      Row {
        HeaderCell(Lang.Meaning),
        HeaderCell(Lang.Text),
        HeaderCell(Lang.Encoding),
      },
      WordRow(each language.Words)
    },
    Style.TableNotes {
    }
  }

  let LangHasWords(language) = language.Words != null
  let LanguageList           = Languages.FindSlice(LangHasWords)

  let WordListTable = Block {
    WordTable(each LanguageList),
  }
}
//======================================================================

with AllWords {
  let LangHasMeaning(word, data) = word.Meaning == data.Meaning

  let MeaningCell(meaning, language) {
    var list = language.Words.FindSlice(LangHasMeaning {Meaning: meaning});
    if (list.Length > 0)
      Cell {
        (each list).Text
      }
    else
      Cell {}
    end
  }

  let WordRow(meaning) = Row {
    Style.RowBar(EachIndex),
    Cell {
      Style.TitleBackground,
      Style.SansSerif,
      EachSymbol.SymbolName
    },
    MeaningCell(meaning, each DisplayWords.LanguageList)
  }

  let HeaderCell(d) = Cell {
    Style.SansSerif,
    Style.TitleBackground,
    EdgeB: 1 pts,
    Padding: 2 pts,
    d
  }

  let LanguageHeader(language) = HeaderCell(language.Name)

  let Column1 = 36 pts

  let WordListTable = Block {
    Table {
      TextHeight: 7 pts,
      Columns: [Column1, (Metrics.Content.Width - Column1) / DisplayWords.LanguageList.Length],
      Style.TitleBar("Words in each language by meaning", DisplayWords.LanguageList.Length+1),
      Row {
        HeaderCell({TextColor: Colors.DarkGray} Lang.Meaning),
        LanguageHeader(each DisplayWords.LanguageList),
      },
      WordRow(each WordMeanings)
    },
    Style.TableNotes {
    }
  }
}
//======================================================================

let Logo = Frame {
  Width: 5 inches,
  Height: 0.5 inches,
  Padding: 4 pts,
  Background: Type.Color(51, 66, 81),
  Table {
    Columns: [4.3 inches, 0.6 inches],
    Row {
      Block {
        "Transactions of the" {TextColor: Type.Color(129, 166, 207), Bold, TextHeight: 12 pts},
        "Bayesian Society" {Bold, TextHeight: 20 pts, TextColor: Colors.White}
      },
      Read(Folders.Source FileName("bayes") Extensions.PNG) {Width: 0.5 inches}
    }
  }
}
//======================================================================

