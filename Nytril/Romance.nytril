using WordGroups, Languages;

namespace Trial;

//======================================================================

NodeClass GetPriorTree(portuguese) = new Branch {
  new Leaf(Latin);
  new Branch {
    new Leaf(Romanian);
    new Branch {
      new Branch {
        new Branch {
          new Leaf(Walloon);
          new Leaf(French);
        };
        new Branch {
          new Branch {
            portuguese;
            new Leaf(Spanish);
          };
          new Leaf(Catalan);
        }
      };
      new Branch {
        new Leaf(Friulian);
        new Leaf(Italian);
      }
    }
  }
};

//======================================================================

LanguageClass[] Romance = [Latin, Romanian, Portuguese, Spanish, Catalan, French, Walloon, Friulian, Italian];

class EuropeBrazilExperimentClass: ExperimentClass {
  Constructor {
    super.Constructor(#8bbc5666-8f8d-49d9-b67d-fc12321ace43#, "EuropeBrazil", "Europe and Brazil", Swadesh100 Leipzig Swadesh207, Romance + [PortugueseB], 3);
  }

  Extra = new Branch {
    new Leaf(Portuguese);
    new Leaf(PortugueseB);
  };

  override NodeClass PriorTree = GetPriorTree(Extra);

  NodeClass NExtra = new NBranch(12) {
    new NLeaf(Data, Portuguese, 1);
    new NLeaf(Data, PortugueseB, 1);
  };

  override NodeClass NumberedTree = GetNumberedTree(NExtra);
}

//======================================================================

class EuropeFullExperimentClass: ExperimentClass {
  Constructor {
    super.Constructor(#ca9b67db-c29e-4fc9-a421-8dc4fe82d370#, "EuropeFull", "Europe - Complete Cognate Sets", Swadesh100 Leipzig Swadesh207, Romance, -1);
  }

  override NodeClass PriorTree = GetPriorTree(new Leaf(Portuguese));

  override NodeClass NumberedTree = GetNumberedTree(new NLeaf(Data, Portuguese, 2));
}

//======================================================================


