using Format, IO, Math, DB;

include "../data/swadesh/wordtransform";
//===========================================================================

Main.Documents = [
  new DocumentVarClass(#90cf49d6bdc4c94aa0ea64db780293a8#, "Test", ref Watch),
];

Watch = Document {
  GetConcepts;
};

Main.Run = IO.Write(GetConcepts, Folders.Source FileName("Concepts") Extensions.Nytril, FileFormats.Text);
//===========================================================================

class CollectClass {
  var Language,
      Concept,
      Word,
      Comment;

  Constructor(language, concept, word, comment) {
    Language = language;
    if (concept != "TongueOrgan" and concept != "Tooth" and concept[0..1] == "To")
      Concept  = "To" + ToUpper(concept[2]) + concept[3..];
    else
      Concept = concept;

    Word    = word;
    Comment = comment;
  }

  CleanComment(comment) {
    return Substitute(comment, FindIndex(comment, c => c == "|"), "\"");
  }

  Output(words) = TextBlock {
    Paragraph {
      "with Concepts.";
      Concept;
      " {"
    };

    "  with Primary {";

    foreach (var word in words) {
      if (valid word.Word) {
        if (each0 > 0)
          Empty;
        Paragraph {
          "    ";
            word.Language;
          " = [";
        };

        Paragraph {
          "      \"";
          word.Word;
          "\",";

          if (valid word.Comment) {
            Space * (20 - word.Word.Length);
            "// ";
            CleanComment(word.Comment);
          }
        };

        "    ];";
      }
    }

    "  }";
    "}";
    Empty;
  };
}
//===========================================================================

void Collect(list, concepts) {
  foreach (var language in WordList) {
    foreach (var concept in language) {
      var w = new CollectClass(language.GlobalVariableName, concept.GlobalVariableName, concept.Word, concept.?Comment);
      list.Add(w);
      concepts.Add(w, w.Concept);
    }
  }
}

GetWordList(list, concept) {
  return FindSlice(list, w => concept == w.Concept);
}

GetWords(list, concepts) = TextBlock {
  foreach (var word in concepts.Values) {
    TextBlock {
      "//" + "=" * 50;
      Empty;
      word.Output(GetWordList(list, word.Concept));
    }
  }
};

GetConcepts = TextBlock {
  var list     = new ListClass(3000);
  var concepts = new DictionaryClass(300);
  Collect(list, concepts);
  GetWords(list.ToArray(), concepts);
};
//===========================================================================

