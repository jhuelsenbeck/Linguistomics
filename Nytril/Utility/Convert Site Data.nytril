using Format, Units, IO, DB;

//================================================================

class MyDocClass: DocumentClass {
  Constructor {
    super.Constructor(#2f91b3da-1566-4591-bcc7-1ec7b798a87f#, "Convert Site Data");
  }

  override GetDocument = Document {
    new Convertlass().ShowDoc;
  };

//void Out {
//  IO.Write(Schema.ShowDoc, Folders.Source Folders.Up IO.Folder("Concepts") FileName("Phonetic.nytril"));
//}
}

//================================================================

Main.Documents.MainDocument = new MyDocClass;

//================================================================

class WordClass {
  var Language,
      Text,
      Spelling;

  Constructor(language, text, spelling) {
    Language = language;
    Text     = text;
    Spelling = spelling;
  }
}

//================================================================

class ConceptClass {
  var                            Name;
  var StringDictionaryClass<WordClass> Words;

  Constructor(name) {
    Name  = name;
    Words = new StringDictionaryClass<WordClass>(16);
  }
}

//================================================================

class LogRecordClass {
  var Language,
      Concept,
      Text,
      Spelling;
}

//================================================================

class Convertlass {
  var StringDictionaryClass<ConceptClass> Concepts;

  Constructor {
    Concepts = new(1024);
    var view = new ListClass<LogRecordClass>(1024);
    view.ReadTextFile(res "SoundComparisons Export.txt", true);

    foreach (var row in view) {
      var cname   = row.Concept;
      var concept = Concepts.GetValue(cname);
      if (concept is null) {
        concept = new ConceptClass(cname);
        Concepts.Add(concept, cname);
      }
      var word = new WordClass(row.Language, row.Text, row.Spelling);
      concept.Words.Add(word, word.Language);
    }
  }

  ShowDoc = TextBlock {
    "using Format, WordGroups;";
    Empty;
    "namespace Concepts;";

    foreach (var concept in Concepts) {
      ConceptClass c = concept.Value;
      "//==================================================";
      Empty;

      Span {
        "namespace ";
        TextCase: TextCases.FirstUpper;
        c.Name;
        " {";
      };
      "  Confidence = 10;";
      "  WordType   = WordTypes.Noun;";
      "  WordGroup  = Leipzig Swadesh100 Swadesh207;";
      Empty;
      "  namespace Primary {";

      var max = 0;
      foreach (var word in c.Words)
        max = Math.Max(max, word.Value.Text.Length);

      foreach (var word in c.Words) {
        var w = word.Value;
        var l = w.Language;
        Span {
          Space*4;
          l;
          Space * (20 - l.Length);
          "= \"";
          Span {
            Span {
              TextColor: Colors.DarkRed;
              TextFamily: TextFamilies.LinuxLibertineO;
              w.Text;
            };
            "\";";

            Space * Math.Max(0, (max - w.Text.Length + 2));


            if (w.Spelling is valid) {
              "  // ";
              w.Spelling;
            }
          }
        }
      }
      "  }";
      "}";
      Empty;
    }
  };
}

//================================================================
