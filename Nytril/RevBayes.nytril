using Format, Units, Math, IO, DB;
//======================================================================

with Rev {
  CommentChar   = "#";
  CommentSpace  = "  ";
  EndMarker     = ";";
  Quote         = "\"";
  TaxonFormat   = {TextColor: Colors.DarkBlue};
  CommentFormat = {TextColor: Colors.Green};
  KeywordFormat = {TextColor: Colors.Blue};

    // This is the set of characters used for the nexus file
  CharacterList = ('A'..'Z' step 1) + ('a'..'z' step 1) + ('0'..'9' step 1) + ['!', '$', '%', '&', '`', '+', ',', '.', '/', '<', '_', '=', '@', '*'];

  CommentBlock = TextBlock {
    Empty;
    TextColor: Style.CommentColor;
  };

  BlockComment(text) = CommentBlock {
    var bar = CommentChar * (text.Length + (1 + CommentSpace.Length)*2);
    bar;
    Span {
      CommentChar CommentSpace;
      text;
      CommentSpace CommentChar;
    };
    bar;
  };

  LineComment(text) = CommentBlock {
    CommentChar Space text;
  };

  ShowString(text) = Span {
    TextColor: Style.StringColor;
    Quote;
    text;
    Quote;
  };

  PathPlus(name) = Span {
    "path+";
    ShowString(name);
  };


  Variable(v) = Span {
    TextColor: Style.VariableColor;
    Quote; v; Quote; ": ";
  };

  ArraySpan(v) = Span {
    Begin: Variable(v) {"["};
    End: "],";
  };

  Keyword(name) = Span {
    KeywordFormat;
    name;
  };

  Comment(text) = Span {
    CommentFormat;
    "[ ";
    text;
    " ]";
  };

  AddLine(name) = Span {
    Keyword(name);
    End: EndMarker;
  };

  AddValue(name, value=null) = Span {
    Space;
    Keyword(name);
    if (exists value) {
      "=";
      value;
    }
  };

  AddTaxon(taxon) = Span {
    TaxonFormat;
    Space;
    taxon.Variable;
  };

  Scope(name) = TextBlock {
    IndentSpace: 2;
    Begin: Span {
      Keyword("begin");
      Space;
      name;
      EndMarker;
    };
    End: Span {
      Keyword("end");
      EndMarker;
      LineBreak;
    };
  };

  NexusFile = TextBlock {
    Style.MonoFamily;
    Keyword("#NEXUS");
  };

  Newick(node) = Span {
    if (node.HasChildren) {
      "(";
      Span {
        Separator: ",";
        Newick(each node);
      };
      ")";
    }
    node.Label;
    if (node.BranchLength != 1.0) {
      ":";
      node.BranchLength;
    }
  };

  ShowTreeLine(tree) = Span {
    "tree ";
    tree.GlobalVariableName;
    " = ";
    Newick(tree);
    EndMarker;
  };
}
//======================================================================

class RevProcessClass: ProcessClass {
  Constructor(exe, args) {
    super.Constructor(exe, args);
  }

  override void OutputLine(line) {
    System.WriteLine(line);
    var l = line[..5].FindSlice(c => c >= '0' and c <= '9');
    if (l.Length > 1) {
      var i = Integer(l);
      if (not i.IsError())
        System.ProgressPercent(i, Info.Generations);
    }
    else if (line.IndexOf("Error:") >= 0)
      System.ProgressCancel(line);
  }
}
//======================================================================

class BinClass {
  var Variable,
      Value,
      Name;

  Constructor(variable, value, name) {
    Variable = variable;
    Value    = value;
    Name     = name;
  }
}
//======================================================================

class LogSchemaClass: SchemaClass {
  Constructor {
    super.Constructor("log");
  }

  GetFieldList(view, f) {
    var list = new ListClass(view.Length);
    foreach (var row in view)
      list.Add(row.FindValue(f));
    return list.Values;
  }

  BinClass[] ReadHistogramData(view, f) {
    var list = GetFieldList(view, f);
    var min  = Floor(Min(list));
    var max  = Ceiling(Max(list));
    var d    = 0.125;
    var bins = Round((max - min) / d);
    var data = new ListClass(bins, BinClass);
    var x    = min;
    foreach (var i in 0..<bins) {
      var xd = x + d;
      data.Add(new BinClass(xd, list.FindCount(v => v >= x and v < xd), Span {x; TextDigits: 1}));
      x = xd;
    }
    return data.Values;
  }

  TitleBox(name) = Paragraph {
    HAlignment: HAligns.Center;
    TextHeight: 14 pts;
    name;
  };

  GetHistogram(view, f) = VBox {
    TitleBox(f + " Histogram");
    Chart {
      Size: Size(DocMetrics.TreeWidth, 3.5 inches);
      Type: ChartTypes.Column;

      var data = ReadHistogramData(view, f);

      XAxis: ChartAxis {
        (each data).Name;
      };
      ChartSeries {
        foreach (var d in data)
          new DataPointClass(EachIndex, d.Value) {Reference: d.Variable};
      };
    };
  };

  LineChart(view, name, f=null) = Paragraph {
    SpaceBefore: 20 pts;
    VBox {
      TitleBox(name ?? f);
      Chart {
        Size: Size(DocMetrics.TreeWidth, 2.5 inches);
        Type: ChartTypes.Line;

        var list = GetFieldList(view, f ?? name);

        XAxis: ChartAxis {
          each 0..<list.Length;
        };
        ChartSeries {
//          Marker: Tex.bullet {TextHeight: 3 pts; TextColor: Colors.Red};
          Stroke: 0.5 pts {MiterLimit: 2 pts};
          foreach (var l in list) {
            if (exists l)
              new DataPointClass(null, l);
          }
        };
      };
    };
  };
}
//======================================================================

