using Format, Units, Math, IO, LinkTypes;
//======================================================================

namespace PaperSizes {
  Letter = Size(8.5 inches, 11 inches);
  A4     = Size(210 millimeters, 297 millimeters);
}
//======================================================================

namespace DocMetrics if (PaperSystem == PaperSystems.US and DocumentType == DocumentTypes.Normal) {
  DocumentSize = PaperSizes.Letter;
  PageMargin   = Margin(0.75 inches, 0.9 inches, 0.75 inches, 1 inches);
}

namespace DocMetrics if (PaperSystem == PaperSystems.US and DocumentType == DocumentTypes.SlideShow) {
  DocumentSize = PaperSizes.Letter.Landscape;
  PageMargin   = Margin(0.5 inches, 1.5 inches, 0.5 inches, 0.75 inches);
}

namespace DocMetrics if (PaperSystem == PaperSystems.A and DocumentType == DocumentTypes.Normal) {
  DocumentSize = PaperSizes.A4;
  PageMargin   = Margin(20 millimeters);
}

namespace DocMetrics if (PaperSystem == PaperSystems.A and DocumentType == DocumentTypes.SlideShow) {
  DocumentSize = PaperSizes.A4.Landscape;
  PageMargin   = Margin(0.5 inches, 1.5 inches, 0.5 inches, 0.75 inches);
}
//======================================================================

namespace DocMetrics {
  PageContent     = DocumentSize - PageMargin - Size(Gutter, 0);
  TableSpace      = 24 pts;
  TreeWidth       = PageContent.Width;
  TreeFigureWidth = TreeWidth - 30 pts;
  BoxSize         = Size(18 pts, 20 pts);
  CellSize        = Size(BoxSize.Width * 2, BoxSize.Height);
  Gutter          = 0;
  SegmentColumns  = 4;
  SegmentSize     = 40 pts;
  SlideFooter     = 0.5 inches;
  SlideHeader     = 1 inches;
  SlideContent    = Size(PageContent.Width, PageContent.Height - SlideFooter);
}
//======================================================================

class AppendixClass {
  var Title,
      Content;

  Constructor(title, content) {
    Title   =  title;
    Content = content;
  }
}
//======================================================================

class DefClass: FactClass {
  field Name,
        Description;
  var   Symbol;

  Constructor(id, symbol, name, description=null) {
    super.Constructor(id);

    Symbol      = symbol;
    Name        = name;
    Description = description;
  }

  override GetLayoutDoc = Span {
    Hover: new HoverClass(this, HoverTypes.Tip);
    Symbol;
    Link to this;
  };

  override GetLayoutFact = GetLayoutTip;

  override GetLayoutTip = Block {
    Paragraph {
      TextHeight: 20 pts;
      Style.Equation {Symbol};
    };
    Paragraph {
      Bold; Name;
    };
    Description;
  };

  Appendix = Block {
    Paragraph {
      TextHeight: 16 pts;
      Style.Equation {Symbol};
      Tab;
      Name;
    };
    if (valid Description) {
      Paragraph {
        LeftIndent: 0.5 inches;
        SpaceAfter: 6 pts;
        Description;
      };
    }
  };
}
//======================================================================

class EquationClass: FactClass {
  field Name;
  var   Line;

  Constructor(id, name) {
    super.Constructor(id);
    Name = name;
  }

  override GetLayoutDoc = Span {
    Line;
    Link to this;
  };

  override GetLayoutFact = GetLayoutTip;

  override GetLayoutTip = Block {
    Paragraph {
      SpaceAfter: 10 pts;
      TextFamily: TextFamilies.Calibri;
      Bold;
      Name;
    };
    Paragraph {
      LeftIndent: 24 pts;
      GetLayoutDoc;
    }
  };
}
//======================================================================

Main.MathFamily = "Linux Libertine O";

namespace Style {
  ReferenceStyle       = new NatureStyleClass;
  MainFamily           = {TextFamily: TextFamilies.TimesNewRoman};
  SansSerif            = {TextFamily: TextFamilies.Arial};
  MonoFamily           = {TextFamily: TextFamilies.Consolas};
  IPAFamily            = {TextFamily: "Linux Libertine O"};
  GreekFamily          = IPAFamily;
  Classical            = {TextFamily: "CMU Classical Serif"};
  Extra                = {TextFamily: "CMU Serif Extra"};

  ImpossibleBackground = {Background: 80%};
  CommentColor         = Color(0, 0x64, 0);
  StringColor          = Color(168, 21, 53);
  NoteIndexIndent      = 6 pts;
  VariableColor        = Colors.DarkBlue;
  AlignBackColor       = 95%;
  Used                 = {TextColor: Colors.Red};
  TitleBackground      = {Background: 90%};
  TableEdgeSize        = 0.25 pts;
  TableEdge            = {Edge: TableEdgeSize};
  ColumnEdge           = {EdgeR: TableEdgeSize};
  SegmentBottom        = {EdgeB: TableEdgeSize {Color: 80%}};
  Logo1                = Color(0, 0, 0xFF);
  Logo1A               = Color(0, 0, 0xE0);
  Logo2                = Color(0xFF, 0xA5, 00);
  LightColor           = Colors.Orange;
  DarkColor            = Colors.DarkBlue;
  ArrowColor           = Colors.LightGray;
  HighlightColor       = Colors.Orange;
  TextColor            = Colors.Black;
  SectionBack          = DarkColor;
  SectionFore          = Colors.White;
  HeaderText           = Colors.White;
  SlideHeader          = Colors.SlateGray;
  Hyperlink            = Color(100, 42, 143);
  HeaderBar1           = Color(23, 54, 114);
  HeaderBar2           = 99%;
  RightBar             = null;
  LeftBar              = (90%)..(99%);
  BarLine              = LightColor;
  FooterBar1           = Color(223, 232, 249);
  FooterBar2           = Colors.White;
  TitleColor           = Colors.Orange;
  HeaderLeftBar        = HeaderBar1..HeaderBar2;
  HeaderRightBar       = (99%)..(90%);
  FooterLeftBar        = FooterBar1..FooterBar2;
  FooterRightBar       = FooterBar2..FooterBar1;
  AndSpace             = " and ";
  eos                  = ". ";
  Quote                = Span {Begin: "‘"; End: "’"};
  QuoteEnd             = Span {Begin: "‘"; End: ".’ "};
  DQuote               = Span {Begin: "“"; End: "”"};
  DQuoteEnd            = Span {Begin: "“"; End: ".” "};
  textit               = Span {Italic};
  TextIpa              = Span {IPAFamily; Begin:"/"; End:"/"};

  MainDocument = Document {
    RefStyle: ReferenceStyle;
    Size: DocMetrics.DocumentSize;
    Margin: DocMetrics.PageMargin;
    MainFamily;
    TextHeight: 9 pts;
  };

  MainTitle = Paragraph {
    SansSerif;
    TextHeight: 20 pts;
    Bold;
    SpaceAfter: 10 pts;
  };

  AppendixTitle = Paragraph {
    SansSerif;
    TextHeight: 16 pts;
    Bold;
    SpaceAfter: 10 pts;
  };

  FigureBody = Paragraph {
    ParAlignment: ParAlignments.Center;
    SpaceAfter: 6 pts;
  };

  FigureTable = Table {
    ParAlignment: ParAlignments.Center;
    SpaceAfter: 6 pts;
  };

  FigureCaption = Span;

  BranchMarker = Figure {
    Stroke: 1 pt {Color: Colors.Gray};
    Fill: Colors.White;
    Ellipse(Rect(Point(0), Size(3 pts, 2 pts)))
  };

  ShowFigureNumber(figure) = Span {
    Lang.Figure;
    Space;
    RefCounter("figure", figure.GlobalVariablePath);
  };

  FigureReference(figure) = ShowFigureNumber(figure) {
    Hover: new HoverClass(figure.GlobalVariablePath, HoverTypes.LocationMark, new FigureTipClass(figure));
  };

  ShowFigureDoc(figure) = Block {
    Paragraph {
      LocationMark: figure.GlobalVariablePath;
      SpaceBefore: 10 pts;
      SpaceAfter: 6 pts;
      KeepWithNext: true;
      Span {
        Bold;
        SansSerif;
        ShowFigureNumber(figure);
        eos;
      };
      figure.Caption;
    };

    FigureBody {
      figure.Body
    };
  };

  ShowTableNumber(figure) = Span {
    Lang.Table;
    Space;
    RefCounter("table", figure.GlobalVariablePath);
  };

  ShowFigureSlide(figure, format=null) = Block {
    figure.Caption;
    Paragraph {
      ParAlignment: ParAlignments.Center;
      format;
      figure.Body;
    }
  };

  ShowTable(table) = Block {
    table.Body {
      SpaceBefore: 10 pts;
      ParAlignment: ParAlignments.Center;
    };
    Paragraph {
      ParAlignment: ParAlignments.Center;
      SpaceBefore: 6 pts;
      SpaceAfter: 6 pts;
      Span {
        Bold;
        SansSerif;
        ShowTableNumber(table);
        eos;
      };
      table.Caption;
    };
  };

  ShowAuthor(PersonClass person) = Span {
    Link to person;
    CitationLib.GetFullName(person) {
      Bold;
      var site = person.FindFirstFact(WebsiteLink);
      if (valid site)
        Hover: new HoverClass(site.Value, HoverTypes.WebSecure);
    };

    Span {
      Separator: Comma;
      TextAlignment: TextAlignments.Superscript;
      EachOne;
      "+";
    };
  };

  ShowAuthorDetails(PersonClass person) = Block {
    var department = person.FindFirstFact(DepartmentLink);
    if (valid department) {
      LeftIndent: NoteIndexIndent;
      Paragraph {
        FirstIndent: -NoteIndexIndent;
        Span {
          TextAlignment: TextAlignments.Superscript;
          EachOne;
        };
        Tab;
        department.Name;
        CommaSpace;

        var org = department.FindFirstFact(DepartmentLink, true) ?? department;
        if (valid org) {
          if (org != department) {
            org.Name;
            CommaSpace;
          }
          CitationLib.ShowLocation(org, CommaSpace, true);
        }
      };
    }

    var email = person.FindFirstFact(WorkEmailLink);
    if (valid email)
      new HoverClass(email.Value, HoverTypes.Email);
  };

  ShowAuthorList(authors) = Block {
    TextFamily: TextFamilies.Arial;
    Paragraph {
      TextHeight: 12 pts;
      SpaceAfter: 10 pts;
      Separator: CommaSpace;
      LastSeparator: AndSpace;
      ShowAuthor(each authors);
    };

    Block {
      TextHeight: 10 pts;
      ShowAuthorDetails(each authors);
      Paragraph {
        LeftIndent: NoteIndexIndent;
        FirstIndent: -NoteIndexIndent;
        Span {
          TextAlignment: TextAlignments.Superscript;
          "+";
        };
        Tab;
        "these authors contributed equally to this work";
      };
    };
  };

  ShowAuthorFull(PersonClass person) = Block {
    LeftIndent: 0.25 inches;

    Paragraph {
      LocationMark: person.GlobalVariablePath;
      FirstIndent: -0.25 inches;
      CitationLib.GetFullName(person);
    };

    CitationLib.ShowLocation(person, CommaSpace, true);

    var email = person.FindFirstFact(WorkEmailLink);
    if (valid email) {
      Paragraph {
        Lang.EMail;
        ColonSpace;
        new HoverClass(email.Value, HoverTypes.Email);
      };
    }

    var site = person.FindFirstFact(WebsiteLink);
    if (valid site) {
      Paragraph {
        new HoverClass(site.Value, HoverTypes.WebSecure);
      };
    }
    Empty;
  };

  RowBar(i) = {
    if (i mod 2 != 0)
      Background: 95%;
  };

  PageSection = Section {
    SectionBreak: SectionBreaks.NextPage;
    Footer: Block {
      Distance: 0.5 inches;
      ParAlignment: ParAlignments.Center;
      PageNumber;
    };
  };

  ShowBibliography = Section {
    SectionBreak: SectionBreaks.NextPage;
    Format.Bibliography {
      Title: Lang.References;
    }
  };

  TableNotes = Paragraph {
    SpaceAfter: DocMetrics.TableSpace;
  };

  AnimalRow(a) = Row {
    TextHeight: 10 pts;
    a.GlobalVariableName;
    Cell {
      Span {
        Style.MonoFamily;
        a;
      }
      Tex.ldots;
    }
  };

  Header1 = Paragraph {
    KeepWithNext: true;
    SpaceBefore: 18 pts;
    SpaceAfter: 8 pts;
    SansSerif;
    TextHeight: 16 pts;
    Bold;
  };

  Header2 = Header1 {
    SpaceBefore: 12 pts;
    SpaceAfter: 6 pts;
    TextHeight: 14 pts;
  };

  Header3 = Paragraph {
    KeepWithNext: true;
    Border: 0.25 pts;
    ParBackground: 97%;
    SpaceAfter: 12 pts;
    TextHeight: 14 pts;
  };

  SourceFile(source) = Block {
    Style.Header3 {
      GetFileName(source.Path)
    };
    Paragraph {
      ParAlignment: ParAlignments.Left;
      Style.MonoFamily;
      TextHeight: 8 pts;
      SourceSelection(source)
    }
  };

  SourceCodeBlock = TextBlock {
    Style.MonoFamily;
    TextHeight: 10 pts;
    ParBackground: 97%;
  };

  Definition(s) = Span {
    Italic;
    s;
  };

  void Collect(list, node) {
    if (node.Label)
      list.Add(node, node.Label);
    Collect(list, each node);
  }

  GetTimes(node) {
    var list = new ListClass(128);
    Collect(list, node);
    return list[1..];
  }

  ByYear(x, y) = x.BranchLength.Compare(y.BranchLength);

//  TimelineNodes = GetTimes(Info.LanguageTree).Sort(true, ByYear);

  TimelineRow(options, node) = HBox {
    X: options.Width - options.Width * node.BranchLength / options.MaxYear;
    Figure {
      Fill: Colors.Green;
      Rectangle(Rect(Point(0), Size(5, options.TextHeight)))
    };
    Paragraph {
      Space;
      node.Label;
    }
  };

  NumberedList = ListBlock {
    ParAlignment: ParAlignments.Justify;
    LeftIndent: 0.5 inches;
    FirstIndent: -0.25 inches;
    Marker: i => "{0}."(i+1);
  };

  TreeOptions = Tree {
    TextHeight: 10 pts;
    NodeGap: 6 pts;
    Curvature: 30%;
    Bevel: 20%;
  };

  ShowTree(title, axis, root) = VBox {
    Corner: 8 pts;
    MarginB: 20 pts;
    PaddingLR: 15 pts;
    Border: 0.5 pts {Color: 90%};
    Paragraph {
      HAlignment: HAligns.Center;
      TextHeight: 14 pts;
      Bold;
      title;
    };
    TreeOptions {
      Width: DocMetrics.TreeFigureWidth;
      ValueLabel: axis;
      ValueAxis: ChartAxis;
      Root: root;
    };
  };

  ShowContent(content) = Block {
    Header2 {
      content.Title;
    };
    content.Body;
  };

  AppendixRow(appendix) = Paragraph {
    LeftIndent: 20 pts;
    FirstIndent: -20 pts;
    EachOne;
    ".";
    Tab;
    Span {
      Hover: new HoverClass(Lang.Appendix + EachIndex, HoverTypes.LocationMark);
      appendix.Title
    };
  };

  ShowAppendix(appendix) = PageSection {
    Header: Block {
      Paragraph {
        BorderB: 1 pts;
        ParAlignment: ParAlignments.Center;
        TextHeight: 14 pts;
        SpaceAfter: 8 pts;
        LocationMark: Lang.Appendix + EachIndex;
        "{0} {1} - "(Lang.Appendix, EachOne);
        appendix.Title;
      };
    };
    Block {
      appendix.Content;
    };
  };

  LanguageRow(lang) = Row {
    Background: ((EachIndex mod 2) == 0 ? Colors.White : 97%);
    lang.GlobalVariableName;
  };

  ShowLanguageList(list) = Table {
    PaddingLR: 2;
    Columns: [1.5 inch];
    Row {
      Background: Colors.DarkGray;
      TextColor: Colors.White;
      Lang.Name;
    };
    Edge: 0.25 pts {Color: Colors.DarkGray};
    LanguageRow(each list)
  };

  HeaderCell(d, halign=HAligns.Left) = Cell {
    HAlign: halign;
    VAlign: VAligns.Center;
    Style.SansSerif;
    Style.TitleBackground;
    EdgeB: 1 pts;
    Padding: 2 pts;
    d
  };

  TitleBar = Paragraph {
    SpaceBefore: 6 pts;
    Background: 40%;
    TextHeight: 16 pts;
  };

  BulletList = ListBlock {
    Marker: Tex.bullet;
    LeftIndent: 24 pts;
    FirstIndent: -16 pts;
  };

  NumberList = ListBlock {
    Marker: i => (i+1) ".";
    LeftIndent: 24 pts;
    FirstIndent: -16 pts;
  };

  FirstPar = Paragraph {
    ParAlignment: ParAlignments.Justify;
    SpaceBefore: 6 pts;
  };

  BodyPar = Paragraph {
    FirstIndent: 0.25 inches;
    ParAlignment: ParAlignments.Justify;
    SpaceBefore: 6 pts;
  };

  SourcePar(concept) = Paragraph {
    MonoFamily;
    ParAlignment: ParAlignments.Left;
    SpaceBefore: 6 pts;
    LeftIndent: 0.25 inches;
    TextHeight: 8 pts;
    SourceSelection(concept, SourceSelectOptions.Line SourceSelectOptions.Children);
  };

  BodyTable = Table {
    SpaceBefore: 10 pts;
    LeftIndent: 0.5 inches;
  };

  BodyTitle = Span {
    Bold;
  };

  NeedsReview(text) = InParens {
    TextColor: Colors.Red;
    text;
  };

  Equation = HBox {
    TextEquation: true;
  };

  EquationPar = Paragraph {
    SpaceBefore: 10 pts;
    TextEquation: true;
    TextStacked: true;
    ParAlignment: ParAlignments.Center;
    TextHeight: 12 pts;
  };
}
//======================================================================

abstract class BaseViewClass: DocumentClass {
  Constructor(id, name) {
    super.Constructor(id, name);
    Title = "Understanding Language Evolution Using an Event-Based Model";
  }

  abstract GetMainDocument(ResultsClass results);

  override GetDocument {
    AuthorLink to Authors;
    Link to References;

    return GetMainDocument(Results);
  }

  ShowSymbols = Block {
    (each Defs).Appendix;
  };

  FixedFrame(x, y, width, height) = Frame {
    HRelative: HRelatives.Page;
    VRelative: VRelatives.Page;
    Wrapping: Wrappings.BehindText;
    X: x;
    Y: y;
    Width: width;
    Height: height;
  };

  Design(width, height, right, bar) = Canvas {
    Height: height;

    var x0 = 0;
    var y0 = 0;
    var t  = 0.10 height;
    var x1 = 0.80 width;
    var x2 = 0.90 width;
    var p1 = Point((x2 + x1)*0.5, height * (right ? 0.25 : 0.75));

    Figure {
      Fill: bar;
      FigurePath {
        Closed: true;
        LineTo(x0, t);
        LineTo(x1, t);
        QuadTo(p1, Point(x2, height));
        LineTo(x2, height);
        LineTo(x0, height);
      }
    };

/*
    Figure {
      Fill: Style.RightBar;
      FigurePath {
        Closed: true;
        LineTo(x1, y0);
        LineTo(width, y0);
        LineTo(width, height-t);
        LineTo(x2, height-t);
        QuadTo(p1, Point(x1, y0));
      }
    };
*/
    Figure {
      Fill: Style.BarLine;
      FigurePath {
        Closed: true;
        MoveTo(x0, y0);
        LineTo(x1, y0);
        QuadTo(p1, Point(x2, height-t));
        LineTo(width, height-t);
        LineTo(width, height);
        LineTo(x2, height);
        QuadTo(p1, Point(x1, t));
        LineTo(x0, t);
      }
    };
  };

  HeaderBackground(title, width, height) = Design(width, height, true, Style.HeaderBar1..Style.HeaderBar2) {
    Frame {
      Width: 0.75 width;
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Paragraph {
        TextHeight: 30 pts;
        TextColor: Colors.White;
        title;
      };
    };
  };

  FooterBackground(title, width, height, page) = Design(width, height, false, Style.LeftBar) {
    Frame {
      VAlignment: VAligns.Center;
      X: DocMetrics.PageMargin.Left;
      Width: DocMetrics.PageContent.Width;
      Paragraph {
        TabStops: [(DocMetrics.PageContent.Width) {Type: TabTypes.Right}];
        TextHeight: 16 pts;
        Span {
          TextColor: 75%;
          title
        };
        Tab;
        Span {
          TextColor: Style.HeaderBar1;
          page;
        }
      }
    }
  };

  AddSlideBlock(slide, page) = Block {
    Paragraph {
      PageBreakBefore: true;
      FixedFrame(0, 0, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader) {
        HeaderBackground(slide.Title, DocMetrics.DocumentSize.Width, DocMetrics.SlideHeader)
      };
      FixedFrame(0, DocMetrics.DocumentSize.Height - DocMetrics.SlideFooter, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter) {
        FooterBackground(Title, DocMetrics.DocumentSize.Width, DocMetrics.SlideFooter, page);
      };
    };
    slide.Body;
  };
}
//======================================================================

class FigureTipClass {
  var Figure;

  Constructor(figure) {
    Figure = figure;
  }

  override GetLayoutTip = Style.ShowFigureDoc(Figure);
}

//======================================================================

