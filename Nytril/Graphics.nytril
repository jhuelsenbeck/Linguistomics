using Format, Math, Units, LinkTypes;
//======================================================================

Main.MathFamily   = TextFamilies.LinuxLibertineO;
Main.SymbolFamily = TextFamilies.CMUClassicalSerif;

//======================================================================

namespace NumberedGroup {
  Table  = "Table";
  Figure = "Figure";
}

//======================================================================

namespace DocMetrics {
  TableSpace        = 24 pts;
  BoxSize           = new SizeClass(18 pts, 20 pts);
  CellSize          = new SizeClass(BoxSize.Width * 2, BoxSize.Height);
  SegmentColumns    = 4;
  SegmentSize       = 40 pts;
  SegmentWidth      = 2 inches;
  SegmentTextFactor = 0.55;
}

CaptionOrTitle(DocumentClass doc, figure) = Span {
  if (exists figure.?Caption)
    return figure.Caption(doc);
  else
    return figure.?Title;
};

//======================================================================

class AppendixClass {
  var Title,
      Content;

  Constructor(title, content) {
    Title   =  title;
    Content = content;
  }

  virtual GetCaption(DocumentClass doc) = null;

  virtual GetBody(DocumentClass doc) = Content;
}
//======================================================================

class AppendixFigureClass: AppendixClass {
  var Figure;

  Constructor(figure) {
    super.Constructor(figure.Title, null);
    Figure = figure;
  }

  override GetCaption(DocumentClass doc) = Paragraph {
    CaptionOrTitle(doc, Figure);
  };

  override GetBody(DocumentClass doc) = Block {
    if (exists Figure.?Body)
      return Figure.Body(doc);
    else
      return Figure.?Text;
  };
}
//======================================================================

class DefClass: FactClass {
  field var Name,
            Description;
  var       Variable;

  Constructor(id, symbol, name, description=null) {
    super.Constructor(id);

    Variable    = Style.Equation {symbol};
    Name        = name;
    Description = description;
  }

  override IconClass GetIcon = Icons.subscript;

  override Compare(d, CompareOptions options) = Name.Compare(d.Name, options);

  override GetLayoutSpan = Span {
    Variable;
    TipAction: this;
    Link to this;
  };

  override GetLayoutFact = GetLayoutTip;

  override GetLayoutTip = Block {
    Paragraph {
      TextHeight: 20 pts;
      Variable;
    };
    Paragraph {
      Bold; Name;
    };
    Paragraph {
      Description;
    };
  };

  Appendix = Block {
    Paragraph {
      TextHeight: 16 pts;
      Variable;
      Tab;
      Name;
    };
    if (Description is valid) {
      Paragraph {
        LeftIndent: 0.5 inches;
        SpaceAfter: 6 pts;
        Description;
      };
    }
  };
}
//======================================================================

class EquationClass: FactClass {
  field var Name;
  var       Formula;

  Constructor(id, name) {
    super.Constructor(id);
    Name = name;
  }

  override IconClass GetIcon = Icons.functions;

  override GetLayoutSpan = Formula {
    Link to this;
  };

  override GetLayoutBlock = Style.EquationPar {
    Formula;
    Link to this;
  };

  override GetLayoutTip = Block {
    Paragraph {
      Style.SansSerif;
      SpaceAfter: 10 pts;
      Bold;
      Name;
    };
    Paragraph {
      LeftIndent: 24 pts;
      TextStacked: true;
      Formula;
    }
  };

  override GetLayoutFact = GetLayoutTip;
}
//======================================================================

class AuthorClass {
  PersonClass Person;
  var         EqualContribution;

  Constructor(PersonClass person, equal) {
    Person            = person;
    EqualContribution = equal;
  }
}
//======================================================================

namespace Style {
  SansSerif            = TextFamily: TextFamilies.Arial;
  IPAFamily            = TextFamily: TextFamilies.LinuxLibertineO;
  GreekFamily          = IPAFamily;
  Classical            = TextFamily: TextFamilies.CMUClassicalSerif;
  Extra                = TextFamily: TextFamilies.CMUSerifExtra;
  TaxonFormat          = TextColor: Colors.DarkBlue;
  CommentFormat        = TextColor: Colors.Green;
  KeywordFormat        = TextColor: Colors.Blue;
  Used                 = TextColor: Colors.Red;
  ImpossibleBackground = Background: 80%;
  TitleBackground      = Background: 90%;
  CommentColor         = new ColorClass(0, 0x64, 0);
  StringColor          = new ColorClass(168, 21, 53);
  NoteIndexIndent      = 6 pts;
  VariableColor        = Colors.DarkBlue;
  AlignBackColor       = 95%;
  TableEdgeSize        = 0.25 pts;
  TableBorder          = Border: TableEdgeSize;
  ColumnEdge           = Border: BorderR(TableEdgeSize);
  SegmentBottom        = Border: BorderB(new(TableEdgeSize, 80%));
  HighlightColor       = Colors.Orange;
  TextColor            = Colors.Black;
  SlideHeader          = Colors.SlateGray;

  eos                  = ". ";
  EqualContribution    = "†";
  SQuote               = Span {Begin: "‘"; End: "’"};
  SQuoteEnd            = Span {Begin: "‘"; End: ".’ "};
  DQuote               = Span {Begin: "“"; End: "”"};
  DQuoteEnd            = Span {Begin: "“"; End: ".” "};
  textit               = Span {Italic};
  TextIpa              = Span {IPAFamily; Begin:"/"; End:"/"};

  SizeClass BorderSize = new SizeClass(2, 2);


  MainTitle = Paragraph {
    SansSerif;
    TextHeight: 12 pts;
    Bold;
    SpaceAfter: 10 pts;
  };

  AppendixTitle = Paragraph {
    SansSerif;
    TextHeight: 12 pts;
    Bold;
    SpaceAfter: 10 pts;
  };

  LanguageTable = Table(PadAll(2)) {
    Border: BorderTB(2 pts);
  };

  LanguageTitleRow = Row {
    Border: BorderB(1 pts);
  };

  FigureTable = Table {
    ParAlignment: ParAlignments.Center;
    SpaceAfter: 6 pts;
  };

  FigureReference(figure) = Span {
    Lang.Figure;
    Space;
    DocFields.Reference(NumberedGroup.Figure, figure.GetVariable);
    TipAction: new FigureActionClass(figure);
  };

  TableReference(table) = Span {
    Lang.Table;
    Space;
    DocFields.Reference(NumberedGroup.Table, table.GetVariable);
    TipAction: new TableActionClass(table);
  };

  Keyword(text) = Span {
    Style.KeywordFormat;
    text;
  };

  Variable(text) = Span {
    TextColor: new ColorClass(43, 145, 175);
    text;
  };

  NameSpace(text) = Span {
    Keyword("namespace ");
    Variable(text);
    " {"
  };

  ShowFigureDoc(DocumentClass document, figure) = Block {

    var title = CaptionOrTitle(document, figure);
    var th    = GetLayoutSize(title).Height;
    Paragraph {
      SpaceBefore: 10 pts;
      SpaceAfter: 6 pts;
      KeepWithNext: true;

      Span {
        Bold;
        SansSerif;
        Lang.Figure;
        Space;
        DocFields.Sequence(NumberedGroup.Figure, figure.GetVariable);
        eos;
      };
      title;
    };

    Paragraph {
      ParAlignment: ParAlignments.Center;
      SpaceAfter: 6 pts;

      var extent = SetExtentSize(new(ExtentWidth, ExtentHeight - th*2));
      Frame {
        figure.Body(document);
      };
      SetExtent(extent);
    };
  };

  ShowTable(DocumentClass document, table, textheight=null) = Block {
    Paragraph {
      KeepWithNext: true;
      SpaceBefore: 10 pts;
      SpaceAfter: 10 pts;
      ParAlignment: ParAlignments.Center;

      Frame {
        table.Body(document) {
          TextHeight: textheight;
        };
      };
    };

    Paragraph {
      ParAlignment: ParAlignments.Center;
      SpaceAfter: 10 pts;
      Span {
        Bold;
        SansSerif;
        Lang.Table;
        Space;
        DocFields.Sequence(NumberedGroup.Table, table.GetVariable);
        eos;
      };
      CaptionOrTitle(document, table);
    };
  };

  Initials(name) {
    if (name is valid)
      return Span {name[0]; "."};
  }

  ShowInitials(PersonClass person) = Span {
    Link to person;
    TipAction: person;

    Initials(person.First);
    Initials(person.Middle);
    Initials(person.Last);
  };

  ShowPerson(PersonClass person) = CitationLib.GetFullName(person) {
    TipAction: person;
  };

  ShowAuthor(AuthorClass author) = Span {
    CitationLib.GetFullName(author.Person) {
      Bold;
      TipAction: author.Person.FindFirstFact(WebsiteLink);
    };

    Span {
      TextAlignment: TextAlignments.Superscript;
      Separator: Comma;
      each1;
      if (author.EqualContribution)
        EqualContribution;
    };
  };

  ShowAuthorDetails(AuthorClass author) = Block {
    var person     = author.Person;
    var department = person.FindFirstFact(DepartmentLink);
    LeftIndent: NoteIndexIndent;
    Paragraph {
      FirstIndent: -NoteIndexIndent;
      Span {
        TextAlignment: TextAlignments.Superscript;
        each1;
      };
      Tab;
      if (department is valid) {
        department.Name;
        CommaSpace;

        var org = department.FindFirstFact(DepartmentLink, true) ?? department;
        if (org is valid) {
          if (org != department) {
            org.Name;
            CommaSpace;
          }
          CitationLib.ShowLocation(org, CommaSpace, true);
        }
      }
      else
        person.FindFirstFact(WorkEmailLink)?.Value;

      TipAction: person.FindFirstFact(WorkEmailLink);
    }
  };

  ShowAuthorList(AuthorClass[] authors) = Block {
    Style.SansSerif;
    Paragraph {
      TextHeight: 12 pts;
      SpaceAfter: 10 pts;
      Separator: CommaSpace;
      LastSeparator: " and ";
      ShowAuthor(each authors);
    };

    Block {
      TextHeight: 10 pts;
      ShowAuthorDetails(each authors);
      Paragraph {
        LeftIndent: NoteIndexIndent;
        FirstIndent: -NoteIndexIndent;
        Span {
          TextAlignment: TextAlignments.Superscript;
          EqualContribution;
        };
        Tab;
        Lang.EqualContribution;
      };
    };
  };

  ShowAuthorFull(PersonClass person) = Block {
    LeftIndent: 0.25 inches;

    Paragraph {
      DocFields.Anchor(person.GetVariable);
      FirstIndent: -0.25 inches;
      CitationLib.GetFullName(person);
    };

    CitationLib.ShowLocation(person, CommaSpace, true);

    var email = person.FindFirstFact(WorkEmailLink);
    if (email is valid) {
      Paragraph {
        Lang.EMail;
        ColonSpace;
        email;
      };
    }

    var site = person.FindFirstFact(WebsiteLink);
    if (site is valid) {
      Paragraph {
        site;
      };
    }
    Empty;
  };

  RowBar(i) = {
    if (i mod 2 != 0)
      Background: 95%;
  };

  PageSection = Section {
    SectionBreak: SectionBreaks.NextPage;
    Footer: Block {
      Distance: 0.5 inches;
      ParAlignment: ParAlignments.Center;
      DocFields.PageNumber;
    };
  };

  ShowReferences = Section {
    SectionBreak: SectionBreaks.NextPage;
    Format.Bibliography(Lang.References);
  };

  TableNotes = Paragraph {
    SpaceAfter: DocMetrics.TableSpace;
  };

  AnimalRow(a) = Row {
    TextHeight: 10 pts;
    a.GetVariable.Name;
    Cell {
      Span {
        TextFixed: true;
        a;
      }
      Tex.ldots;
    }
  };

  override Header1 = Paragraph {
    KeepWithNext: true;
    SpaceBefore: 18 pts;
    SpaceAfter: 8 pts;
    SansSerif;
    TextHeight: 16 pts;
    Bold;
  };

  override Header2 = Header1 {
    SpaceBefore: 12 pts;
    SpaceAfter: 6 pts;
    TextHeight: 14 pts;
  };

  Header3 = Paragraph {
    KeepWithNext: true;
    Border: 0.25 pts;
    ParBackground: 97%;
    SpaceAfter: 12 pts;
    TextHeight: 14 pts;
  };

  SourceFile(source) = Block {
    Style.Header3 {
      IO.GetFileName(source.Path)
    };
    Paragraph {
      ParAlignment: ParAlignments.Left;
      TextFixed: true;
      TextHeight: 8 pts;
      SourceSelection(source)
    }
  };

  SourceCodeBlock = TextBlock {
    TextFixed: true;
    TextHeight: 10 pts;
    ParBackground: 97%;
  };

  Definition(s) = Span {
    Italic;
    s;
  };

  void Collect(list, node) {
    if (node.Label)
      list.Add(node, node.Label);
    Collect(list, each node);
  }

  GetTimes(node) {
    var list = new ListClass(128);
    Collect(list, node);
    return list[1..];
  }

  ByYear(x, y, options) = x.BranchLength.Compare(y.BranchLength);

//  TimelineNodes = GetTimes(Info.LanguageTree).Sort(true, ByYear);

  TimelineRow(options, node) = HBox {
    X: options.Width - options.Width * node.BranchLength / options.MaxYear;
    Figure(Colors.Green) {
      Rectangle(new(0, new(5, options.TextHeight)))
    };
    Paragraph {
      Space;
      node.Label;
    }
  };

  NumberedList = ListBlock {
    ParAlignment: ParAlignments.Justify;
    LeftIndent: 0.5 inches;
    FirstIndent: -0.25 inches;
    Marker: i => "{0}."(i+1);
  };

  BranchMarker = Figure(Colors.Black, new StrokeClass(1 pt, Colors.Gray)) {
    Ellipse(new(0, 1 pts))
  };

  TreeOptions(width) = Tree(width, null) {
    Style.SansSerif;
    TextHeight: 11 pts;
    Default: new NodeClass(null) {
      NodeGap: 5 pts;
      Curvature: 20%;
      Bevel: 20%;
      Marker: BranchMarker;
    };
  };

  ShowTree(title, subtitle, NodeClass root, axis) = VBox(null, null, PadLR(15 pts)) {
    BorderRadius: 8 pts;
    Margin: PadB(20 pts);
    if (title is valid) {
      Border:new EdgeClass(0.5 pts, 90%);
      Style.Header1 {
        HAlignment: HAligns.Center;
        title;
      };
      if (subtitle is valid) {
        Paragraph {
          TextHeight: 10 pts;
          HAlignment: HAligns.Center;
          subtitle;
        };
        Paragraph;
      }
    }

    TreeOptions(ExtentWidth - 30 pts) {
      Reorder: true;
      if (axis is valid) {
        ValueLabel: axis;
        ValueAxis: ChartAxis;
      }
      Root: root;
    };
  };

  AppendixRow(appendix) = Paragraph {
    LeftIndent: 20 pts;
    FirstIndent: -20 pts;
    each1;
    ".";
    Tab;
    Span {
      Action: new ActionClass(Actions.ToAnchor, Lang.Appendix + each0);
      appendix.Title
    };
  };

  ShowAppendix(DocumentClass doc, AppendixClass appendix) = PageSection {
    var th = 14 pts;
    var sa = 8 pts;

    Header: Block {
      Distance: 0.5 inches;
      Paragraph {
        Border: BorderB(1 pts);
        ParAlignment: ParAlignments.Center;
        TextHeight: th;
        SpaceAfter: sa;
        DocFields.Anchor(Lang.Appendix + each0);
        "{0} {1} - "(Lang.Appendix, each1);
        appendix.Title;
      };
    };
    var caption = Block {
      appendix.GetCaption(doc);
      Paragraph;
    };
    caption;
    var height = GetLayoutSize(caption).Height;
    var extent = SetExtentSize(new(ExtentWidth, ExtentHeight - height - th - sa - 8 pts));
    appendix.GetBody(doc);
    SetExtent(extent);
  };

  LanguageRow(lang) = Row {
    Background: ((each0 mod 2) == 0 ? Colors.White : 97%);
    lang.GetVariableName;
  };

  ShowLanguageList(list) = Table(PadLR(2)) {
    Columns: [1.5 inch];
    Row {
      Background: Colors.DarkGray;
      TextColor: Colors.White;
      Lang.Name;
    };
    Border: new EdgeClass(0.25 pts, Colors.DarkGray);
    LanguageRow(each list)
  };

  HeaderCell = Cell(PadAll(2 pts)) {
    VAlign: VAligns.Center;
    SansSerif;
    TitleBackground;
    Border: BorderB(1 pts);
  };

  TitleBar = Paragraph {
    SpaceBefore: 6 pts;
    Background: 40%;
    TextHeight: 16 pts;
  };

  BulletList = ListBlock {
    Marker: Tex.bullet;
    LeftIndent: 24 pts;
    FirstIndent: -16 pts;
  };

  NumberList = ListBlock {
    Marker: i => (i+1) ".";
    LeftIndent: 24 pts;
    FirstIndent: -16 pts;
  };

  FirstPar = Paragraph {
    ParAlignment: ParAlignments.Justify;
    SpaceBefore: 6 pts;
  };

  BodyPar = Paragraph {
    FirstIndent: 0.25 inches;
    ParAlignment: ParAlignments.Justify;
    SpaceBefore: 6 pts;
  };

  BodyContinue = BodyPar {
    FirstIndent: 0;
  };

  SourcePar(DataSetClass data, concept) = Paragraph {
    ParAlignment: ParAlignments.Left;
    SpaceBefore: 6 pts;
    LeftIndent: 0.25 inches;
    TextHeight: 8 pts;

    TextBlock {
      Span {
        Nexus.Keyword("namespace ");
        concept.GetVariable.Name;
        " {";
      };
      TextBlock {
        IndentSpace: 2;
        foreach (var cognate in concept) {
          Span {
            Nexus.Keyword("namespace ");
            cognate.GetVariable.Name;
            " {";
          };
          TextBlock {
            IndentSpace: 2;
            foreach (var word in cognate) {
              var taxon = data.Taxa[each0];
              Span {
                taxon.Language;
                Span {
                  Space * (data.MaxLanguageName - taxon.Language.Name.Length);
                  " = ";
                  Span {
                    TextColor: Style.StringColor;
                    Quote;
                    foreach (var i in word) {
                      if (i < 0)
                        "-";
                      else
                        data.UniqueSegments[i].Ipa;
                    }
                    Quote;
                  }
                  ";";
                };
              };
            }
          };
          "}";
        }
      };
      "}";
    }
//    SourceSelection(concept, SourceSelectOptions.Line SourceSelectOptions.Children);
  };

  BodyTable = Table {
    SpaceBefore: 10 pts;
    LeftIndent: 0.5 inches;
  };

  BodyTitle = Span {
    Bold;
  };

  NeedsReview(text) = InParens {
    TextColor: Colors.Red;
    text;
  };

  Equation = Span {
    TextFamily: Main.MathFamily;
    TextEquation: true;
  };

  EquationPar = Paragraph {
    SpaceBefore: 10 pts;
    ParAlignment: ParAlignments.Center;
    TextStacked: true;
    TextEquation: true;
    TextHeight: 12 pts;
  };
}
//======================================================================

class FigureActionClass: ActionClass {
  var Figure;

  Constructor(figure) {
    super.Constructor(Actions.ToAnchor, figure.GetVariable);
    Figure = figure;
  }

  override GetLayoutTip = Style.ShowFigureDoc(null, Figure);
}

//======================================================================

class TableActionClass: ActionClass {
  var Table;

  Constructor(table) {
    super.Constructor(Actions.ToAnchor, table.GetVariable);
    Table = table;
  }

  override GetLayoutTip = Block {
    Paragraph {
      TextHeight: 12 pts;
      SpaceAfter: 6 pts;
      CaptionOrTitle(null, Table);
    };
    Table.Body(null);
  };
}

//======================================================================

class LineStyleClass {
  var LineSize,
      Flat,
      Tip,
      Side,
      Edge,
      Angle,
      LineColor;

  Constructor(size, width=1.4, length=1.8) {
    LineSize  = size;
    LineColor = Colors.Black;
    Flat      = LineSize * width;
    Tip       = LineSize * length;
    Side      = 0.5 * LineSize + Flat;
    Angle     = ArcTan2(Side, Tip);
    Edge      = Sqrt(Side*Side + Tip*Tip);
  }
}
//======================================================================

namespace Graphics {
  Half      = 0.5;
  OneEighty = Math.PI;
  Ninety    = Half * OneEighty;
  FortyFive = 0.25 * OneEighty;

  PointClass ExtendPoint(PointClass center, r, angle) {
    return new(center.X + r * Cos(angle), center.Y + r * Sin(angle));
  }

  Adjust(PointClass center, r, angle) {
    return center - ExtendPoint(new(0), r, angle);
  }

  GetAngle(PointClass p1, PointClass p2) {
    return ArcTan2(p2.Y - p1.Y, p2.X - p1.X);
  }

  Line(LineStyleClass line, PointClass p1, PointClass p2) = Figure(null, new(line.LineSize, line.LineColor, LineStyles.Solid, LineCaps.Round)) {
    FigurePath {
      p1;
      LineTo(p2);
    };
  };

  TwoArrowLine(LineStyleClass line, PointClass p1, PointClass p2) = Figure(line.LineColor) {
    var angle = GetAngle(p1, p2);
    var opp   = angle - Ninety;
    var a1    = ExtendPoint(p1, line.Edge, angle + OneEighty - line.Angle);
    var a2    = ExtendPoint(a1, line.Flat, opp);
    var a3    = ExtendPoint(a2, line.LineSize, opp);
    var b1    = ExtendPoint(p2, line.Edge, angle + line.Angle);
    var b2    = ExtendPoint(b1, line.Flat, opp);
    var b3    = ExtendPoint(b2, line.LineSize, opp);

    FigurePath(true) {
      p1;
      LineTo(a1);
      LineTo(a2);
      LineTo(b2);
      LineTo(b1);
      LineTo(p2);
      LineTo(ExtendPoint(b3, line.Flat, opp));
      LineTo(b3);
      LineTo(a3);
      LineTo(ExtendPoint(a3, line.Flat, opp));
    }
  };

  CircleLine(LineStyleClass line, PointClass center, radius, angle, anglegap) = Figure(null, new(line.LineSize, line.LineColor, LineStyles.Solid, LineCaps.Round)) {
    var angle1 = angle + anglegap;
    var angle2 = angle - anglegap;
    var an1    = angle1 - Ninety;
    var an2    = angle2 - Ninety;
    var p1     = ExtendPoint(center, radius, angle1);
    var p2     = ExtendPoint(center, radius, angle2);

    FigurePath {
      p1;
      ArcTo(p2, new(radius), angle, true, true);
    }
  };

  CircleArrow(LineStyleClass line, PointClass center, radius, angle, anglegap) = Figure(line.LineColor) {
    var angle1 = angle + anglegap;
    var angle2 = angle - anglegap;
    var an1    = angle1 - Ninety;
    var an2    = angle2 - Ninety;
    var p1     = ExtendPoint(center, radius, angle1);
    var p2     = ExtendPoint(center, radius, angle2);
    var a1     = ExtendPoint(p1, line.Tip, an1 + 1.5 * Ninety);
    var a2     = ExtendPoint(a1, line.Flat, an1 - Ninety);
    var a3     = ExtendPoint(a2, line.LineSize, an1 - Ninety);
    var b1     = ExtendPoint(p2, line.Tip, an2 + FortyFive);
    var b2     = ExtendPoint(b1, line.Flat, an2 - Ninety);
    var b3     = ExtendPoint(b2, line.LineSize, an2 - Ninety);

    FigurePath(true) {
      p1;
      LineTo(a1);
      LineTo(a2);
      ArcTo(b2, new(radius + line.LineSize), angle, true, true);
      LineTo(b1);
      LineTo(p2);
      LineTo(ExtendPoint(b3, line.Flat, an2 - Ninety));
      LineTo(b3);
      ArcTo(a3, new(radius), angle, true);
      LineTo(ExtendPoint(a3, line.Flat, an1 - Ninety));
    };
  };
}
//======================================================================

