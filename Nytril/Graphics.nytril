using Format, Math, Units, LinkTypes;
//======================================================================

namespace DocMetrics {
  TableSpace      = 24 pts;
  BoxSize         = new SizeClass(18 pts, 20 pts);
  CellSize        = new SizeClass(BoxSize.Width * 2, BoxSize.Height);
  SegmentColumns  = 4;
  SegmentSize     = 40 pts;
}
//======================================================================

class AppendixClass {
  var Title,
      Content;

  Constructor(title, content) {
    Title   =  title;
    Content = content;
  }

  virtual GetCaption(DocumentClass doc) = null;
  virtual GetBody(DocumentClass doc)    = Content;
}
//======================================================================

class AppendixFigureClass: AppendixClass {
  var Figure;

  Constructor(figure) {
    super.Constructor(figure.Title, null);
    Figure = figure;
  }

  override GetCaption(DocumentClass doc) = Paragraph {
    if (exists Figure.?Caption)
      return Figure.Caption(doc);
    else
      return Figure.?Title;
  };

  override GetBody(DocumentClass doc) = Block {
    if (exists Figure.?Body)
      return Figure.Body(doc);
    else
      return Figure.?Text;
  };
}
//======================================================================

class DefClass: FactClass {
  field Name,
        Description;
  var   Symbol;

  Constructor(id, symbol, name, description=null) {
    super.Constructor(id);

    Symbol      = symbol;
    Name        = name;
    Description = description;
  }

  override IconClass GetIcon = Icons.subscript;

  override Compare(d1, d2) = d1.Name.Compare(d2.Name);

  override GetLayoutSpan = Style.Equation {
    Symbol {
      TipAction: this;
    };
    Link to this;
  };

  override GetLayoutFact = GetLayoutTip;

  override GetLayoutTip = Block {
    Paragraph {
      TextHeight: 20 pts;
      Style.Equation {Symbol};
    };
    Paragraph {
      Bold; Name;
    };
    Paragraph {
      Description;
    };
  };

  Appendix = Block {
    Paragraph {
      TextHeight: 16 pts;
      Style.Equation {Symbol};
      Tab;
      Name;
    };
    if (valid Description) {
      Paragraph {
        LeftIndent: 0.5 inches;
        SpaceAfter: 6 pts;
        Description;
      };
    }
  };
}
//======================================================================

class EquationClass: FactClass {
  field Name;
  var   Formula;

  Constructor(id, name) {
    super.Constructor(id);
    Name = name;
  }

  override IconClass GetIcon = Icons.functions;

  override GetLayoutSpan = Formula {
    Link to this;
  };

  override GetLayoutBlock = Style.EquationPar {
    Formula;
    Link to this;
  };

  override GetLayoutTip = Block {
    Paragraph {
      SpaceAfter: 10 pts;
      TextFamily: TextFamilies.Arial;
      Bold;
      Name;
    };
    Paragraph {
      LeftIndent: 24 pts;
      Formula {TextStacked: true};
    }
  };

  override GetLayoutFact = GetLayoutTip;
}
//======================================================================

namespace Style {
  SansSerif            = {TextFamily: TextFamilies.Calibri};
  IPAFamily            = {TextFamily: TextFamilies.LinuxLibertineO};
  GreekFamily          = IPAFamily;
  Classical            = {TextFamily: TextFamilies.CMUClassicalSerif};
  Extra                = {TextFamily: TextFamilies.CMUSerifExtra};
  TaxonFormat          = {TextColor: Colors.DarkBlue};
  CommentFormat        = {TextColor: Colors.Green};
  KeywordFormat        = {TextColor: Colors.Blue};
  ImpossibleBackground = {Background: 80%};
  CommentColor         = new ColorClass(0, 0x64, 0);
  StringColor          = new ColorClass(168, 21, 53);
  NoteIndexIndent      = 6 pts;
  VariableColor        = Colors.DarkBlue;
  AlignBackColor       = 95%;
  Used                 = {TextColor: Colors.Red};
  TitleBackground      = {Background: 90%};
  TableEdgeSize        = 0.25 pts;
  TableEdge            = {Edge: TableEdgeSize};
  ColumnEdge           = {EdgeR: TableEdgeSize};
  SegmentBottom        = {EdgeB: TableEdgeSize {Color: 80%}};
  HighlightColor       = Colors.Orange;
  TextColor            = Colors.Black;
  SlideHeader          = Colors.SlateGray;

  AndSpace             = " and ";
  eos                  = ". ";
  SQuote               = Span {Begin: "‘"; End: "’"};
  SQuoteEnd            = Span {Begin: "‘"; End: ".’ "};
  DQuote               = Span {Begin: "“"; End: "”"};
  DQuoteEnd            = Span {Begin: "“"; End: ".” "};
  textit               = Span {Italic};
  TextIpa              = Span {IPAFamily; Begin:"/"; End:"/"};

  MainTitle = Paragraph {
    SansSerif;
    TextHeight: 18 pts;
    Bold;
    SpaceAfter: 10 pts;
  };

  AppendixTitle = Paragraph {
    SansSerif;
    TextHeight: 16 pts;
    Bold;
    SpaceAfter: 10 pts;
  };

  LanguageTable = Table {
    Padding: 2;
    EdgeTB: 2 pts;
  };

  LanguageTitleRow = Row {
    EdgeB: 1 pts;
  };

  FigureTable = Table {
    ParAlignment: ParAlignments.Center;
    SpaceAfter: 6 pts;
  };

  ShowFigureNumber(figure) = Span {
    Lang.Figure;
    Space;
    RefCounter("figure", figure.GetVariableFullName);
  };

  FigureReference(ExperimentClass experiment, figure) = ShowFigureNumber(figure) {
    TipAction: new FigureActionClass(experiment, figure);
  };

  ShowFigureDoc(DocumentClass document, figure) = Block {
    Paragraph {
      AnchorTag: figure.GetVariableFullName;
      SpaceBefore: 10 pts;
      SpaceAfter: 6 pts;
      KeepWithNext: true;
      Span {
        Bold;
        SansSerif;
        ShowFigureNumber(figure);
        eos;
      };
      figure.?Caption(document) ?? figure.Title;
    };

    Paragraph {
      ParAlignment: ParAlignments.Center;
      SpaceAfter: 6 pts;
      Frame {
        figure.Body(document);
      }
    };
  };

  ShowTableNumber(figure) = Span {
    Lang.Table;
    Space;
    RefCounter("table", figure.GetVariableFullName);
  };

  ShowTable(DocumentClass document, table, textheight) = Block {
    table.Body(document) {
      TextHeight: textheight;
      SpaceBefore: 10 pts;
      ParAlignment: ParAlignments.Center;
    };

    Paragraph {
      ParAlignment: ParAlignments.Center;
      SpaceBefore: 6 pts;
      SpaceAfter: 6 pts;
      Span {
        Bold;
        SansSerif;
        ShowTableNumber(table);
        eos;
      };
      table.Caption(document);
    };
  };

  ShowAuthor(PersonClass person) = Span {
    Link to person;
    CitationLib.GetFullName(person) {
      Bold;
      TipAction: person.FindFirstFact(WebsiteLink);
    };

    Span {
      Separator: Comma;
      TextAlignment: TextAlignments.Superscript;
      each1;
      "+";
    };
  };

  ShowAuthorDetails(PersonClass person) = Block {
    var department = person.FindFirstFact(DepartmentLink);
    if (valid department) {
      LeftIndent: NoteIndexIndent;
      Paragraph {
        FirstIndent: -NoteIndexIndent;
        Span {
          TextAlignment: TextAlignments.Superscript;
          each1;
        };
        Tab;
        department.Name;
        CommaSpace;

        var org = department.FindFirstFact(DepartmentLink, true) ?? department;
        if (valid org) {
          if (org != department) {
            org.Name;
            CommaSpace;
          }
          CitationLib.ShowLocation(org, CommaSpace, true);
        }
      };
    }

    TipAction: person.FindFirstFact(WorkEmailLink);
  };

  ShowAuthorList(authors) = Block {
    TextFamily: TextFamilies.Arial;
    Paragraph {
      TextHeight: 12 pts;
      SpaceAfter: 10 pts;
      Separator: CommaSpace;
      LastSeparator: AndSpace;
      ShowAuthor(each authors);
    };

    Block {
      TextHeight: 10 pts;
      ShowAuthorDetails(each authors);
      Paragraph {
        LeftIndent: NoteIndexIndent;
        FirstIndent: -NoteIndexIndent;
        Span {
          TextAlignment: TextAlignments.Superscript;
          "+";
        };
        Tab;
        "these authors contributed equally to this work";
      };
    };
  };

  ShowAuthorFull(PersonClass person) = Block {
    LeftIndent: 0.25 inches;

    Paragraph {
      AnchorTag: person.GetVariableFullName;
      FirstIndent: -0.25 inches;
      CitationLib.GetFullName(person);
    };

    CitationLib.ShowLocation(person, CommaSpace, true);

    var email = person.FindFirstFact(WorkEmailLink);
    if (valid email) {
      Paragraph {
        Lang.EMail;
        ColonSpace;
        email;
      };
    }

    var site = person.FindFirstFact(WebsiteLink);
    if (valid site) {
      Paragraph {
        site;
      };
    }
    Empty;
  };

  RowBar(i) = {
    if (i mod 2 != 0)
      Background: 95%;
  };

  PageSection = Section {
    SectionBreak: SectionBreaks.NextPage;
    Footer: Block {
      Distance: 0.5 inches;
      ParAlignment: ParAlignments.Center;
      PageNumber;
    };
  };

  ShowBibliography = Section {
    SectionBreak: SectionBreaks.NextPage;
    Format.Bibliography {
      Title: Lang.References;
    }
  };

  TableNotes = Paragraph {
    SpaceAfter: DocMetrics.TableSpace;
  };

  AnimalRow(a) = Row {
    TextHeight: 10 pts;
    a.GetVariableName;
    Cell {
      Span {
        TextFixed: true;
        a;
      }
      Tex.ldots;
    }
  };

  override Header1 = Paragraph {
    KeepWithNext: true;
    SpaceBefore: 18 pts;
    SpaceAfter: 8 pts;
    SansSerif;
    TextHeight: 16 pts;
    Bold;
  };

  override Header2 = Header1 {
    SpaceBefore: 12 pts;
    SpaceAfter: 6 pts;
    TextHeight: 14 pts;
  };

  Header3 = Paragraph {
    KeepWithNext: true;
    Border: 0.25 pts;
    ParBackground: 97%;
    SpaceAfter: 12 pts;
    TextHeight: 14 pts;
  };

  SourceFile(source) = Block {
    Style.Header3 {
      IO.GetFileName(source.Path)
    };
    Paragraph {
      ParAlignment: ParAlignments.Left;
      TextFixed: true;
      TextHeight: 8 pts;
      SourceSelection(source)
    }
  };

  SourceCodeBlock = TextBlock {
    TextFixed: true;
    TextHeight: 10 pts;
    ParBackground: 97%;
  };

  Definition(s) = Span {
    Italic;
    s;
  };

  void Collect(list, node) {
    if (node.Label)
      list.Add(node, node.Label);
    Collect(list, each node);
  }

  GetTimes(node) {
    var list = new ListClass(128);
    Collect(list, node);
    return list[1..];
  }

  ByYear(x, y, options) = x.BranchLength.Compare(y.BranchLength);

//  TimelineNodes = GetTimes(Info.LanguageTree).Sort(true, ByYear);

  TimelineRow(options, node) = HBox {
    X: options.Width - options.Width * node.BranchLength / options.MaxYear;
    Figure {
      Fill: Colors.Green;
      Rectangle(new(new(0), new(5, options.TextHeight)))
    };
    Paragraph {
      Space;
      node.Label;
    }
  };

  NumberedList = ListBlock {
    ParAlignment: ParAlignments.Justify;
    LeftIndent: 0.5 inches;
    FirstIndent: -0.25 inches;
    Marker: i => "{0}."(i+1);
  };

  BranchMarker = Figure {
    Stroke: 1 pt {Color: Colors.Gray};
    Fill: Colors.Black;
    Ellipse(new(new(0), new(1 pts)))
  };

  TreeOptions = Tree {
    TextHeight: 12 pts;
    Default: new NodeClass(null) {
      NodeGap: 5 pts;
      Curvature: 20%;
      Bevel: 20%;
      Marker: BranchMarker;
    };
  };

  ShowTree(title, subtitle, NodeClass root, axis) = VBox {
    Corner: 8 pts;
    Margin: ThicknessClass.B(20 pts);
    Padding: ThicknessClass.LR(15 pts);
    if (valid title) {
      Border: 0.5 pts {Color: 90%};
      Style.Header1 {
        HAlignment: HAligns.Center;
        title;
      };
      if (valid subtitle) {
        Paragraph {
          TextHeight: 10 pts;
          HAlignment: HAligns.Center;
          subtitle;
        };
        Paragraph;
      }
    }

    TreeOptions {
      Reorder: true;
      Width: ExtentWidth - 30 pts;
      if (valid axis) {
        ValueLabel: axis;
        ValueAxis: ChartAxis;
      }
      Root: root;
    };
  };

  AppendixRow(appendix) = Paragraph {
    LeftIndent: 20 pts;
    FirstIndent: -20 pts;
    each1;
    ".";
    Tab;
    Span {
      Action: new ActionClass(Actions.ToAnchor, Lang.Appendix + each0);
      appendix.Title
    };
  };

  ShowAppendix(DocumentClass doc, AppendixClass appendix) = PageSection {
    Header: Block {
      Distance: 0.5 inches;
      Paragraph {
        BorderB: 1 pts;
        ParAlignment: ParAlignments.Center;
        TextHeight: 14 pts;
        SpaceAfter: 8 pts;
        AnchorTag: Lang.Appendix + each0;
        "{0} {1} - "(Lang.Appendix, each1);
        appendix.Title;
      };
    };
    var caption = Block {
      appendix.GetCaption(doc);
      Paragraph;
    };
    caption;
    var height = GetLayoutSize(caption).Height;


    var extent = SetExtentSize(new(ExtentWidth, ExtentHeight - height));
    appendix.GetBody(doc);
    SetExtent(extent);
  };

  LanguageRow(lang) = Row {
    Background: ((each0 mod 2) == 0 ? Colors.White : 97%);
    lang.GetVariableName;
  };

  ShowLanguageList(list) = Table {
    Padding: ThicknessClass.LR(2);
    Columns: [1.5 inch];
    Row {
      Background: Colors.DarkGray;
      TextColor: Colors.White;
      Lang.Name;
    };
    Edge: 0.25 pts {Color: Colors.DarkGray};
    LanguageRow(each list)
  };

  HeaderCell = Cell {
    VAlign: VAligns.Center;
    SansSerif;
    TitleBackground;
    EdgeB: 1 pts;
    Padding: 2 pts;
  };

  TitleBar = Paragraph {
    SpaceBefore: 6 pts;
    Background: 40%;
    TextHeight: 16 pts;
  };

  BulletList = ListBlock {
    Marker: Tex.bullet;
    LeftIndent: 24 pts;
    FirstIndent: -16 pts;
  };

  NumberList = ListBlock {
    Marker: i => (i+1) ".";
    LeftIndent: 24 pts;
    FirstIndent: -16 pts;
  };

  FirstPar = Paragraph {
    ParAlignment: ParAlignments.Justify;
    SpaceBefore: 6 pts;
  };

  BodyPar = Paragraph {
    FirstIndent: 0.25 inches;
    ParAlignment: ParAlignments.Justify;
    SpaceBefore: 6 pts;
  };

  BodyContinue = BodyPar {
    FirstIndent: 0;
  };

  SourcePar(concept) = Paragraph {
    ParAlignment: ParAlignments.Left;
    SpaceBefore: 6 pts;
    LeftIndent: 0.25 inches;
    TextHeight: 8 pts;
    TextFixed: true;
    SourceSelection(concept, SourceSelectOptions.Line SourceSelectOptions.Children);
  };

  BodyTable = Table {
    SpaceBefore: 10 pts;
    LeftIndent: 0.5 inches;
  };

  BodyTitle = Span {
    Bold;
  };

  NeedsReview(text) = InParens {
    TextColor: Colors.Red;
    text;
  };

  Equation = Span {
    TextEquation: true;
  };

  EquationPar = Paragraph {
    SpaceBefore: 10 pts;
    ParAlignment: ParAlignments.Center;
    TextStacked: true;
    TextHeight: 12 pts;
  };
}
//======================================================================

class FigureActionClass: ActionClass {
  var             Figure;
  ExperimentClass Experiment;

  Constructor(ExperimentClass experiment, figure) {
    super.Constructor(Actions.ToAnchor, figure.GetVariableFullName);
    Experiment = experiment;
    Figure     = figure;
  }

  override GetLayoutTip = Style.ShowFigureDoc(null, Figure);
}

//======================================================================

class LineStyleClass {
  var LineSize,
      Flat,
      Tip,
      Side,
      Edge,
      Angle,
      LineColor;

  Constructor(size, width=1.4, length=1.8) {
    LineSize  = size;
    LineColor = Colors.Black;
    Flat      = LineSize * width;
    Tip       = LineSize * length;
    Side      = 0.5 * LineSize + Flat;
    Angle     = ArcTan2(Side, Tip);
    Edge      = Sqrt(Side*Side + Tip*Tip);
  }
}
//======================================================================

namespace Graphics {
  Half      = 0.5;
  OneEighty = Math.PI;
  Ninety    = Half * OneEighty;
  FortyFive = 0.25 * OneEighty;

  PointClass ExtendPoint(PointClass center, r, angle) {
    return new(center.X + r * Cos(angle), center.Y + r * Sin(angle));
  }

  Adjust(PointClass center, r, angle) {
    return center - ExtendPoint(new(0), r, angle);
  }

  GetAngle(PointClass p1, PointClass p2) {
    return ArcTan2(p2.Y - p1.Y, p2.X - p1.X);
  }

  Line(LineStyleClass line, PointClass p1, PointClass p2) = Figure {
    Stroke: line.LineSize {Color: line.LineColor; LineCap: LineCaps.Round};
    FigurePath {
      p1;
      LineTo(p2);
    };
  };

  TwoArrowLine(LineStyleClass line, PointClass p1, PointClass p2) = Figure {
    Fill: line.LineColor;

    var angle = GetAngle(p1, p2);
    var opp   = angle - Ninety;
    var a1    = ExtendPoint(p1, line.Edge, angle + OneEighty - line.Angle);
    var a2    = ExtendPoint(a1, line.Flat, opp);
    var a3    = ExtendPoint(a2, line.LineSize, opp);
    var b1    = ExtendPoint(p2, line.Edge, angle + line.Angle);
    var b2    = ExtendPoint(b1, line.Flat, opp);
    var b3    = ExtendPoint(b2, line.LineSize, opp);

    FigurePath {
      Closed: true;
      p1;

      LineTo(a1);
      LineTo(a2);
      LineTo(b2);
      LineTo(b1);
      LineTo(p2);
      LineTo(ExtendPoint(b3, line.Flat, opp));
      LineTo(b3);
      LineTo(a3);
      LineTo(ExtendPoint(a3, line.Flat, opp));
    }
  };

  CircleLine(LineStyleClass line, PointClass center, radius, angle, anglegap) = Figure {
    Stroke: line.LineSize {Color: line.LineColor; LineCap: LineCaps.Round};

    var angle1 = angle + anglegap;
    var angle2 = angle - anglegap;
    var an1    = angle1 - Ninety;
    var an2    = angle2 - Ninety;
    var p1     = ExtendPoint(center, radius, angle1);
    var p2     = ExtendPoint(center, radius, angle2);

    FigurePath {
      p1;
      ArcTo(p2, new(radius), angle, true, true);
    }
  };

  CircleArrow(LineStyleClass line, PointClass center, radius, angle, anglegap) = Figure {
    Fill: line.LineColor;

    var angle1 = angle + anglegap;
    var angle2 = angle - anglegap;
    var an1    = angle1 - Ninety;
    var an2    = angle2 - Ninety;
    var p1     = ExtendPoint(center, radius, angle1);
    var p2     = ExtendPoint(center, radius, angle2);
    var a1     = ExtendPoint(p1, line.Tip, an1 + 1.5 * Ninety);
    var a2     = ExtendPoint(a1, line.Flat, an1 - Ninety);
    var a3     = ExtendPoint(a2, line.LineSize, an1 - Ninety);
    var b1     = ExtendPoint(p2, line.Tip, an2 + FortyFive);
    var b2     = ExtendPoint(b1, line.Flat, an2 - Ninety);
    var b3     = ExtendPoint(b2, line.LineSize, an2 - Ninety);

    FigurePath {
      Closed: true;
      p1;
      LineTo(a1);
      LineTo(a2);
      ArcTo(b2, new(radius + line.LineSize), angle, true, true);
      LineTo(b1);
      LineTo(p2);
      LineTo(ExtendPoint(b3, line.Flat, an2 - Ninety));
      LineTo(b3);
      ArcTo(a3, new(radius), angle, true);
      LineTo(ExtendPoint(a3, line.Flat, an1 - Ninety));
    };
  };
}
//======================================================================

