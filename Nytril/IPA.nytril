using Format, Units, SegmentFeatures, Math;

//======================================================================

flags WordGroups {
  None(Lang.None),
  Leipzig("Leipzig/Jakarta"),
  Swadesh100("Swadesh 100"),
  Swadesh207("Swadesh 207"),
}

enum WordTypes {
  None(Lang.None),
  Noun(Lang.Noun),
  Verb(Lang.Verb),
  Adjective(Lang.Adjective),
  Number(Lang.Number),
  Function(Lang.Function),
}

enum Opens {
  Close(Lang.Close),
  NearClose(Lang.NearClose),
  CloseMid(Lang.CloseMid),
  Mid(Lang.Mid),
  OpenMid(Lang.OpenMid),
  NearOpen(Lang.NearOpen),
  Open(Lang.Open),
  High(Lang.High),
}

enum Backnesses {
  Front(Lang.Front),
  NearFront(Lang.NearFront),
  Central(Lang.Central),
  NearBack(Lang.NearBack),
  Back(Lang.Back),
}

enum Places {
  Bilabial       (Lang.Bilabial),
  Labial         (Lang.Labial),
  LabialVelar    (Lang.LabialVelar),
  LabialPalatal  (Lang.LabialPalatal),
  LabioDental    (Lang.LabioDental),
  LinguoLabial   (Lang.LinguoLabial),
  Dental         (Lang.Dental),
  Alveolar       (Lang.Alveolar),
  AlveoloPalatal (Lang.AlveoloPalatal),
  PostAlveolar   (Lang.PostAlveolar),
  Retroflex      (Lang.Retroflex),
  Palatal        (Lang.Palatal),
  PalatoAlveolar (Lang.PalatoAlveolar),
  Velar          (Lang.Velar),
  Uvular         (Lang.Uvular),
  Pharyngeal     (Lang.Pharyngeal),
  Glottal        (Lang.Glottal),
}

flags SegmentFeatures {
  NoFeature   (Lang.NoFeatures),
  Rounded     (Lang.Rounded),
  Vocoid      (Lang.Vocoid),
  Semivowel   (Lang.SemiVowel),
  LongVowel   (Lang.LongVowel),
  Voiced      (Lang.Voiced),
  Velarized   (Lang.Velarized),
  Ejective    (Lang.Ejective),
  Pulmonic    (Lang.Pulmonic),
  Nasal       (Lang.Nasal),
  Tenuis      (Lang.Tenuis),
  Lateral     (Lang.Lateral),
  Sibilant    (Lang.Sibilant),
  Fricative   (Lang.Fricative),
  Approximant (Lang.Approximant),
  Implosive   (Lang.Implosive),
  Central     (Lang.Central),
  TapFlap     (Lang.TapFlap),
  Trill       (Lang.Trill),
  Stop        (Lang.Stop),
  Click       (Lang.Click),
  Affricate   (Lang.Affricate),
  Vowel       (Lang.Vowel),
  Rhotic      (Lang.Rhotic),
  Occlusive   (Lang.Occlusive),
  Strident    (Lang.Strident),
  Obstruent   (Lang.Obstruent),
  Continuant  (Lang.Continuant),
  Vibrant     (Lang.Vibrant),
  Liquid      (Lang.Liquid),
  Diphthong   (Lang.Diphthong),
  Palatalized (Lang.Palatalized),
  NonSylabic  (Lang.NonSylabic),
  Labial      (Lang.Labial),
  Dental      (Lang.Dental),
  Lingual     (Lang.Lingual),
  Velar       (Lang.Velar),
  Raised      (Lang.Raised),
  Lowered     (Lang.Lowered),
  Advanced    (Lang.Advanced),
}

//======================================================================

typedef SegmentSetClass HashSetClass<SegPartClass>;
typedef SegPartDictionary StringDictionaryClass<SegPartClass>;

class SegmentClass: FactClass {
  field string          Ipa;
  field SegmentFeatures Features;
  var Opens             Open;
  var Backnesses        Backness;
  var Places            Place;
  var bool              Punctuation,
                        Gap,
                        Diacritic;
  var                   CharacterLetter,
                        Sampa,
                        Impossible,
                        Description;

  Constructor(ipa, sampa, impossible=false) {
    super.Constructor(guid.FromHash(ipa ?? Empty));
    if (ipa is valid)
      Ipa = string.Normalize(ipa, NormalizationForms.FormC);
    CharacterLetter = Ipa;
    Sampa           = sampa;
    Impossible      = impossible;
    Punctuation     = false;
    Diacritic       = false;
    Gap             = false;
    Features        = NoFeature;
  }

  override IconClass GetIcon = Icons.record_voice_over;

  ShowFeature(SegmentFeatures feature) = feature == SegmentFeatures.NoFeature ? null : feature;

  SegmentName = Span {
    if (Features.HasFlag(Vowel)) {
      Open;
      Space;
      Backness;
    }
    else
      Place;

    Space;
    Span {
      Separator: Space;
      if (Diacritic)
        Description;
      else
        ShowFeature(each Features.ToArray);
    }
  };

  ShowBlock = Canvas(10 pts, 8 pts) {
    ShowSegment;
  };

  ShowSegment(bool link=true) = Span {
    PaperStyle.IPAFamily;
    TextLiteral: true;
    if (Impossible) {
      System.Assert(false, Lang.Impossible);
      TextColor: Colors.Red;
    }
    else if (Gap)
      TextColor: Colors.LightGray;

    if (Diacritic)
      Space*2;
    Ipa;
    if (link)
      TipAction: this;
  };

  ShowDoc = PaperStyle.TextIpa {
    TipAction: this;
    Ipa;
  };

  override GetLayoutSpan = PaperStyle.TextIpa {
    TipAction: this;
    Ipa;
  };

  ShowCodePoint = Paragraph {
    TextHeight: 8 pts;
    ParBackground: 95%;
    Span {
      TextFixed: true;
      TextRadix: 16;
      TextDigits: 4;
      Separator: CommaSpace;
      each Ipa as int;
    }
  };

  Display(location, size) = Block {
    ParAlignment: Center;
    Paragraph {
      if (location is valid)
        DocFields.Anchor(location);
      SpaceBefore: 8 pts;
      SpaceAfter: 8 pts;
      PaperStyle.IPAFamily;
      TextLiteral: true;
      TextHeight: size;
      SpaceAfter: size * 0.125;
      Ipa;
    };
    ShowCodePoint;
    Paragraph {
      TextHeight: 10 pts;
      if (Gap)
        Lang.Gap;
      else
        SegmentName;
    };
  };

  ShowFrame(width, size, BorderClass border=null) = Frame(width, null, border) {
    Display(null, size);
  };

  override GetLayoutTip = ShowFrame(PaperStyle.SegmentWidth, PaperStyle.SegmentSize);

  override GetLayoutFact = Block {
    ShowFrame(PaperStyle.SegmentWidth, 14 pts, 0.5);
//    Paragraph {
//      super.GetLayoutFact;
//    };
  };
}

//======================================================================

class SegPartClass {
  field string          Ipa;
  field SegmentFeatures Features;
  var SegmentClass      Segment;
  var PartitionClass    Partition;
  var int               PartitionIndex,
                        Index,
                        UsedCount;
  var double            UsedFrequency;
  var bool              Punctuation;

  Constructor(SegmentClass s) {
    Segment        = s;
    PartitionIndex = 0;
    Index          = -1;
    UsedCount      = 0;
    UsedFrequency  = 0.0;
    Punctuation    = s.Punctuation;
    Ipa            = s.Ipa;
    Features       = s.Features;
  }

  void SetPartition(PartitionClass p, index) {
    Partition      = p;
    PartitionIndex = index;
  }

  ShowSegment(bool link=true) = Segment.ShowSegment(link);

  ShowBlock = Segment.ShowBlock;

  override GetLayoutTip = VBox {
    HAlign: Center;

    Paragraph {
      "Count: "; UsedCount;
    };
    Paragraph {
      TextDigits: 2;
      "Used Frequency: {0}%"(UsedFrequency * 100);
    };
    Segment.GetLayoutTip;
  };

  override GetLayoutFact = Segment.GetLayoutFact;
}

SegPartClass IPAParts.Gap     = new(IPASegments.GapSegment);
SegPartClass IPAParts.Missing = new(IPASegments.MissingSegment);

//======================================================================

class PunctuationClass: SegmentClass {
  Constructor(ipa, sampa=null) {
    super.Constructor(ipa, sampa);
    Punctuation = true;
  }
}

//======================================================================

class ImpossibleClass: SegmentClass {
  Constructor(features, place) {
    super.Constructor(Empty, null);
    Features   = features;
    Place      = place;
    Impossible = true;
  }
}

//======================================================================

class DiacriticClass: SegmentClass {
  Constructor(description, ipa, sampa=null) {
    super.Constructor(ipa, sampa);
    Diacritic   = true;
    Description = description;
  }
}

//======================================================================

class ConsonantClass: SegmentClass {
  Constructor(ipa, features, place, sampa=null) {
    super.Constructor(ipa, sampa);
    Features = features;
    Place    = place;
  }
}

//======================================================================

class VowelClass: SegmentClass {
  Constructor(ipa, features, open, backness, sampa=null) {
    super.Constructor(ipa, sampa);
    Features = features | Vowel;
    Open     = open;
    Backness = backness;
  }
}

//======================================================================

readonly ImpossibleClass[] ImpossibleSegments = [
  new(Pulmonic Nasal, Places.Pharyngeal),
  new(Pulmonic Nasal, Places.Glottal),
  new(Pulmonic Stop Voiced, Places.Pharyngeal),
  new(Pulmonic Stop Voiced, Places.Glottal),
  new(Pulmonic Sibilant Fricative, Places.Bilabial),
  new(Pulmonic Sibilant Fricative Labial Dental, Places.LabioDental),
  new(Pulmonic Sibilant Fricative Lingual Labial, Places.LinguoLabial),
  new(Pulmonic Sibilant Fricative, Places.Velar),
  new(Pulmonic Sibilant Fricative, Places.Uvular),
  new(Pulmonic Sibilant Fricative, Places.Pharyngeal),
  new(Pulmonic Sibilant Fricative, Places.Glottal),
  new(Pulmonic Trill, Places.Velar),
  new(Pulmonic Trill, Places.Glottal),
  new(Pulmonic TapFlap, Places.Velar),
  new(Pulmonic TapFlap, Places.Glottal),
  new(Pulmonic Lateral Fricative, Places.Bilabial),
  new(Pulmonic Lateral Fricative Labial Dental, Places.LabioDental),
  new(Pulmonic Lateral Fricative, Places.Pharyngeal),
  new(Pulmonic Lateral Fricative, Places.Glottal),
  new(Pulmonic Lateral Approximant, Places.Bilabial),
  new(Pulmonic Lateral Approximant Labial Dental, Places.LabioDental),
  new(Pulmonic Lateral Approximant, Places.Pharyngeal),
  new(Pulmonic Lateral Approximant, Places.Glottal),
  new(Pulmonic Lateral TapFlap, Places.Bilabial),
  new(Pulmonic Lateral TapFlap Labial Dental, Places.LabioDental),
  new(Pulmonic Lateral TapFlap, Places.Pharyngeal),
  new(Pulmonic Lateral TapFlap, Places.Glottal),
  new(Pulmonic Sibilant Affricate, Places.Bilabial),
  new(Pulmonic Sibilant Affricate Labial Dental, Places.LabioDental),
  new(Pulmonic Sibilant Affricate, Places.Velar),
  new(Pulmonic Sibilant Affricate, Places.Uvular),
  new(Pulmonic Sibilant Affricate, Places.Pharyngeal),
  new(Pulmonic Sibilant Affricate, Places.Glottal),
  new(Pulmonic Lateral Affricate, Places.Bilabial),
  new(Pulmonic Lateral Affricate Labial Dental, Places.LabioDental),
  new(Pulmonic Lateral Affricate, Places.Pharyngeal),
  new(Pulmonic Lateral Affricate, Places.Glottal),
  new(Ejective Lateral Fricative Affricate, Places.Bilabial),
  new(Ejective Lateral Fricative Affricate Labial Dental, Places.LabioDental),
  new(Ejective Lateral Fricative Affricate, Places.Pharyngeal),
  new(Ejective Central Affricate, Places.Glottal),
  new(Ejective Lateral Affricate, Places.Bilabial),
  new(Ejective Lateral Affricate Labial Dental, Places.LabioDental),
  new(Ejective Lateral Affricate, Places.Pharyngeal),
  new(Ejective Lateral Affricate, Places.Glottal),
  new(Ejective Tenuis Click Affricate, Places.Velar),
  new(Ejective Tenuis Click Affricate, Places.Uvular),
  new(Ejective Tenuis Click Affricate, Places.Pharyngeal),
  new(Ejective Nasal Click Affricate, Places.Velar),
  new(Ejective Nasal Click Affricate, Places.Uvular),
  new(Ejective Nasal Click Affricate, Places.Pharyngeal),
  new(Ejective Tenuis Lateral Click Affricate, Places.Bilabial),
  new(Ejective Tenuis Lateral Click Affricate Labial Dental, Places.LabioDental),
  new(Ejective Tenuis Lateral Click Affricate, Places.Velar),
  new(Ejective Tenuis Lateral Click Affricate, Places.Uvular),
  new(Ejective Tenuis Lateral Click Affricate, Places.Pharyngeal),
];

//======================================================================

readonly namespace<DiacriticClass> DiacriticModifiers {
  UndefinedEscapeCharacter     = new("Undefined escape character", null, "*");
  Nasalized                    = new("Nasalized", "\u0303", "_~");
  Centralized                  = new("Centralized", "\u0308", "_\"");
  Advanced                     = new("Advanced", "\u031F", "_+");
  Retracted                    = new("Retracted", "\u0320", "_-");
  RisingTone                   = new("RisingTone ", "\u030C", "_R");
  Voiceless                    = new("Voiceless", "\u0325", "_0");
  Implosive                    = new("Implosive", null, "_<");
  Syllabic                     = new("Syllabic", "\u0329", "_=");
  Ejective                     = new("Ejective", "\u02BC", "_>");
  Pharyngealized               = new("Pharyngealized ", "\u02E4", "_?\\");
  FallingTone                  = new("Falling tone", "\u0302", "_F");
  NonSyllabic                  = new("Non-syllabic", "\u032F", "_^");
  NoAudibleRelease             = new("No audible release", "\u031A", "_}");
  RhoticHook                   = new("Rhotic hook", "\u02DE", "`");
  AdvancedTongueRoot           = new("Advanced tongue root ", "\u0318", "_A");
  Apical                       = new("Apical", "\u033A", "_a");
  ExtraLowTone                 = new("Extra low tone", "\u030F", "_B");
  LessRounded                  = new("Less rounded", "\u031C", "_c");
  Dental                       = new("Dental", "\u032A", "_d");
  VelarizedOrPharyngealized    = new("Velarized or Pharyngealized", "\u0334", "_e");
  GlobalFall                   = new("Global fall", "\u2198", "<F>");
  Velarized                    = new("Velarized", "\u02E0", "_G");
  HighTone                     = new("High tone", "\u0301", "_H");
  Aspirated                    = new("Aspirated", "\u02B0", "_h");
  Palatalized                  = new("Palatalized", "\u02B2", "_j");
  CreakyVoiced                 = new("Creaky voiced", "\u0330", "_k");
  LowTone                      = new("Low tone", "\u0300", "_L");
  LateralRelease               = new("Lateral release", "\u02E1", "_l");
  MidTone                      = new("Mid tone", "\u0304", "_M");
  Laminal                      = new("Laminal", "\u033B", "_m");
  LinguoLabial                 = new("Linguo-Labial", "\u033C", "_N");
  NasalRelease                 = new("Nasal release", "\u207F", "_n");
  MoreRounded                  = new("More rounded", "\u0339", "_O");
  Lowered                      = new("Lowered", "\u031E", "_o");
  RetractedTongueRoot          = new("Retracted tongue root", "\u0319", "_q");
  GlobalRise                   = new("Global rise", "\u2197", "<R>");
  Raised                       = new("Raised", "\u031D", "_r");
  ExtraHighTone                = new("Extra high tone", "\u030B", "_T");
  BreathyVoiced                = new("Breathy voiced", "\u0324", "_t");
  Voiced                       = new("Voiced", "\u032C", "_v");
  Labialized                   = new("Labialized", "\u02B7", "_W");
  ExtraShort                   = new("Extra short", "\u02D8", "_X");
  MidCentralized               = new("Mid-centralized", "\u033D", "_x");
  Downstep                     = new("Down-step", "↓", "!");
  Upstep                       = new("Up-step", "↑", "^");
  Long                         = new("Long", "ː", ":");
  HalfLong                     = new("Half-long", "ˑ", ":\\");
  IndeterminacyinFrenchVowels  = new("Indeterminacy in french vowels", null, "/");
  BeginNonsegmentalNotation    = new("Begin Non-segmental notation", null, "<");
  Endnonsegmentalnotation      = new("End non-segmental notation", "", ">");
  Voicedepiglottalfricative    = new("Voiced epiglottal fricative", "ʢ", "<\\");
  Postalveolarclick            = new("Post-alveolar click", "ǃ", "!\\");
  MinorGroup                   = new("Minor group", " | ", " | ");
  Dentalclick                  = new("Dental click", "ǀ", " | \\");
  MajorGroup                   = new("Major group", "‖", " |  | ");
  Alveolarlateralclick         = new("Alveolar lateral click", "ǁ", " | \\ | \\");
  Palatalclick                 = new("Palatal click", "ǂ", "");
  VoicelessDescender           = new("Voiceless descender", "\u030A", "");
  CombiningMacron              = new("Combining macron", "\u0331", "");
  TieBarBelow                  = new("Tie-bar below", "\u035C", "");
  TieBarAbove                  = new("Tie-bar above", "\u0361", "");
  ReadyMadeCombination         = new("Ready made combination", "\u026B", "");
  Becomes                      = new("Becomes", "→", "");
  Separator                    = new("Separator", "", "-");

// Glyphs are not in the font
//    Linkingmark                = new DiacriticClass("Linking Mark", "\u203f", "-\\");
//    LowRisingTone                = new DiacriticClass("Low rising tone", "\u1DC5", "_B_L");
//    HighRisingTone               = new DiacriticClass("High rising tone", "\u1DC4", "_H_T");
//    RisingFallingTone            = new DiacriticClass("Rising falling tone", "\u1DC8", "_R_F");
}

//======================================================================

readonly SegmentClass IPA.NullSegment = new(Tex.bigotimes, "!?", true);

//======================================================================

