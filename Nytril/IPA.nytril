using Format, Units, SegmentFeatures, Math;
//======================================================================

flags WordGroups {
  None        {Name: Lang.None},
  Leipzig     {Name: "Leipzig/Jakarta"},
  Swadesh100  {Name: "Swadesh 100"},
  Swadesh207  {Name: "Swadesh 207"},
}

enum WordTypes {
  None      {Name: Lang.None},
  Noun      {Name: Lang.Noun},
  Verb      {Name: Lang.Verb},
  Adjective {Name: Lang.Adjective},
  Number    {Name: Lang.Number},
  Function  {Name: Lang.Function},
}

enum Opens {
  Close     {Name: Lang.Close},
  NearClose {Name: Lang.NearClose},
  CloseMid  {Name: Lang.CloseMid},
  Mid       {Name: Lang.Mid},
  OpenMid   {Name: Lang.OpenMid},
  NearOpen  {Name: Lang.NearOpen},
  Open      {Name: Lang.Open},
  High      {Name: Lang.High},
}

enum Backnesses {
  Front     {Name: Lang.Front},
  NearFront {Name: Lang.NearFront},
  Central   {Name: Lang.Central},
  NearBack  {Name: Lang.NearBack},
  Back      {Name: Lang.Back},
}

enum Places {
  Bilabial       {Name: Lang.Bilabial},
  Labial         {Name: Lang.Labial},
  LabialVelar    {Name: Lang.LabialVelar},
  LabialPalatal  {Name: Lang.LabialPalatal},
  LabioDental    {Name: Lang.LabioDental},
  LinguoLabial   {Name: Lang.LinguoLabial},
  Dental         {Name: Lang.Dental},
  Alveolar       {Name: Lang.Alveolar},
  AlveoloPalatal {Name: Lang.AlveoloPalatal},
  PostAlveolar   {Name: Lang.PostAlveolar},
  Retroflex      {Name: Lang.Retroflex},
  Palatal        {Name: Lang.Palatal},
  PalatoAlveolar {Name: Lang.PalatoAlveolar},
  Velar          {Name: Lang.Velar},
  Uvular         {Name: Lang.Uvular},
  Pharyngeal     {Name: Lang.Pharyngeal},
  Glottal        {Name: Lang.Glottal},
}

flags SegmentFeatures {
  NoFeature   {Name: Lang.NoFeatures},
  Rounded     {Name: Lang.Rounded},
  Vocoid      {Name: Lang.Vocoid},
  Semivowel   {Name: Lang.SemiVowel},
  LongVowel   {Name: Lang.LongVowel},
  Voiced      {Name: Lang.Voiced},
  Velarized   {Name: Lang.Velarized},
  Ejective    {Name: Lang.Ejective},
  Pulmonic    {Name: Lang.Pulmonic},
  Nasal       {Name: Lang.Nasal},
  Tenuis      {Name: Lang.Tenuis},
  Lateral     {Name: Lang.Lateral},
  Sibilant    {Name: Lang.Sibilant},
  Fricative   {Name: Lang.Fricative},
  Approximant {Name: Lang.Approximant},
  Implosive   {Name: Lang.Implosive},
  Central     {Name: Lang.Central},
  TapFlap     {Name: Lang.TapFlap},
  Trill       {Name: Lang.Trill},
  Stop        {Name: Lang.Stop},
  Click       {Name: Lang.Click},
  Affricate   {Name: Lang.Affricate},
  Vowel       {Name: Lang.Vowel},
  Rhotic      {Name: Lang.Rhotic},
  Occlusive   {Name: Lang.Occlusive},
  Strident    {Name: Lang.Strident},
  Obstruent   {Name: Lang.Obstruent},
  Continuant  {Name: Lang.Continuant},
  Vibrant     {Name: Lang.Vibrant},
  Liquid      {Name: Lang.Liquid},
  Diphthong   {Name: Lang.Diphthong},
  Palatalized {Name: Lang.Palatalized},
  NonSylabic  {Name: Lang.NonSylabic},
  Labial      {Name: Lang.Labial},
  Dental      {Name: Lang.Dental},
  Lingual     {Name: Lang.Lingual},
  Velar       {Name: Lang.Velar},
  Raised      {Name: Lang.Raised},
  Lowered     {Name: Lang.Lowered},
  Advanced    {Name: Lang.Advanced},
}
//======================================================================

typedef SegmentSetClass HashSetClass<SegmentClass>;

class SegmentClass: FactClass {
  field        Ipa,
               Features;
  var          Index,
               UsedCount,
               UsedFrequency,
               CharacterLetter,
               PartitionIndex,
               Sampa,
               Impossible,
               Punctuation,
               Gap,
               Description,
               Diacritic,
               Open,
               Backness,
               Place,
               LangUsedCount,
               LangUsedFrequency;

  Constructor(ipa, sampa, impossible=false) {
    super.Constructor(ipa ?? Empty);
    Ipa             = ipa?.GetString(NormalizationForms.FormC);
    CharacterLetter = Ipa;
    Index           = -1;
    PartitionIndex  = 0;
    Sampa           = sampa;
    Impossible      = impossible;
    Punctuation     = false;
    Diacritic       = false;
    Gap             = false;
    Features        = NoFeature;
    UsedCount       = 0;
  }

  override GetIcon = Icons.record_voice_over;

  ShowFeature(feature) = feature == SegmentFeatures.NoFeature ? null : feature;

  SegmentName = Span {
    if (Features.HasFlag(Vowel)) {
      Open;
      Space;
      Backness;
    }
    else
      Place;

    Space;
    Span {
      Separator: Space;
      if (Diacritic)
        Description;
      else
        ShowFeature(each Features);
    }
  };

  ShowBlock = Canvas {
    Size: Size(10 pts, 8 pts);
    ShowSegment;
  };

  ShowSegment = Span {
    Style.IPAFamily;
    if (Impossible) {
      System.Assert(false, Lang.Impossible);
      TextColor: Colors.Red;
    }
    else if (Gap)
      TextColor: Colors.LightGray;

    if (Diacritic)
      Space*2;
    Ipa;
    Hover: new HoverClass(this, HoverTypes.Tip);
  };

  ShowDoc = Style.TextIpa {
    Hover: new HoverClass(this, HoverTypes.Tip);
    Ipa
  };

  ShowCodePoint = Paragraph {
    TextHeight: 8 pts;
    ParBackground: 95%;
    Style.MonoFamily;
    TextRadix: 16;
    TextDigits: 4;
    Span {
      Separator: CommaSpace;
      if (valid Ipa)
        Integer(each Ipa);
    }
  };

  Display(location, size) = Block {
    ParAlignment: ParAlignments.Center;
    Paragraph {
      AnchorTag: location;
      SpaceBefore: 8 pts;
      SpaceAfter: 8 pts;
      Style.IPAFamily;
      TextHeight: size;
      SpaceAfter: size * 0.125;
      Ipa;
    };
    ShowCodePoint;
    Paragraph {
      TextHeight: 10 pts;
      if (Gap)
        Lang.Gap;
      else
        SegmentName;
    };
  };

  ShowFrame(width, size) = Frame {
    Width: width;
    Display(null, size);
  };

  override GetLayoutTip = ShowFrame(2 inches, DocMetrics.SegmentSize);

  override GetLayoutFact = Block {
    ShowFrame(2 inches, 14 pts) {Border: 0.5};
    Paragraph {
      super.GetLayoutFact;
    };
  };
}
//======================================================================

class PunctuationClass: SegmentClass {
  Constructor(ipa, sampa=null) {
    super.Constructor(ipa, sampa);
    Punctuation = true;
  }
}
//======================================================================

class ImpossibleClass: SegmentClass {
  Constructor(features, place) {
    super.Constructor(Empty, null);
    Features   = features;
    Place      = place;
    Impossible = true;
  }
}
//======================================================================

class DiacriticClass: SegmentClass {
  Constructor(description, ipa, sampa=null) {
    super.Constructor(ipa, sampa);
    Diacritic   = true;
    Description = description;
  }
}
//======================================================================

class ConsonantClass: SegmentClass {
  Constructor(ipa, features, place, sampa=null) {
    super.Constructor(ipa, sampa);
    Features = features;
    Place    = place;
  }
}

//======================================================================

class VowelClass: SegmentClass {
  Constructor(ipa, features, open, backness, sampa=null) {
    super.Constructor(ipa, sampa);
    Features = features | Vowel;
    Open     = open;
    Backness = backness;
  }
}

//======================================================================

namespace ImpossibleSegments {
  ImpossibleClass I10 = new(Pulmonic Nasal, Places.Pharyngeal);
  ImpossibleClass I11 = new(Pulmonic Nasal, Places.Glottal);
  ImpossibleClass I12 = new(Pulmonic Stop Voiced, Places.Pharyngeal);
  ImpossibleClass I13 = new(Pulmonic Stop Voiced, Places.Glottal);
  ImpossibleClass I14 = new(Pulmonic Sibilant Fricative, Places.Bilabial);
  ImpossibleClass I15 = new(Pulmonic Sibilant Fricative Labial Dental, Places.LabioDental);
  ImpossibleClass I16 = new(Pulmonic Sibilant Fricative Lingual Labial, Places.LinguoLabial);
  ImpossibleClass I17 = new(Pulmonic Sibilant Fricative, Places.Velar);
  ImpossibleClass I18 = new(Pulmonic Sibilant Fricative, Places.Uvular);
  ImpossibleClass I19 = new(Pulmonic Sibilant Fricative, Places.Pharyngeal);
  ImpossibleClass I20 = new(Pulmonic Sibilant Fricative, Places.Glottal);
  ImpossibleClass I21 = new(Pulmonic Trill, Places.Velar);
  ImpossibleClass I22 = new(Pulmonic Trill, Places.Glottal);
  ImpossibleClass I23 = new(Pulmonic TapFlap, Places.Velar);
  ImpossibleClass I24 = new(Pulmonic TapFlap, Places.Glottal);
  ImpossibleClass I25 = new(Pulmonic Lateral Fricative, Places.Bilabial);
  ImpossibleClass I26 = new(Pulmonic Lateral Fricative Labial Dental, Places.LabioDental);
  ImpossibleClass I27 = new(Pulmonic Lateral Fricative, Places.Pharyngeal);
  ImpossibleClass I28 = new(Pulmonic Lateral Fricative, Places.Glottal);
  ImpossibleClass I29 = new(Pulmonic Lateral Approximant, Places.Bilabial);
  ImpossibleClass I30 = new(Pulmonic Lateral Approximant Labial Dental, Places.LabioDental);
  ImpossibleClass I31 = new(Pulmonic Lateral Approximant, Places.Pharyngeal);
  ImpossibleClass I32 = new(Pulmonic Lateral Approximant, Places.Glottal);
  ImpossibleClass I33 = new(Pulmonic Lateral TapFlap, Places.Bilabial);
  ImpossibleClass I34 = new(Pulmonic Lateral TapFlap Labial Dental, Places.LabioDental);
  ImpossibleClass I35 = new(Pulmonic Lateral TapFlap, Places.Pharyngeal);
  ImpossibleClass I36 = new(Pulmonic Lateral TapFlap, Places.Glottal);
  ImpossibleClass I37 = new(Pulmonic Sibilant Affricate, Places.Bilabial);
  ImpossibleClass I38 = new(Pulmonic Sibilant Affricate Labial Dental, Places.LabioDental);
  ImpossibleClass I39 = new(Pulmonic Sibilant Affricate, Places.Velar);
  ImpossibleClass I40 = new(Pulmonic Sibilant Affricate, Places.Uvular);
  ImpossibleClass I41 = new(Pulmonic Sibilant Affricate, Places.Pharyngeal);
  ImpossibleClass I42 = new(Pulmonic Sibilant Affricate, Places.Glottal);
  ImpossibleClass I43 = new(Pulmonic Lateral Affricate, Places.Bilabial);
  ImpossibleClass I44 = new(Pulmonic Lateral Affricate Labial Dental, Places.LabioDental);
  ImpossibleClass I45 = new(Pulmonic Lateral Affricate, Places.Pharyngeal);
  ImpossibleClass I46 = new(Pulmonic Lateral Affricate, Places.Glottal);
  ImpossibleClass I47 = new(Ejective Lateral Fricative Affricate, Places.Bilabial);
  ImpossibleClass I48 = new(Ejective Lateral Fricative Affricate Labial Dental, Places.LabioDental);
  ImpossibleClass I49 = new(Ejective Lateral Fricative Affricate, Places.Pharyngeal);
  ImpossibleClass I50 = new(Ejective Central Affricate, Places.Glottal);
  ImpossibleClass I51 = new(Ejective Lateral Affricate, Places.Bilabial);
  ImpossibleClass I52 = new(Ejective Lateral Affricate Labial Dental, Places.LabioDental);
  ImpossibleClass I53 = new(Ejective Lateral Affricate, Places.Pharyngeal);
  ImpossibleClass I54 = new(Ejective Lateral Affricate, Places.Glottal);
  ImpossibleClass I55 = new(Ejective Tenuis Click Affricate, Places.Velar);
  ImpossibleClass I56 = new(Ejective Tenuis Click Affricate, Places.Uvular);
  ImpossibleClass I57 = new(Ejective Tenuis Click Affricate, Places.Pharyngeal);
  ImpossibleClass I58 = new(Ejective Nasal Click Affricate, Places.Velar);
  ImpossibleClass I59 = new(Ejective Nasal Click Affricate, Places.Uvular);
  ImpossibleClass I60 = new(Ejective Nasal Click Affricate, Places.Pharyngeal);
  ImpossibleClass I61 = new(Ejective Tenuis Lateral Click Affricate, Places.Bilabial);
  ImpossibleClass I62 = new(Ejective Tenuis Lateral Click Affricate Labial Dental, Places.LabioDental);
  ImpossibleClass I63 = new(Ejective Tenuis Lateral Click Affricate, Places.Velar);
  ImpossibleClass I64 = new(Ejective Tenuis Lateral Click Affricate, Places.Uvular);
  ImpossibleClass I65 = new(Ejective Tenuis Lateral Click Affricate, Places.Pharyngeal);
}

//======================================================================

namespace DiacriticModifiers {
  DiacriticClass UndefinedEscapeCharacter     = new("Undefined escape character", null, "*");
  DiacriticClass Nasalized                    = new("Nasalized", "\u0303", "_~");
  DiacriticClass Centralized                  = new("Centralized", "\u0308", "_\"");
  DiacriticClass Advanced                     = new("Advanced", "\u031F", "_+");
  DiacriticClass Retracted                    = new("Retracted", "\u0320", "_-");
  DiacriticClass RisingTone                   = new("RisingTone ", "\u030C", "_R");
  DiacriticClass Voiceless                    = new("Voiceless", "\u0325", "_0");
  DiacriticClass Implosive                    = new("Implosive", null, "_<");
  DiacriticClass Syllabic                     = new("Syllabic", "\u0329", "_=");
  DiacriticClass Ejective                     = new("Ejective", "\u02BC", "_>");
  DiacriticClass Pharyngealized               = new("Pharyngealized ", "\u02E4", "_?\\");
  DiacriticClass FallingTone                  = new("Falling tone", "\u0302", "_F");
  DiacriticClass NonSyllabic                  = new("Non-syllabic", "\u032F", "_^");
  DiacriticClass NoAudibleRelease             = new("No audible release", "\u031A", "_}");
  DiacriticClass RhoticHook                   = new("Rhotic hook", "\u02DE", "`");
  DiacriticClass AdvancedTongueRoot           = new("Advanced tongue root ", "\u0318", "_A");
  DiacriticClass Apical                       = new("Apical", "\u033A", "_a");
  DiacriticClass ExtraLowTone                 = new("Extra low tone", "\u030F", "_B");
  DiacriticClass LessRounded                  = new("Less rounded", "\u031C", "_c");
  DiacriticClass Dental                       = new("Dental", "\u032A", "_d");
  DiacriticClass VelarizedOrPharyngealized    = new("Velarized or Pharyngealized", "\u0334", "_e");
  DiacriticClass GlobalFall                   = new("Global fall", "\u2198", "<F>");
  DiacriticClass Velarized                    = new("Velarized", "\u02E0", "_G");
  DiacriticClass HighTone                     = new("High tone", "\u0301", "_H");
  DiacriticClass Aspirated                    = new("Aspirated", "\u02B0", "_h");
  DiacriticClass Palatalized                  = new("Palatalized", "\u02B2", "_j");
  DiacriticClass CreakyVoiced                 = new("Creaky voiced", "\u0330", "_k");
  DiacriticClass LowTone                      = new("Low tone", "\u0300", "_L");
  DiacriticClass LateralRelease               = new("Lateral release", "\u02E1", "_l");
  DiacriticClass MidTone                      = new("Mid tone", "\u0304", "_M");
  DiacriticClass Laminal                      = new("Laminal", "\u033B", "_m");
  DiacriticClass LinguoLabial                 = new("Linguo-Labial", "\u033C", "_N");
  DiacriticClass NasalRelease                 = new("Nasal release", "\u207F", "_n");
  DiacriticClass MoreRounded                  = new("More rounded", "\u0339", "_O");
  DiacriticClass Lowered                      = new("Lowered", "\u031E", "_o");
  DiacriticClass RetractedTongueRoot          = new("Retracted tongue root", "\u0319", "_q");
  DiacriticClass GlobalRise                   = new("Global rise", "\u2197", "<R>");
  DiacriticClass Raised                       = new("Raised", "\u031D", "_r");
  DiacriticClass ExtraHighTone                = new("Extra high tone", "\u030B", "_T");
  DiacriticClass BreathyVoiced                = new("Breathy voiced", "\u0324", "_t");
  DiacriticClass Voiced                       = new("Voiced", "\u032C", "_v");
  DiacriticClass Labialized                   = new("Labialized", "\u02B7", "_W");
  DiacriticClass ExtraShort                   = new("Extra short", "\u02D8", "_X");
  DiacriticClass MidCentralized               = new("Mid-centralized", "\u033D", "_x");
  DiacriticClass Downstep                     = new("Down-step", "↓", "!");
  DiacriticClass Upstep                       = new("Up-step", "↑", "^");
  DiacriticClass Long                         = new("Long", "ː", ":");
  DiacriticClass HalfLong                     = new("Half-long", "ˑ", ":\\");
  DiacriticClass IndeterminacyinFrenchVowels  = new("Indeterminacy in french vowels", null, "/");
  DiacriticClass BeginNonsegmentalNotation    = new("Begin Non-segmental notation", null, "<");
  DiacriticClass Endnonsegmentalnotation      = new("End non-segmental notation", "", ">");
  DiacriticClass Voicedepiglottalfricative    = new("Voiced epiglottal fricative", "ʢ", "<\\");
  DiacriticClass Postalveolarclick            = new("Post-alveolar click", "ǃ", "!\\");
  DiacriticClass MinorGroup                   = new("Minor group", " | ", " | ");
  DiacriticClass Dentalclick                  = new("Dental click", "ǀ", " | \\");
  DiacriticClass MajorGroup                   = new("Major group", "‖", " |  | ");
  DiacriticClass Alveolarlateralclick         = new("Alveolar lateral click", "ǁ", " | \\ | \\");
  DiacriticClass Palatalclick                 = new("Palatal click", "ǂ", "");
  DiacriticClass VoicelessDescender           = new("Voiceless descender", "\u030A", "");
  DiacriticClass CombiningMacron              = new("Combining macron", "\u0331", "");
  DiacriticClass TieBarBelow                  = new("Tie-bar below", "\u035C", "");
  DiacriticClass TieBarAbove                  = new("Tie-bar above", "\u0361", "");
  DiacriticClass ReadyMadeCombination         = new("Ready made combination", "\u026B", "");
  DiacriticClass Becomes                      = new("Becomes", "→", "");
  DiacriticClass Separator                    = new("Separator", "", "-");

// Glyphs are not in the font
//    Linkingmark                = new DiacriticClass("Linking Mark", "\u203f", "-\\");
//    LowRisingTone                = new DiacriticClass("Low rising tone", "\u1DC5", "_B_L");
//    HighRisingTone               = new DiacriticClass("High rising tone", "\u1DC4", "_H_T");
//    RisingFallingTone            = new DiacriticClass("Rising falling tone", "\u1DC8", "_R_F");
}
//======================================================================

IPA.NullSegment = new SegmentClass(Tex.bigotimes, "!?", true);


