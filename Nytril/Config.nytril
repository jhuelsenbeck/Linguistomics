using Format, Units, Math, IO, LinkTypes;

//======================================================================

namespace Info {
  Title          = "Understanding Linguistic History Using an Event-Based Model";
  Generations    = 5_000_000;
  PreBurn        = 15_000;
  LinkMin        = 5;
  RunIndex       = 0;
  Runs           = 1..3;
  EXEFolder      = Folders.Repository;
  EXERelative    = Folder("x64") Folder("release");
  ReaderEXE      = EXEFolder Folder("TongueTwisterReader") EXERelative FileName("tonguetwisterreader.exe");
  MCMCEXE        = EXEFolder Folder("TongueTwister") EXERelative FileName("tonguetwister.exe");
  MacFolder      = Folder("../../../../../");

  MacReaderEXE   = MacFolder Folder("TongueTwisterReader") FileName("ttread");
  MacMCMCEXE     = MacFolder Folder("TongueTwister") FileName("tonguetwister");
  ImageFolder    = Folders.Source Folder("Images");
  ConfigFile     = FileName("config") Extensions.JSON;
  ExperimentRoot = Folders.Repository Folder("Experiments");
  WordFileName   = FileName("Words") Extensions.Nytril;
  ExecuteFolder  = Folder("Execute");
  AlignmentFile  = ExecuteFolder FileName("alignments") Extensions.Nytril;
  ParametersFile = ExecuteFolder FileName("parameters") Extensions.Nytril;
  TreeFile       = ExecuteFolder FileName("consensus.tre");
  OutFileName    = ExecuteFolder Folder("out");
}

namespace DocMetrics {
  ExtentClass DocExtent = new(new(0.75 inches, 0.9 inches, 0.75 inches, 1 inches));
}

ShowString(text) = Span {
  if (text is valid) {
    TextColor: Style.StringColor;
    text.ToQuoted;
  }
  else
    "Empty";
};

//======================================================================

class ConfigFileClass {
  DataSetClass       Data;
  RunExperimentClass Run;
  NodeClass          Prior;

  Constructor(DataSetClass data, RunExperimentClass run, NodeClass prior) {
    Data  = data;
    Run   = run;
    Prior = prior;
  }

  AddScope = TextBlock {
    IndentSpace: 2;
    Begin: "{";
    End: "}";
  };

  AddWord(WordClass word, last) = Span {
    "  {";
    Variable("Taxon");
    var n = word.Language.GetVariable.Name;
    ShowString(n);
    CommaSpace;
    Space * (Data.MaxLanguageName - n.Length);
    Variable("Segments");
    "[";
    Span {
      Separator: CommaSpace;
      (each word.Padded).Index;
    };
    Span {
      "]}";
      if (not last)
         ",";
    };
  };

  AddCognate(CognateClass cognate, last) = TextBlock {
    Span {
      "{";
      Variable("Name");
      ShowString(cognate.GetSource);
      CommaSpace;
      Variable("Data"); "[";
    };

    TextBlock {
      var good = cognate.Words.FindSlice(w => w.Aligned is valid);
      var lg   = good.Length-1;
      foreach (var word in good)
        AddWord(word, each0 == lg);
    };

    Span {
      "]}";
      if (not last)
        Comma;
    };
  };

  Variable(string v) = Span {
    TextColor: Style.VariableColor;
    (v as string).ToQuoted; ": ";
  };

  ArraySpan(string v) = Span {
    Begin: Variable(v) {"["};
    End: "],";
  };

  AddVar(string name, text, comma=true) = Span {
    Variable(name);
    text;
    if (comma)
      Comma;
  };

  StringVar(string name, text, comma=true) = AddVar(name, ShowString(text), comma);

  BoolVar(name, value, comma=true) = StringVar(name, value ? "Yes" : "No", comma);

  Show = AddScope {
    TextFixed: true;
    TextHeight: 9 pts;

    Span {
      Variable("Tree");
      Quote;
      Nexus.Newick(Prior);
      ";"; Quote; ",";
    };

    TextBlock {
      Span {Variable("NumberOfStates"); Data.UniqueSegments.Length; CommaSpace};

      Span {Variable("McmcSettings"); "{"};
        StringVar("Model", Run.Model.Name.ToLower);
        BoolVar("OnlyCompleteWords", false);
        AddVar("Seed", Run.Seed);
        BoolVar("CalcMarginal", Run.Marginal);
        AddVar("PrintFreq", Run.Print);
        if (Run.Marginal) {
          AddVar("FirstBurnLength", 1_000_000);
          AddVar("PreburnLength", Run.Config.PreBurn);
          AddVar("TuneLength", 0);
          AddVar("BurnLength", 10_000);
          AddVar("SampleLength", 25_000);
          AddVar("SampleFreq", 50);
        }
        else {
          AddVar("NumCycles", Run.Config.Generations);
          AddVar("SampleFreq", 100);
        }
        AddVar("TreeLengthPriorVal", 0.15, false);
      "},";
    };

/*
    Model              -- Substitution model (jc69/gtr/custom)
    BrlenPriorVal      -- Parameter of exponential branch length prior
    OnlyCompleteWords  -- Use only completely sampled words (no/yes)
                       -- Number of gamma rate categories (=1 is no rate variation)
                       -- Number of gamma indel categories (=1 is no indel rate variation)
    CalcMarginal       -- Calculate marginal likelihood (no/yes)
    Seed               -- Seed for pseudo random number generator
    NumCycles          -- Number of MCMC cycles
    PrintFreq          -- Print-to-screen frequency
    SampleFreq         -- Chain sample frequency
    CheckPtFreq        -- Check point file frequency
    NumTunings         -- Number of tunings
    TuneLength         -- Tune length
    PreburnLength      -- Preburnin length
    StoneSampleLength  -- Sample length
    StoneSampleFreq    -- Stone sample frequency
*/

    ArraySpan("Taxa") {
      Separator: CommaSpace;
      ShowString(each (each Data.Taxa).Variable);
    };

    ArraySpan("PriorFrequencies") {
      TextDigits: 6;
      Separator: CommaSpace;
      (each Data.UniqueSegments).UsedFrequency;
    };

    ArraySpan("PartitionSets") {
      Separator: Comma;
      foreach (var partition in Data.Rule.Partitions) {
        Span {
          "{";
          Variable("Name");
          ShowString(partition.Name);
          CommaSpace;
          Variable("Set");
          "[";
          Span {
            Separator: CommaSpace;
            (each partition.Segments).Index;
          };
          "]}";
        }
      }
    };

    Span {
      Variable("Words"); "[";
    };
    TextBlock {
      var last = Data.UsedCognates.Length-1;
      foreach (var cognate in Data.UsedCognates)
        AddCognate(cognate, each0 == last);
    };
    "]";
  };
}
//======================================================================

