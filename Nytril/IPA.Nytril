using Format, Units
//======================================================================

with IPA {
  flags Props {
    None,
    Voiced,
    Click,
    Ejective,
    Implosive,
    Rounded,
    Impossible,
  }

  enum Categories {
    Vowel,
    PulmonicConsonant,
    Consonant,
    PulmonicAffricate,
    EjectiveAffricate,
    Other
  }

  enum Opens {
    Close,
    NearClose,
    CloseMid,
    Mid,
    OpenMid,
    NearOpen,
    Open
  }

  enum Backnesses {
    Front,
    NearFront,
    Central,
    NearBack,
    Back,
  }

  enum Places {
    Bilabial,
    Labial,
    LabialVelar,
    LabialPalatal,
    LabioDental,
    LinguoLabial,
    Dental,
    Alveolar,
    AlveoloPalatal,
    PostAlveolar,
    Retroflex,
    Palatal,
    PalatoAlveolar,
    Velar,
    Uvular,
    Pharyngeal,
    Glottal,
  }

  enum Manners {
    Stop,
    Nasal,
    SibilantFricative,
    Fricative,
    Approximant,
    TapFlap,
    Trill,
    LateralFricative,
    LateralApproximant,
    LateralTapFlap,
    Tenuis,
    TenuisLateral,
    Plosive,
    Implosive,
    Affricate,
    Sibilant,
    NonSibilant,
    Central,
    Lateral
  }

  let FindPulmonic(sound, data) = sound.Category == Categories.PulmonicConsonant and sound.Place == data.Place
  let FindPulmonicPlace(place)  = Sounds.Contains(FindPulmonic{Place: place})
  let PulmonicPlaces            = Places.FindSlice(FindPulmonicPlace)

  let Set(text, category, place, manner, prop) = {
    Popup: SoundPopup,
    Text: text,
    Category: category,
    Place: place,
    Manner: manner,
    Prop: prop,
  }

  let VO(text, open, backness, prop) = {
    Popup: SoundPopup,
    Text: text,
    Category: Categories.Vowel,
    Open: open,
    Backness: backness,
    Prop: prop,
  }

  let PC(text, place, manner, prop)  = Set(text, Categories.PulmonicConsonant, place, manner, prop)
  let NPC(text, place, manner, prop) = Set(text, Categories.Consonant, place, manner, prop)
  let PA(text, place, manner, prop)  = Set(text, Categories.PulmonicAffricate, place, manner, prop)
  let EA(text, place, manner, prop)  = Set(text, Categories.EjectiveAffricate, place, manner, prop)
  let OT(text, place, manner, prop)  = Set(text, Categories.Other, place, manner, prop)
  let NPEjective(sound, manner)      = NPC(sound.Text EjectiveMark, sound.Place, manner, Props.Ejective)
  let Imp(category, place, manner, prop) = Set(null, category, place, manner, prop)

  let EqualOther(sound) = sound.Category == Categories.Other

  let EqualSound(sound, data) =
    sound.Category == data.Category and
    sound.Place == data.Place and
    sound.Manner == data.Manner

  let VowelPair(sound, data) =
    sound.Category == Categories.Vowel and
    sound.Open == data.Open and
    sound.Backness == data.Backness

  let Impossible = [
    Imp(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Nasal, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Glottal, Manners.Nasal, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Stop, Props.Voiced),
    Imp(Categories.PulmonicConsonant, Places.Glottal, Manners.Stop, Props.Voiced),
    Imp(Categories.PulmonicConsonant, Places.Bilabial, Manners.SibilantFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.LabioDental, Manners.SibilantFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.LinguoLabial, Manners.SibilantFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Velar, Manners.SibilantFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Uvular, Manners.SibilantFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.SibilantFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Glottal, Manners.SibilantFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Velar, Manners.Trill, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Glottal, Manners.Trill, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Velar, Manners.TapFlap, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Glottal, Manners.TapFlap, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Bilabial, Manners.LateralFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.LabioDental, Manners.LateralFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.LateralFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Glottal, Manners.LateralFricative, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Bilabial, Manners.LateralApproximant, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.LabioDental, Manners.LateralApproximant, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.LateralApproximant, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Glottal, Manners.LateralApproximant, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Bilabial, Manners.LateralTapFlap, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.LabioDental, Manners.LateralTapFlap, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.LateralTapFlap, Props.Impossible),
    Imp(Categories.PulmonicConsonant, Places.Glottal, Manners.LateralTapFlap, Props.Impossible),
    Imp(Categories.Consonant, Places.Bilabial, Manners.LateralFricative, Props.Ejective | Props.Impossible),
    Imp(Categories.Consonant, Places.LabioDental, Manners.LateralFricative, Props.Ejective | Props.Impossible),
    Imp(Categories.Consonant, Places.Pharyngeal, Manners.LateralFricative, Props.Ejective | Props.Impossible),
    Imp(Categories.Consonant, Places.Velar, Manners.Tenuis, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Uvular, Manners.Tenuis, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Pharyngeal, Manners.Tenuis, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Velar, Manners.Nasal, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Uvular, Manners.Nasal, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Pharyngeal, Manners.Nasal, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Bilabial, Manners.TenuisLateral, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.LabioDental, Manners.TenuisLateral, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Velar, Manners.TenuisLateral, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Uvular, Manners.TenuisLateral, Props.Click | Props.Impossible),
    Imp(Categories.Consonant, Places.Pharyngeal, Manners.TenuisLateral, Props.Click | Props.Impossible),

    Imp(Categories.PulmonicAffricate, Places.Bilabial, Manners.Sibilant, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.LabioDental, Manners.Sibilant, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.Velar, Manners.Sibilant, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.Uvular, Manners.Sibilant, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.Pharyngeal, Manners.Sibilant, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.Glottal, Manners.Sibilant, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.Bilabial, Manners.Lateral, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.LabioDental, Manners.Lateral, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.Pharyngeal, Manners.Lateral, Props.Impossible),
    Imp(Categories.PulmonicAffricate, Places.Glottal, Manners.Lateral, Props.Impossible),

    Imp(Categories.EjectiveAffricate, Places.Glottal, Manners.Central, Props.Impossible),
    Imp(Categories.EjectiveAffricate, Places.Bilabial, Manners.Lateral, Props.Impossible),
    Imp(Categories.EjectiveAffricate, Places.LabioDental, Manners.Lateral, Props.Impossible),
    Imp(Categories.EjectiveAffricate, Places.Pharyngeal, Manners.Lateral, Props.Impossible),
    Imp(Categories.EjectiveAffricate, Places.Glottal, Manners.Lateral, Props.Impossible),
  ]                       									

  with Sounds {
    //==================================
    // Pulmonic Consonants
    //==================================

    // Nasal					
    let VlBilabialNasal           = PC("m̥", Places.Bilabial, Manners.Nasal, Props.None)
    let VdBilabialNasal           = PC("m", Places.Bilabial, Manners.Nasal, Props.Voiced)
    let VdLabioDentalNasal        = PC("ɱ", Places.LabioDental, Manners.Nasal, Props.Voiced)
    let VdLinguoLabioNasal        = PC("n̼", Places.LinguoLabial, Manners.Nasal, Props.Voiced)

    let VlAlveolarNasal           = PC("n̥", Places.Alveolar, Manners.Nasal, Props.None)
    let VdAlveolarNasal           = PC("n", Places.Alveolar, Manners.Nasal, Props.Voiced)
    let VlRetroFlexNasal          = PC("ɳ̊", Places.Retroflex, Manners.Nasal, Props.None)
    let VdRetroFlexNasal          = PC("ɳ", Places.Retroflex, Manners.Nasal, Props.Voiced)
    let VlPalatalNasal            = PC("ɲ̊", Places.Palatal, Manners.Nasal, Props.None)
    let VdPalatalNasal            = PC("ɲ", Places.Palatal, Manners.Nasal, Props.Voiced)
    let VlVelarNasal              = PC("ŋ̊", Places.Velar, Manners.Nasal, Props.None)
    let VdVelarNasal              = PC("ŋ", Places.Velar, Manners.Nasal, Props.Voiced)
    let VdUvularNasal             = PC("ɴ", Places.Uvular, Manners.Nasal, Props.Voiced)
														
    // Stop
    let VlBilabialStop            = PC("p", Places.Bilabial, Manners.Stop, Props.None)
    let VdBilabialStop            = PC("b", Places.Bilabial, Manners.Stop, Props.Voiced)
    let VlLabioDentalStop         = PC("p̪", Places.LabioDental, Manners.Stop, Props.None)
    let VdLabioDentalStop         = PC("b̪", Places.LabioDental, Manners.Stop, Props.Voiced)
    let VlLinguoLabialStop        = PC("t̼", Places.LinguoLabial, Manners.Stop, Props.None)
    let VdLinguoLabialStop        = PC("d̼", Places.LinguoLabial, Manners.Stop, Props.Voiced)
    let VlAlveolarStop            = PC("t", Places.Alveolar, Manners.Stop, Props.None)
    let VdAlveolarStop            = PC("d", Places.Alveolar, Manners.Stop, Props.Voiced)
    let VlRetroflexStop           = PC("ʈ", Places.Retroflex, Manners.Stop, Props.None)
    let VdRetroflexStop           = PC("ɖ", Places.Retroflex, Manners.Stop, Props.Voiced)
    let VlPalatalStop             = PC("c", Places.Palatal, Manners.Stop, Props.None)
    let VdPalatalStop             = PC("ɟ", Places.Palatal, Manners.Stop, Props.Voiced)
    let VlVelarStop               = PC("k", Places.Velar, Manners.Stop, Props.None)
    let VdVelarStop               = PC("ɡ", Places.Velar, Manners.Stop, Props.Voiced)
    let VlUvularStop              = PC("q", Places.Uvular, Manners.Stop, Props.None)
    let VdUvularStop              = PC("ɢ", Places.Uvular, Manners.Stop, Props.Voiced)
    let VdEpiglottalStop          = PC("ʡ", Places.Pharyngeal, Manners.Stop, Props.None)
    let GlottalStop               = PC("ʔ", Places.Glottal, Manners.Stop, Props.None)
		
    // Sibilant Fricative										
    let VlAlveolarSibFricative       = PC("s", Places.Alveolar, Manners.SibilantFricative, Props.None)
    let VdAlveolarSibFricative       = PC("z", Places.Alveolar, Manners.SibilantFricative, Props.Voiced)
    let VlPostalveolarSibFricative   = PC("ʃ", Places.PostAlveolar, Manners.SibilantFricative, Props.None)
    let VdPostalveolarSibFricative   = PC("ʒ", Places.PostAlveolar, Manners.SibilantFricative, Props.Voiced)
    let VlRetroflexSibFricative      = PC("ʂ", Places.Retroflex, Manners.SibilantFricative, Props.None)
    let VdRetroflexSibFricative      = PC("ʐ", Places.Retroflex, Manners.SibilantFricative, Props.Voiced)
    let VlPalatalSibFricative        = PC("ɕ", Places.Palatal, Manners.SibilantFricative, Props.None)
    let VdPalatalSibFricative        = PC("ʑ", Places.Palatal, Manners.SibilantFricative, Props.Voiced)

    // Fricative										
    let VlBilabialFricative          = PC("ɸ", Places.Bilabial, Manners.Fricative, Props.None)
    let VdBilabialFricative          = PC("β", Places.Bilabial, Manners.Fricative, Props.Voiced)
    let VlLabiodentalFricative       = PC("f", Places.LabioDental, Manners.Fricative, Props.None)
    let VdLabiodentalFricative       = PC("v", Places.LabioDental, Manners.Fricative, Props.Voiced)
    let VlLinguoLabialFricative      = PC("θ̼", Places.LinguoLabial, Manners.Fricative, Props.None)
    let VdLinguoLabialFricative      = PC("ð̼", Places.LinguoLabial, Manners.Fricative, Props.Voiced)
    let VlDentalFricative            = PC("θ", Places.Dental, Manners.Fricative, Props.None)
    let VdDentalFricative            = PC("ð", Places.Dental, Manners.Fricative, Props.Voiced)
    let VlAlveolarFricative          = PC("θ̠", Places.Alveolar, Manners.Fricative, Props.None)
    let VdAlveolarFricative          = PC("ð̠", Places.Alveolar, Manners.Fricative, Props.Voiced)
    let VlPostaveolarFricative       = PC("ɹ̠̊", Places.PostAlveolar, Manners.Fricative, Props.None)
    let VdPostalveolarFricative      = PC("ɹ̝̊", Places.PostAlveolar, Manners.Fricative, Props.Voiced)
    let VdRetroflexFricative         = PC("ɻ˔", Places.Retroflex, Manners.Fricative, Props.Voiced)
    let VlPalatalFricative           = PC("ç", Places.Palatal, Manners.Fricative, Props.None)
    let VdPalatalFricative           = PC("ʝ", Places.Palatal, Manners.Fricative, Props.Voiced)
    let VlVelarFricative             = PC("x", Places.Velar, Manners.Fricative, Props.None)
    let VdVelarFricative             = PC("ɣ", Places.Velar, Manners.Fricative, Props.Voiced)
    let VlUvularFricative            = PC("χ", Places.Uvular, Manners.Fricative, Props.None)
    let VdUvularFricative            = PC("ʁ", Places.Uvular, Manners.Fricative, Props.Voiced)
    let VlPharyngealFricative        = PC("ħ", Places.Pharyngeal, Manners.Fricative, Props.None)
    let VdPharyngealFricative        = PC("ʕ", Places.Pharyngeal, Manners.Fricative, Props.Voiced)
    let VlGlottalFricative           = PC("h", Places.Glottal, Manners.Fricative, Props.None)
    let VlMultiplePlaceFricative     = PC("ɦ", Places.Glottal, Manners.Fricative, Props.Voiced)
														
    // Approximant										
    let VlLabioDentalApproximant     = PC("ʋ̥", Places.LabioDental, Manners.Approximant, Props.None)
    let VdLabioDentalApproximant     = PC("ʋ", Places.LabioDental, Manners.Approximant, Props.Voiced)
    let VlPostalveolarApproximant    = PC("ɹ̥", Places.Alveolar, Manners.Approximant, Props.None)
    let VdPostalveolarApproximant    = PC("ɹ", Places.Alveolar, Manners.Approximant, Props.Voiced)
    let VlRetroflexApproximant       = PC("ɻ̊", Places.Retroflex, Manners.Approximant, Props.None)
    let VdRetroflexApproximant       = PC("ɻ", Places.Retroflex, Manners.Approximant, Props.Voiced)
    let VlPalatalApproximant         = PC("j̊", Places.Palatal, Manners.Approximant, Props.None)
    let VdPalatalApproximant         = PC("j", Places.Palatal, Manners.Approximant, Props.Voiced)
    let VlVelarApproximant           = PC("ɰ̊", Places.Velar, Manners.Approximant, Props.None)
    let VdVelarApproximant           = PC("ɰ", Places.Velar, Manners.Approximant, Props.Voiced)
    let VdGlottalApproximant         = PC("ʔ̞", Places.Glottal, Manners.Approximant, Props.Voiced)
														
    // Tap or Flap										
    let VdBilabialDentalFlap         = PC("ⱱ̟", Places.Bilabial, Manners.TapFlap, Props.Voiced)
    let VdLabioDentalFlap            = PC("ⱱ", Places.LabioDental, Manners.TapFlap, Props.Voiced)
    let VdLingualLabialStop          = PC("ɾ̼", Places.LinguoLabial, Manners.TapFlap, Props.Voiced)
    let VlAlveolarFlap               = PC("ɾ̥", Places.Alveolar, Manners.TapFlap, Props.None)
    let VdAlveolarTap                = PC("ɾ", Places.Alveolar, Manners.TapFlap, Props.Voiced)
    let VlRetroflexFlap              = PC("ɽ̊", Places.Retroflex, Manners.TapFlap, Props.None)
    let VdRetroflexFlap              = PC("ɽ", Places.Retroflex, Manners.TapFlap, Props.Voiced)
    let VdUvularFlap                 = PC("ɢ̆", Places.Uvular, Manners.TapFlap, Props.Voiced)
    let VdPharyngealFlap             = PC("ʡ̆", Places.Pharyngeal, Manners.TapFlap, Props.Voiced)
														
    // Trill											
    let VlBilabialTrill              = PC("ʙ̥", Places.Bilabial, Manners.Trill, Props.None)
    let VdBilabialTrill              = PC("ʙ", Places.Bilabial, Manners.Trill, Props.Voiced)
    let VlAlveolarTrill              = PC("r̥", Places.Alveolar, Manners.Trill, Props.None)
    let VdAlveolarTrill              = PC("r", Places.Alveolar, Manners.Trill, Props.Voiced)
    let VlRetroflexTrill             = PC("ɽ̊r̥", Places.Retroflex, Manners.Trill, Props.None)
    let VdRetroflexTrill             = PC("ɽr", Places.Retroflex, Manners.Trill, Props.Voiced)
    let VlUvularTrill                = PC("ʀ", Places.Uvular, Manners.Trill, Props.None)
    let VdUvularTrill                = PC("ʀ", Places.Uvular, Manners.Trill, Props.Voiced)
    let VlPharyngealTrill            = PC("H", Places.Pharyngeal, Manners.Trill, Props.None)
    let VdPharyngealTrill            = PC("ʢ", Places.Pharyngeal, Manners.Trill, Props.Voiced)
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = PC("ɬ", Places.Alveolar, Manners.LateralFricative, Props.None)
    let VdAlveolarLateralFricative   = PC("ɮ", Places.Alveolar, Manners.LateralFricative, Props.Voiced)
    let VlRetroflexLateralFricative  = PC("ɭ̊˔", Places.Retroflex, Manners.LateralFricative, Props.None)
    let VdRetroflexLateralFricative  = PC("ɭ˔", Places.Retroflex, Manners.LateralFricative, Props.Voiced)
    let VlAlveolarPalatalFricative   = PC("ʎ̝̊", Places.Palatal, Manners.LateralFricative, Props.None)
    let VdAlveolarPalatalFricative   = PC("ʎ̝", Places.Palatal, Manners.LateralFricative, Props.Voiced)
    let VlVelarPalatalFricative      = PC("ʟ̝̊", Places.Velar, Manners.LateralFricative, Props.None)
    let VdVelarPalatalFricative      = PC("ʟ̝", Places.Velar, Manners.LateralFricative, Props.Voiced)
														
    // LateralApproximant								
    let VlAlveolarLateralApproximant = PC("l̥", Places.Alveolar, Manners.LateralApproximant, Props.None)
    let VdAlveolarLateralApproximant = PC("l", Places.Alveolar, Manners.LateralApproximant, Props.Voiced)
    let VlRetroflexLateral           = PC("ɭ̊", Places.Retroflex, Manners.LateralApproximant, Props.None)
    let VdRetroflexLateral           = PC("ɭ", Places.Retroflex, Manners.LateralApproximant, Props.Voiced)
    let VlPalatalLateral             = PC("ʎ̥", Places.Palatal, Manners.LateralApproximant, Props.None)
    let VdPalatalLateral             = PC("ʎ", Places.Palatal, Manners.LateralApproximant, Props.Voiced)
    let VlVelarLateral               = PC("ʟ̥", Places.Velar, Manners.LateralApproximant, Props.None)
    let VdVelarLateral               = PC("ʟ", Places.Velar, Manners.LateralApproximant, Props.Voiced)
    let VdUvularLateral              = PC("ʟ̠", Places.Uvular, Manners.LateralApproximant, Props.Voiced)

    // Lateral tap/flap
    let VdAlveolarLateralFlap        = PC("ɺ", Places.Alveolar, Manners.LateralTapFlap, Props.Voiced)
    let VdRetroflexLateralFlap       = PC("ɭ̆", Places.Retroflex, Manners.LateralTapFlap, Props.Voiced)
    let VdPalatalLateralFlap         = PC("ʎ̆", Places.Palatal, Manners.LateralTapFlap, Props.Voiced)
    let VdVelarLateralTap            = PC("L̆", Places.Velar, Manners.LateralTapFlap, Props.Voiced)

    //==================================
    // Non-Pulmonic Consonants
    //==================================

    // Stops
    let VlBilabialStopEjective       = NPEjective(VlBilabialStop, Manners.Stop)
    let VlAveolarStopEjective        = NPEjective(VlAlveolarStop, Manners.Stop)
    let VlRetroflexStopEjective      = NPEjective(VlRetroflexStop, Manners.Stop)
    let VlPalatalStopEjective        = NPEjective(VlPalatalStop, Manners.Stop)
    let VlVelarStopEjective          = NPEjective(VlVelarStop, Manners.Stop)
    let VlUvularStopEjective         = NPEjective(VlUvularStop, Manners.Stop)
    let VlEpiglottalStopEjective     = NPEjective(VdEpiglottalStop, Manners.Stop)

    // Fricatives
    let VlBilabialFricativeEjective     = NPEjective(VlBilabialFricative, Manners.Fricative)
    let VlLabiodentalFricativeEjective  = NPEjective(VlLabiodentalFricative, Manners.Fricative)
    let VlDentalFricativeEjective       = NPEjective(VlDentalFricative, Manners.Fricative)
    let VlAlveolarFricativeEjective     = NPEjective(VlAlveolarSibFricative, Manners.Fricative)
    let VlPostalveolarFricativeEjective = NPEjective(VlPostalveolarSibFricative, Manners.Fricative)
    let VlRetroflexFricativeEjective    = NPEjective(VlRetroflexSibFricative, Manners.Fricative)
    let VlPalatalFricativeEjective      = NPEjective(VlPalatalSibFricative, Manners.Fricative)
    let VlVelarFricativeEjective        = NPEjective(VlVelarFricative, Manners.Fricative)
    let VlUvularFricativeEjective       = NPEjective(VlUvularFricative, Manners.Fricative)

    // Lateral Fricatives
    let VlPostalveolarLatFricEjective = NPEjective(VlAlveolarLateralFricative, Manners.LateralFricative)

    // Clicks
    let VlBilabialTenuisClick        = NPC("ʘ", Places.Bilabial, Manners.Tenuis, Props.Click)
    let VdBilabialTenuisClick        = NPC("ʘ̬", Places.Bilabial, Manners.Tenuis, Props.Click | Props.Voiced)
    let VlDentalTenuisClick          = NPC("ǀ", Places.Dental, Manners.Tenuis, Props.Click)
    let VdDentalTenuisClick          = NPC("ǀ̬", Places.Dental, Manners.Tenuis, Props.Click | Props.Voiced)
    let VlAlveolarTenuisClick        = NPC("ǃ", Places.Alveolar, Manners.Tenuis, Props.Click)
    let VdAlveolarTenuisClick        = NPC("ǃ̬", Places.Alveolar, Manners.Tenuis, Props.Click | Props.Voiced)
    let VlPalatalTenuisClick         = NPC("ǂ", Places.Palatal, Manners.Tenuis, Props.Click)
    let VdPalatalTenuisClick         = NPC("ǂ̬", Places.Palatal, Manners.Tenuis, Props.Click | Props.Voiced)

    let VlBilabialNasalClick         = NPC("ʘ̃", Places.Bilabial, Manners.Nasal, Props.Click)
    let VlDentalNasalClick           = NPC("ǀ̃", Places.Dental, Manners.Nasal, Props.Click)
    let VlAlveolarNasalClick         = NPC("ǃ̃", Places.Alveolar, Manners.Nasal, Props.Click)
    let VlPalatalNasalClick          = NPC("ǂ̃", Places.Palatal, Manners.Nasal, Props.Click)

    let VlAlveolarTenuisLateralClick = NPC("ǁ", Places.Alveolar, Manners.TenuisLateral, Props.Click)
    let VdAlveolarTenuisLateralClick = NPC("ǁ̬", Places.Alveolar, Manners.TenuisLateral, Props.Click | Props.Voiced)

    let VlBilabialImplosiveClick     = NPC("ɓ̥", Places.Bilabial, Manners.Implosive, Props.Implosive | Props.Click)
    let VdBilabialImplosiveClick     = NPC("ɓ", Places.Bilabial, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlAlveolarImplosiveClick     = NPC("ɗ̥", Places.Alveolar, Manners.Implosive, Props.Implosive | Props.Click)
    let VdAlveolarImplosiveClick     = NPC("ɗ", Places.Alveolar, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlRetroflexImplosiveClick    = NPC("ᶑ̊", Places.Retroflex, Manners.Implosive, Props.Implosive | Props.Click)
    let VdRetroflexImplosiveClick    = NPC("ᶑ", Places.Retroflex, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlPalatalImplosiveClick      = NPC("ʄ̊", Places.Palatal, Manners.Implosive, Props.Implosive | Props.Click)
    let VdPalatalImplosiveClick      = NPC("ʄ", Places.Palatal, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlVelarImplosiveClick        = NPC("ɠ̊", Places.Velar, Manners.Implosive, Props.Implosive | Props.Click)
    let VdVelarImplosiveClick        = NPC("ɠ", Places.Velar, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlUvularImplosiveClick       = NPC("ʛ̥", Places.Uvular, Manners.Implosive, Props.Implosive | Props.Click)
    let VdUvularImplosiveClick       = NPC("ʛ", Places.Uvular, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)

    //==================================
    // Pulmonic Affricates
    //==================================

    // Sibilants
    let VlAlveolarAffricate          = PA("ts", Places.Alveolar, Manners.Sibilant, Props.None)
    let VdAlveolarAffricate          = PA("dz", Places.Alveolar, Manners.Sibilant, Props.Voiced)
    let VlPostalveolarAffricate      = PA("t̠ʃ", Places.PalatoAlveolar, Manners.Sibilant, Props.None)
    let VdPostalveolarAffricate      = PA("d̠ʒ", Places.PalatoAlveolar, Manners.Sibilant, Props.Voiced)
    let VlRetroflexAffricate         = PA("ʈʂ", Places.Retroflex, Manners.Sibilant, Props.None)
    let VdRetroflexAffricate         = PA("ɖʐ", Places.Retroflex, Manners.Sibilant, Props.Voiced)
    let VlAlveoloPalatalAffricate    = PA("tɕ", Places.AlveoloPalatal, Manners.Sibilant, Props.None)
    let VdAlveoloPalatalAffricate    = PA("dʑ", Places.AlveoloPalatal, Manners.Sibilant, Props.Voiced)

    // Non-Sibilants
    let VlBilabialNSAffricate        = PA("pɸ", Places.Bilabial, Manners.NonSibilant, Props.None)
    let VdBilabialNSAffricate        = PA("bβ", Places.Bilabial, Manners.NonSibilant, Props.Voiced)
    let VlLabioDentalNSAffricate     = PA("p̪f", Places.LabioDental, Manners.NonSibilant, Props.None)
    let VdLabioDentalNSAffricate     = PA("b̪v", Places.LabioDental, Manners.NonSibilant, Props.Voiced)
    let VlDentalNSAffricate          = PA("t̪θ", Places.Dental, Manners.NonSibilant, Props.None)
    let VdDentalNSAffricate          = PA("d̪ð", Places.Dental, Manners.NonSibilant, Props.Voiced)
    let VlAlveolarNSAffricate        = PA("tɹ̝̊", Places.Alveolar, Manners.NonSibilant, Props.None)
    let VdAlveolarNSAffricate        = PA("dɹ̝", Places.Alveolar, Manners.NonSibilant, Props.Voiced)
    let VlPalatoAlveolarNSAffricate  = PA("t̠ɹ̠̊˔", Places.PalatoAlveolar, Manners.NonSibilant, Props.None)
    let VdPalatoAlveolarNSAffricate  = PA("d̠ɹ̠˔", Places.PalatoAlveolar, Manners.NonSibilant, Props.Voiced)
    let VlPalatalNSAffricate         = PA("cç", Places.Palatal, Manners.NonSibilant, Props.None)
    let VdPalatalNSAffricate         = PA("ɟʝ", Places.Palatal, Manners.NonSibilant, Props.Voiced)
    let VlVelarNSAffricate           = PA("kx", Places.Velar, Manners.NonSibilant, Props.None)
    let VdVelarNSAffricate           = PA("ɡɣ", Places.Velar, Manners.NonSibilant, Props.Voiced)
    let VlUvularNSAffricate          = PA("qχ", Places.Uvular, Manners.NonSibilant, Props.None)
    let VdEpiglottalNSAffricate      = PA("ʡʢ", Places.Pharyngeal, Manners.NonSibilant, Props.Voiced)
    let VlGlottalNSAffricate         = PA("ʔh", Places.Glottal, Manners.NonSibilant, Props.None)

    // Lateral
    let VlAlveolarLateralAffricate   = PA("tɬ̝̊", Places.Alveolar, Manners.Lateral, Props.None)
    let VdAlveolarLateralAffricate   = PA("dɮ", Places.Alveolar, Manners.Lateral, Props.Voiced)
    let VlRetroflexLateralAffricate  = PA("ʈɭ̊˔", Places.Retroflex, Manners.Lateral, Props.None)
    let VdPalatalLateralAffricate    = PA("cʎ̝̊", Places.Palatal, Manners.Lateral, Props.Voiced)
    let VlVelarLateralAffricate      = PA("kʟ̝̊", Places.Velar, Manners.Lateral, Props.None)
    let VdVelarLateralAffricate      = PA("ɡʟ̝", Places.Velar, Manners.Lateral, Props.Voiced)

    //==================================
    // Ejective Affricates
    //==================================

    // Central
    let VlAlveolarEjectiveAffricate       = EA("tsʼ", Places.Alveolar, Manners.Central, Props.None)
    let VlPalatoAlveolarEjectiveAffricate = EA("t̠ʃʼ", Places.PalatoAlveolar, Manners.Central, Props.None)
    let VlRetroflexEjectiveAffricate      = EA("ʈʂʼ", Places.Retroflex, Manners.Central, Props.None)
    let VlVelarEjectiveAffricate          = EA("kxʼ", Places.Velar, Manners.Central, Props.None)
    let VlUvularEjectiveAffricate         = EA("qχʼ", Places.Uvular, Manners.Central, Props.None)

    // Lateral
    let VlAlveolarLateralEjective         = EA("tɬʼ", Places.Alveolar, Manners.Lateral, Props.None)
    let VlPalatalLateralEjective          = EA("cʎ̝̊ʼ", Places.Palatal, Manners.Lateral, Props.None)
    let VlVelarLateralEjective            = EA("kʟ̝̊ʼ", Places.Velar, Manners.Lateral, Props.None)

/*
    let RaisedOpenFrontUnrounded     = Set("æ", Places.None, Manners.None, Props.None)
    let RhotacizedSchwa              = Set("ɚ", Places.None, Manners.None, Props.None)
    let RhotacizedOpenMidCentral     = Set("ɝ", Places.None, Manners.None, Props.None)
    let VelarizedVdAlveolarLateral   = Set("ɫ", Places.None, Manners.None, Props.None)
*/

    let VlLabialVelarFricative       = OT("ʍ", Places.LabialVelar, Manners.Fricative, Props.None)
    let VlAlveoloPalatalFricative1   = OT("ɕ", Places.AlveoloPalatal, Manners.Fricative, Props.None)
    let VlAlveoloPalatalFricative2   = OT("ʑ", Places.AlveoloPalatal, Manners.Fricative, Props.None)
    let VdLabialVelarApproximant     = OT("w", Places.LabialVelar, Manners.Approximant, Props.Voiced)
    let VlAlveolarLateralFlap        = OT("ɺ", Places.Alveolar, Manners.LateralTapFlap, Props.Voiced)
    let VdLabialPalatalApproximant   = OT("ɥ", Places.LabialPalatal, Manners.Approximant, Props.Voiced)

    let SimultaneousSx               = {Name: "Simultaneous {0} and {1}"(VlPostalveolarSibFricative.Text, VlVelarFricative.Text)} +
                                       OT("ɧ", Places.PostAlveolar, Manners.SibilantFricative, Props.None)
    let VlEpiglottalFricative        = OT("ʜ", Places.Pharyngeal, Manners.Fricative, Props.None)
    let VdEpiglottalFricative        = OT("ʢ", Places.Pharyngeal, Manners.Fricative, Props.Voiced)
    let VlEpiglottalPlosive          = OT("ʡ", Places.Pharyngeal, Manners.Plosive, Props.None)

    let CloseFrontUnrounded          = VO("i", Opens.Close, Backnesses.Front, Props.None)
    let CloseFrontRounded            = VO("y", Opens.Close, Backnesses.Front, Props.Rounded)
    let CloseCentralUnrounded        = VO("ɨ", Opens.Close, Backnesses.Central, Props.None)
    let CloseCentralRounded          = VO("ʉ", Opens.Close, Backnesses.Central, Props.Rounded)
    let CloseBackUnrounded           = VO("ɯ", Opens.Close, Backnesses.Back, Props.None)
    let CloseBackRounded             = VO("u", Opens.Close, Backnesses.Back, Props.Rounded)

    let NearCloseFrontUnrounded      = VO("ɪ", Opens.NearClose, Backnesses.NearFront, Props.None)
    let NearCloseFrontRounded        = VO("ʏ", Opens.NearClose, Backnesses.NearFront, Props.Rounded)
    let NearCloseBackRounded         = VO("ʊ", Opens.NearClose, Backnesses.NearBack, Props.Rounded)

    let CloseMidFrontUnrounded       = VO("e", Opens.CloseMid, Backnesses.Front, Props.None)
    let CloseMidFrontRounded         = VO("ø", Opens.CloseMid, Backnesses.Front, Props.Rounded)

    let Schwa                        = VO("ə", Opens.CloseMid, Backnesses.Central, Props.None)
    let RoundedSchwa                 = VO("ɵ", Opens.CloseMid, Backnesses.Central, Props.Rounded)

    let CloseMidBackUnrounded        = VO("ɤ", Opens.CloseMid, Backnesses.Back, Props.None)
    let CloseMidBackRounded          = VO("o", Opens.CloseMid, Backnesses.Back, Props.Rounded)

    let MidFrontUnrounded            = VO("ø̞", Opens.Mid, Backnesses.Front, Props.None)
    let MidCentralUnrounded          = VO("ə", Opens.Mid, Backnesses.Central, Props.None)
    let MidBackUnrounded             = VO("o̞", Opens.Mid, Backnesses.Back, Props.None)

    let OpenMidNearFrontUnrounded    = VO("ɛ", Opens.OpenMid, Backnesses.NearFront, Props.None)
    let OpenMidNearFrontRounded      = VO("œ", Opens.OpenMid, Backnesses.NearFront, Props.Rounded)
    let OpenMidCentral               = VO("ɜ", Opens.OpenMid, Backnesses.Central, Props.None)
    let OpenMidCentralRounded        = VO("ɞ", Opens.OpenMid, Backnesses.Central, Props.Rounded)
    let OpenMidBackUnrounded         = VO("ʌ", Opens.OpenMid, Backnesses.Back, Props.None)
    let OpenMidBackRounded           = VO("ɔ", Opens.OpenMid, Backnesses.Back, Props.Rounded)

    let FrontOpenRounded             = VO("ɶ", Opens.NearOpen, Backnesses.NearFront, Props.Rounded)
    let OpenMidSchwa                 = VO("ɐ", Opens.NearOpen, Backnesses.Central, Props.Rounded)

    let OpenBackUnrounded            = VO("ɑ", Opens.Open, Backnesses.Back, Props.None)
    let OpenBackRounded              = VO("ɒ", Opens.Open, Backnesses.Back, Props.Rounded)
    let OpenCentralUnrounded         = VO("ä", Opens.Open, Backnesses.Central, Props.None)
    let OpenNearFrontUnrounded       = VO("a", Opens.Open, Backnesses.NearFront, Props.None)
    let OpenNearFrontRounded         = VO("ɶ", Opens.Open, Backnesses.NearFront, Props.Rounded)
  }

  let AllSounds = Sounds + Impossible

  let Downstep                     = '↓'
  let Upstep                       = '↑'
  let Becomes                      = '→'
  let Globalrise                   = '↗'
  let Globalfall                   = '↘'
  let ReadyMadeCombination         = '\u026B'
  let Breve                        = '\u02D8'
  let PrimaryStress                = '\u02C8'
  let SecondaryStress              = '\u02CC'
  let LengthMark                   = '\u02D0'
  let Halflength                   = '\u02D1'
  let EjectiveMark                 = '\u02BC'
  let Rhotacized                   = '\u02B4'
  let Aspirated                    = '\u02B0'
  let BreathyVoiceAspirated        = '\u02B1'
  let Palatalized                  = '\u02B2'
  let Labialized                   = '\u02B7'
  let Velarized                    = '\u02E0'
  let Pharyngealized               = '\u02E4'
  let RhoticHook                   = '\u02DE'
  let LowTone                      = '\u0300'
  let HighTone                     = '\u0301'
  let MidTone                      = '\u0304'
  let Extrashort                   = '\u0306'
  let ExtraHighTone                = '\u030B'
  let ExtraLowTone                 = '\u030F'
  let VoicelessDescender           = '\u030A'
  let BreathyVoiced                = '\u0324'
  let Voiceless                    = '\u0325'
  let Dental                       = '\u032A'
  let Voiced                       = '\u032C'
  let CreakyVoiced                 = '\u0330'
  let CombiningMacron              = '\u0331'
  let Apical                       = '\u033A'
  let LinguoLabial                 = '\u033C'
  let Laminal                      = '\u033B'
  let NotAudiblyReleased           = '\u031A'
  let MoreRounded                  = '\u0339'
  let Nasalized                    = '\u0303'
  let LessRounded                  = '\u031C'
  let Advanced                     = '\u031F'
  let Centralized                  = '\u0308'
  let VelarizedOrPharyngealized    = '\u0334'
  let Retracted                    = '\u0320'
  let MidCentralized               = '\u033D'
  let Raised                       = '\u031D'
  let Syllabic                     = '\u0329'
  let Lowered                      = '\u031E'
  let NonSyllabic                  = '\u032F'
  let AdvancedTongueRoot           = '\u0318'
  let RetractedTongueRoot          = '\u0319'
  let TieBarBelow                  = '\u035C'
  let TieBarAbove                  = '\u0361'

  //======================================================================

  let HasProp(sound, prop) = sound.Prop and (sound.Prop & prop) != 0

  let ShowSound(sound) = Span {
    Style.IPAFamily,
    sound.Text
  }

  let SoundText(sound) = ShowSound(sound) {
    Popup: SoundPopup(sound),
    Link: EachSymbol.SymbolName,
  }

  let SoundName(sound) = Span {
    if (sound.Name)
      sound.Name
    elseif (sound.Category == Categories.Vowel)
      Lang.OpenNames[sound.Open],
      Space,
      Lang.BacknessNames[sound.Backness],
      Space,
      sound.HasProp(Props.Rounded) ? Lang.Rounded : Lang.Unrounded
    else
      sound.HasProp(Props.Voiced) ? Lang.Voiced : Lang.Voiceless,
      Space,
      Lang.PlaceNames[sound.Place],
      Space,
      Lang.MannerNames[sound.Manner]
    end,
    Space,
    if (sound.Category != Categories.Other)
      Lang.CategoryNames[sound.Category],
    end
  }

  let ShowCodePoint(c) = {TextRadix: 16, TextDigits: 4} Type.Integer(c)

  let CodePoints(text) = Span {
    Separator: ", ",
    if (text)
      ShowCodePoint(each text)
    end
  }
  //======================================================================

  let BoxSize  = Type.Size(20 pts, 20 pts)
  let CellSize = Type.Size(BoxSize.Width * 2, BoxSize.Height)

  let SoundBox(sound) = Canvas {
    HAlign: HAligns.Center,
    Size: BoxSize,
    if (sound.Text)
      TextHeight: BoxSize.Height - 4 pts,
      SoundText(sound)
    else
      Style.ImpossibleBackground
    end
  }

  let ShowBox(sound) = SoundBox(sound) {
    X: (sound.HasProp(Props.Voiced) ? BoxSize.Width : 0),
  }

  let SoundBlock(matches) = Cell {
    Style.SoundBottom,
    if (matches.Length > 0)
      if (matches.Length == 1 and matches[0].HasProp(Props.Impossible))
        Style.ImpossibleBackground
      else
        TextHeight: 1 pts,
        Span {
          Canvas {
            Size: CellSize,
            ShowBox(each matches)
          }
        }
      end
    end
  }

  let PulmonicCell(place, manner) = SoundBlock(AllSounds.FindSlice(EqualSound PC(null, place, manner, Props.None)))

  let PlaceHeader(place) = Style.HeaderCell(Lang.PlaceNames[place])

  let FindPulmonicManner(sound, data) = sound.Category == Categories.PulmonicConsonant && sound.Manner == data.Manner
  let FindManner(manner) = Sounds.Contains(FindPulmonicManner {Manner: manner})
  let PulmonicManners    = Manners.FindSlice(FindManner)

  let PulmonicRow(manner) = Row {
    Cell {
      VAlign: VAligns.Center,
      EdgeR: 0.5 pts,
      Style.TitleBackground,
      PaddingLR: 2 pts,
      TextHeight: 7 pts,
      Lang.MannerNames[manner]
    },
    PulmonicCell(each PulmonicPlaces, manner)
  }

  let PulmonicTable = Block {
    Table {
      Style.TableEdge,
      Columns: [(45 pts) {EdgeR: 0.5 pts}] +
               [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * PulmonicPlaces.Length,

      Style.TitleBar(Lang.PConsonants, PulmonicPlaces.Length+1),
      Row {
        TextHeight: 10 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(Lang.Labial) {ColumnSpan: 3},
        Style.HeaderCell(Lang.Coronal) {ColumnSpan: 4},
        Style.HeaderCell(Lang.Dorsal) {ColumnSpan: 3},
        Style.HeaderCell(Lang.Laryngeal) {ColumnSpan: 2},
      },
      Row {
        TextHeight: 6 pts,
        Style.HeaderCell(Bold Lang.Manner) {HAlign: HAligns.Left},
        PlaceHeader(each PulmonicPlaces)
      },
      PulmonicRow(each PulmonicManners),
    },
    Style.TableNotes {
      Lang.PulmonicSymbols(SoundText(Sounds.VlMultiplePlaceFricative)),
      Space,
      Lang.Impossible,
    },
  }
  //======================================================================

  let NPCell(place, manner, props) = SoundBlock(AllSounds.FindSlice(EqualSound NPC(null, place, manner, props)))

  let FindPlace(sound, data)      = sound.Category == data.Category && sound.Place == data.Place
  let FindPlaces(place, data)     = Sounds.Contains(FindPlace {Category: data.Category, Place: place})
  let FindPlaceCategory(category) = Places.FindSlice(FindPlaces {Category: category})

  let NonPulmonicPlaces = FindPlaceCategory(Categories.Consonant)

  let NPRow(name, namerow, props, manner) = Row {
    Cell {
      EdgeR: 0.5 pts,
      VAlign: VAligns.Center,
      if (namerow == EachIndex)
        name
      end
    },
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.MannerNames[manner]
    },
    NPCell(each NonPulmonicPlaces, manner, props)
  }

  let NonPulmonicTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [50 pts, (75 pts) {EdgeR: 0.5 pts}] +
               [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * NonPulmonicPlaces.Length,

      Style.TitleBar(Lang.NPConsonants, NonPulmonicPlaces.Length+2),
      Row {
        TextHeight: 6 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(Empty),
        PlaceHeader(each NonPulmonicPlaces)
      },
      NPRow(Lang.Ejective, 1, Props.Ejective, each [Manners.Stop, Manners.Fricative, Manners.LateralFricative]),
      NPRow(Lang.Click, 1, Props.Click, each [Manners.Tenuis, Manners.Nasal, Manners.TenuisLateral]),
      NPRow(Lang.Implosive, 0, Props.Implosive, each [Manners.Implosive]),
    },
    Style.TableNotes {
      Lang.ConsonantSymbols,
      Space,
      Lang.Impossible,
    },
  }
  //======================================================================

  let AffricateCell(category, manner, place) = SoundBlock(AllSounds.FindSlice(EqualSound Set(null, category, place, manner, Props.None)))

  let AffricateRow(places, category, manner) = Row {
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.MannerNames[manner]
    },
    AffricateCell(category, manner, each places)
  }

  let AffricateTable(category, manners, notes) {
    var places = FindPlaceCategory(category);
    return Block {
      Table {
        HAlign: HAligns.Center,
        Style.TableEdge,
        Columns: [(40 pts) {EdgeR: 0.5 pts}] +
                 [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * places.Length,

        Style.TitleBar(Lang.CategoryNames[category], places.Length+1),
        Row {
          TextHeight: 6 pts,
          Style.HeaderCell(Empty),
          PlaceHeader(each places)
        },
        AffricateRow(places, category, each manners),
      },
      Style.TableNotes {
        notes,
      },
    }
  }
  //======================================================================

  let ShowVowel(sound) = SoundBox(sound) {
    X: (sound.HasProp(Props.Rounded) ? BoxSize.Width : 0),
  }

  let VowelBlock(matches) = Cell {
    Style.SoundBottom,
    HAlign: HAligns.Center,
    TextHeight: BoxSize.Height,
    if (matches.Length == 2)
      Span {
        SoundText(matches[0]),
        " • " {TextColor: Colors.LightGray},
        SoundText(matches[1]),
      }
    else
      SoundText(matches[0]),
    end
  }

  let VowelCell(open, backness) = VowelBlock(Sounds.FindSlice(VowelPair {Open: open, Backness: backness}))

  let VowelRow(open) = Row {
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.OpenNames[open]
    },
    VowelCell(open, each Backnesses)
  }

  let VowelTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [(1 inch){EdgeR: 0.5 pts}] + [BoxSize.Width*3 {EdgeR: 0.25 pts}] * Backnesses.Length,
      Style.TitleBar(Lang.Vowels, Backnesses.Length+1),
      Row {
        TextHeight: 10 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(each Lang.BacknessNames)
      },
      VowelRow(each Opens)
    },
    Style.TableNotes {
      Lang.VowelSymbols,
    },
  }
  //======================================================================

  let OtherColumns = 2

  let OtherCell(sound) = {
    Cell {
      VAlign: VAligns.Center,
      HAlign: HAligns.Center,
      TextHeight: 20 pts,
      SoundText(sound),
    },
    Cell {
      VAlign: VAligns.Center,
      SoundName(sound)
    }
  }

  let OtherRow(sounds) = Row {
    OtherCell(each sounds)
  }

  let OtherTable = Block {
    Table {
      Style.TableEdge,
      Columns: [BoxSize.Width, Metrics.Content.Width * 0.5 - BoxSize.Width] * OtherColumns,
      Style.TitleBar(Lang.OtherSymbols, OtherColumns*2),
      OtherRow(each (Sounds.FindSlice(EqualOther) / OtherColumns)),
    },
    Style.TableNotes {
    }
  }
  //======================================================================

  let SoundColumns = 4
  let SoundSize    = 40 pts

  let SoundCell(sound) = Cell {
    Edge: 0.25 pts {Color: Colors.LightGray},
    Padding: 2 pts,
    ParAlignment: ParAlignments.Center,
    Paragraph {
      SpaceBefore: 8 pts,
      SpaceAfter: 8 pts,
      TextHeight: SoundSize,
      ShowSound(sound),
      SpaceAfter: SoundSize * 0.125
    },
    Paragraph {
      TextHeight: 10 pts,
      SoundName(sound),
    },
    Paragraph {
      LocationMark: EachSymbol.SymbolName,
      TextHeight: 8 pts,
      ParBackground: 95%,
      CodePoints(sound.Text),
    },
  }

  let SoundRow(sounds) = Row {
    SoundCell(each sounds)
  }

  let SoundTable = Block {
    Table {
      Columns: [Metrics.Content.Width / SoundColumns] * SoundColumns,
      Style.TitleBar(Lang.IPAListing, SoundColumns),
      SoundRow(each (Sounds / SoundColumns))
    },
    Style.TableNotes {
    }
  }

  let SoundPopup(sound) = Table {
    Columns: [2 inches],
    Row {
      SoundCell(sound)
    }
  }
  //======================================================================

  let ShowGroups = Block {
    PulmonicTable,
    NonPulmonicTable,
    AffricateTable(Categories.PulmonicAffricate, [Manners.Sibilant, Manners.NonSibilant, Manners.Lateral], Lang.Impossible),
    AffricateTable(Categories.EjectiveAffricate, [Manners.Central, Manners.Lateral], null),
    VowelTable,
    OtherTable,
  }
  //======================================================================
}
