using Format, Units
//======================================================================

with IPA {
  let Link = IO.Domain("http://www.internationalphoneticalphabet.org") IO.Folder("ipa-charts") IO.Folder("ipa-symbols-chart-complete")

  let None = 0

  flags Props {
    Voiced,
    Pulmonic,
    Click,
    Implosive,
    Extension,
  }

  enum Categories {
    Vowel,
    Consonant
  }

  enum Forms {
    Bilabial,
    Labiodental,
    Dental,
    Alveolar,
    Postalveolar,
    Retroflex,
    Palatal,
    Velar,
    Uvular,
    Pharyngeal,
    Glottal,
  }

  enum Sounds {
    Plosive,
    Nasal,
    Trill,
    Tap_Flap,
    Fricative,
    Lateral_Fricative,
    Approximant,
    Lateral_Approximant,
  }

  let Set(c, category, form, sound, prop) = {
    Text: c,
    Category: category,
    Form: form,
    Sound: sound,
    Prop: prop
  }

  let PC(c, form, sound, prop) = Set(c, Categories.Consonant, form, sound, prop | Props.Pulmonic)
  let PCI(form, sound, prop)   = PC(null, form, sound, prop)

  let EqualSound(r, data) =
    r.Category == data.Category and
    r.Form == data.Form and
    r.Sound == data.Sound and
    (r.Prop & data.Prop) > 0

  let Impossible = [
    PCI(Forms.Pharyngeal, Sounds.Plosive, Props.Voiced),
    PCI(Forms.Glottal, Sounds.Plosive, Props.Voiced),
    PCI(Forms.Pharyngeal, Sounds.Nasal, None),
    PCI(Forms.Pharyngeal, Sounds.Nasal, Props.Voiced),
    PCI(Forms.Glottal, Sounds.Nasal, None),
    PCI(Forms.Glottal, Sounds.Nasal, Props.Voiced),
    PCI(Forms.Velar, Sounds.Trill, None),
    PCI(Forms.Velar, Sounds.Trill, Props.Voiced),
    PCI(Forms.Glottal, Sounds.Trill, None),
    PCI(Forms.Glottal, Sounds.Trill, Props.Voiced),
    PCI(Forms.Velar, Sounds.Tap_Flap, None),
    PCI(Forms.Velar, Sounds.Tap_Flap, Props.Voiced),
    PCI(Forms.Glottal, Sounds.Tap_Flap, None),
    PCI(Forms.Glottal, Sounds.Tap_Flap, Props.Voiced),
    PCI(Forms.Bilabial, Sounds.Lateral_Fricative, None),
    PCI(Forms.Bilabial, Sounds.Lateral_Fricative, Props.Voiced),
    PCI(Forms.Labiodental, Sounds.Lateral_Fricative, None),
    PCI(Forms.Labiodental, Sounds.Lateral_Fricative, Props.Voiced),
    PCI(Forms.Pharyngeal, Sounds.Lateral_Fricative, None),
    PCI(Forms.Pharyngeal, Sounds.Lateral_Fricative, Props.Voiced),
    PCI(Forms.Glottal, Sounds.Lateral_Fricative, None),
    PCI(Forms.Glottal, Sounds.Lateral_Fricative, Props.Voiced),
    PCI(Forms.Glottal, Sounds.Approximant, None),
    PCI(Forms.Glottal, Sounds.Approximant, Props.Voiced),
    PCI(Forms.Bilabial, Sounds.Lateral_Approximant, None),
    PCI(Forms.Bilabial, Sounds.Lateral_Approximant, Props.Voiced),
    PCI(Forms.Labiodental, Sounds.Lateral_Approximant, None),
    PCI(Forms.Labiodental, Sounds.Lateral_Approximant, Props.Voiced),
    PCI(Forms.Pharyngeal, Sounds.Lateral_Approximant, None),
    PCI(Forms.Pharyngeal, Sounds.Lateral_Approximant, Props.Voiced),
    PCI(Forms.Glottal, Sounds.Lateral_Approximant, None),
    PCI(Forms.Glottal, Sounds.Lateral_Approximant, Props.Voiced),
  ]                       									

  with Alphabet {
    // Plosives
    let VlBilabialPlosive            = PC("p", Forms.Bilabial, Sounds.Plosive, None)
    let VdBilabialPlosive            = PC("b", Forms.Bilabial, Sounds.Plosive, Props.Voiced)
    let VlAlveolarPlosive            = PC("t", Forms.Alveolar, Sounds.Plosive, None)
    let VdAlveolarPlosive            = PC("d", Forms.Alveolar, Sounds.Plosive, Props.Voiced)
    let VlRetroFlexPlosive           = PC("ʈ", Forms.Retroflex, Sounds.Plosive, None)
    let VdRetroFlexPlosive           = PC("ɖ", Forms.Retroflex, Sounds.Plosive, Props.Voiced)
    let VlPalatalPlosiv              = PC("c", Forms.Palatal, Sounds.Plosive, None)
    let VdPalatalPlosive             = PC("ɟ", Forms.Palatal, Sounds.Plosive, Props.Voiced)
    let VlVelarPlosiv                = PC("k", Forms.Velar, Sounds.Plosive, None)
    let VdVelarPlosive               = PC("ɡ", Forms.Velar, Sounds.Plosive, Props.Voiced)
    let VlUvularPlosiv               = PC("q", Forms.Uvular, Sounds.Plosive, None)
    let VdUvularPlosive              = PC("ɢ", Forms.Uvular, Sounds.Plosive, Props.Voiced)
    let GlottalPlosive               = PC("ʔ", Forms.Glottal, Sounds.Plosive, None)
		
    // Nasal											
    let VdBilabialNasal              = PC("m", Forms.Bilabial, Sounds.Nasal, Props.Voiced)
    let VdLabioDentalNasal           = PC("ɱ", Forms.Labiodental, Sounds.Nasal, Props.Voiced)
    let VdAlveolarNasal              = PC("n", Forms.Alveolar, Sounds.Nasal, Props.Voiced)
    let VdRetroFlexNasal             = PC("ɳ", Forms.Retroflex, Sounds.Nasal, Props.Voiced)
    let VdPalatalNasal               = PC("ɲ", Forms.Palatal, Sounds.Nasal, Props.Voiced)
    let VdVelarNasal                 = PC("ŋ", Forms.Velar, Sounds.Nasal, Props.Voiced)
    let VdUvularNasal                = PC("ɴ", Forms.Uvular, Sounds.Nasal, Props.Voiced)
														
    // Trill											
    let VdBilabialTrill              = PC("ʙ", Forms.Bilabial, Sounds.Trill, Props.Voiced)
    let VdAlveolarTrill              = PC("r", Forms.Alveolar, Sounds.Trill, Props.Voiced)
    let VdUvularTrill                = PC("ʀ", Forms.Uvular, Sounds.Trill, Props.Voiced)
														
    // Tap or Flap										
    let VdLabioDentalFlap            = PC("ⱱ", Forms.Labiodental, Sounds.Tap_Flap, Props.Voiced)
    let VdAlveolarTap                = PC("ɾ", Forms.Alveolar, Sounds.Tap_Flap, Props.Voiced)
    let VdRetroFlexFlap              = PC("ɽ", Forms.Retroflex, Sounds.Tap_Flap, Props.Voiced)
														
    // Fricative										
    let VlDentalFricative            = PC("θ", Forms.Dental, Sounds.Fricative, None)
    let VdDentalFricative            = PC("ð", Forms.Dental, Sounds.Fricative, Props.Voiced)
    let VlBilabialFricative          = PC("ɸ", Forms.Bilabial, Sounds.Fricative, None)
    let VdBilabialFricative          = PC("β", Forms.Bilabial, Sounds.Fricative, Props.Voiced)
    let VlLabiodentalFricative       = PC("f", Forms.Labiodental, Sounds.Fricative, None)
    let VdLabiodentalFricative       = PC("v", Forms.Labiodental, Sounds.Fricative, Props.Voiced)
    let VlAlveolarFricative          = PC("s", Forms.Alveolar, Sounds.Fricative, None)
    let VdAlveolarFricative          = PC("z", Forms.Alveolar, Sounds.Fricative, Props.Voiced)
    let VlPostAlveolarFricative      = PC("ʃ", Forms.Postalveolar, Sounds.Fricative, None)
    let VdPostAlveolarFricative      = PC("ʒ", Forms.Postalveolar, Sounds.Fricative, Props.Voiced)
    let VlRetroFlexFricative         = PC("ʂ", Forms.Retroflex, Sounds.Fricative, None)
    let VdRetroFlexFricative         = PC("ʐ", Forms.Retroflex, Sounds.Fricative, Props.Voiced)
    let VlPalatalFricative           = PC("ç", Forms.Palatal, Sounds.Fricative, None)
    let VdPalatalFricative           = PC("ʝ", Forms.Palatal, Sounds.Fricative, Props.Voiced)
    let VlVelarFricative             = PC("x", Forms.Velar, Sounds.Fricative, None)
    let VdVelarFricative             = PC("ɣ", Forms.Velar, Sounds.Fricative, Props.Voiced)
    let VlUvularFricative            = PC("χ", Forms.Uvular, Sounds.Fricative, None)
    let VdUvularFricative            = PC("ʁ", Forms.Uvular, Sounds.Fricative, Props.Voiced)
    let VlPharyngealFricative        = PC("ħ", Forms.Pharyngeal, Sounds.Fricative, None)
    let VdPharyngealFricative        = PC("ʕ", Forms.Pharyngeal, Sounds.Fricative, Props.Voiced)
    let VlGlottalFricative           = PC("h", Forms.Glottal, Sounds.Fricative, None)
    let VdGlottalFricative           = PC("ɦ", Forms.Glottal, Sounds.Fricative, Props.Voiced)
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = PC("ɬ", Forms.Alveolar, Sounds.Lateral_Fricative, None)
    let VdAlveolarLateralFricative   = PC("ɮ", Forms.Alveolar, Sounds.Lateral_Fricative, Props.Voiced)
														
    // Approximant										
    let VdLabioDentalApproximant     = PC("ʋ", Forms.Labiodental, Sounds.Approximant, Props.Voiced)
    let VdPostAlveolarApproximant    = PC("ɹ", Forms.Alveolar, Sounds.Approximant, Props.Voiced)
    let VdRetroFlexApproximant       = PC("ɻ", Forms.Retroflex, Sounds.Approximant, Props.Voiced)
    let VdPalatalApproximant         = PC("j", Forms.Palatal, Sounds.Approximant, Props.Voiced)
    let VelarApproximant             = PC("ɰ", Forms.Velar, Sounds.Approximant, Props.Voiced)
														
    // LateralApproximant								
    let VdAlveolarLateralApproximant = PC("l", Forms.Alveolar, Sounds.Lateral_Approximant, Props.Voiced)
    let VdRetroFlexLateral           = PC("ɭ", Forms.Retroflex, Sounds.Lateral_Approximant, Props.Voiced)
    let VdPalatalLateral             = PC("ʎ", Forms.Palatal, Sounds.Lateral_Approximant, Props.Voiced)
    let VdVelarLateral               = PC("ʟ", Forms.Velar, Sounds.Lateral_Approximant, Props.Voiced)

    // Clicks
    let BilabialClick                = Set("ʘ", Categories.Consonant, None, None, Props.Click)
    let DentalClick                  = Set("ǀ", Categories.Consonant, None, None, Props.Click)
    let RetroFlexClick               = Set("ǃ", Categories.Consonant, None, None, Props.Click)
    let AlveolarClick                = Set("ǂ", Categories.Consonant, None, None, Props.Click)
    let AlveolarLateralClick         = Set("ǁ", Categories.Consonant, None, None, Props.Click)

    // Voiced implosives
    let VdBilabialimPlosive          = Set("ɓ", Categories.Consonant, None, None, Props.Implosive)
    let VdAlveolarimPlosive          = Set("ɗ", Categories.Consonant, None, None, Props.Implosive)
    let VdPalatalImplosive           = Set("ʄ", Categories.Consonant, None, None, Props.Implosive)
    let VdVelarImplosive             = Set("ɠ", Categories.Consonant, None, None, Props.Implosive)
    let VdUvularImplosive            = Set("ʛ", Categories.Consonant, None, None, Props.Implosive)


    let VdAlveoloPalatalFricative    = Set("ʑ", None, None, None, None)
    let VdEpiglottalFricative        = Set("ʢ", None, None, None, None)
    let VlAlveoloPalatalFricative    = Set("ɕ", None, None, None, None)
    let VlMultiplePlaceFricative     = Set("ɧ", None, None, None, None)
    let VlLabialVelarFricative       = Set("ʍ", None, None, None, None)

    let VdPostAlveolarAffricate      = Set("ʤ", None, None, None, None)
    let VlPostAlveolarAffricate      = Set("ʧ", None, None, None, None)

    let OpenBackUnrounded            = Set("ɑ", None, None, None, None)
    let RaisedOpenFrontUnrounded     = Set("æ", None, None, None, None)
    let OpenMidFrontUnrounded        = Set("ɛ", None, None, None, None)
    let CloseCentralUnrounded        = Set("ɨ", None, None, None, None)
    let LaxCloseFrontUnrounded       = Set("ɪ", None, None, None, None)
    let CloseBackUnrounded           = Set("ɯ", None, None, None, None)
    let OpenMidBackUnrounded         = Set("ʌ", None, None, None, None)
    let CloseMidBackUnrounded        = Set("ɤ", None, None, None, None)

    let OpenMidSchwa                 = Set("ɐ", None, None, None, None)
    let OpenBackRounded              = Set("ɒ", None, None, None, None)
    let OpenMidBackRounded           = Set("ɔ", None, None, None, None)
    let Schwa                        = Set("ə", None, None, None, None)
    let CloseMidSchwa                = Set("ɘ", None, None, None, None)
    let RhotacizedSchwa              = Set("ɚ", None, None, None, None)
    let OpenMidCentral               = Set("ɜ", None, None, None, None)
    let RhotacizedOpenMidCentral     = Set("ɝ", None, None, None, None)
    let OpenMidCentralRounded        = Set("ɞ", None, None, None, None)
    let LabialPalatalApproximant     = Set("ɥ", None, None, None, None)
    let VlEpiglottalFricative        = Set("ʜ", None, None, None, None)
    let VelarizedVdAlveolarLateral   = Set("ɫ", None, None, None, None)
    let FrontCloseMidRounded         = Set("ø", None, None, None, None)
    let RoundedSchwa                 = Set("ɵ", None, None, None, None)
    let FrontOpenMidRounded          = Set("œ", None, None, None, None)
    let FrontOpenRounded             = Set("ɶ", None, None, None, None)
    let VdAlveolarLateralFlap        = Set("ɺ", None, None, None, None)
    let CloseCentralRounded          = Set("ʉ", None, None, None, None)
    let LaxCloseBackRounded          = Set("ʊ", None, None, None, None)
    let LaxCloseFrontRounded         = Set("ʏ", None, None, None, None)
    let VdEpiglottalPlosive          = Set("ʡ", None, None, None, None)
    let Downstep                     = Set("↓", None, None, None, None)
    let Upstep                       = Set("↑", None, None, None, None)
    let Becomes                      = Set("→", None, None, None, None)
    let Globalrise                   = Set("↗", None, None, None, None)
    let Globalfall                   = Set("↘", None, None, None, None)
    let PrimaryStress                = Set("\u02C8", None, None, None, None)
    let SecondaryStress              = Set("\u02CC", None, None, None, None)
    let LengthMark                   = Set("\u02D0", None, None, None, None)
    let Halflength                   = Set("\u02D1", None, None, None, None)
    let Ejective                     = Set("\u02BC", None, None, None, None)
    let Rhotacized                   = Set("\u02B4", None, None, None, None)
    let Aspirated                    = Set("\u02B0", None, None, None, None)
    let BreathyVoiceAspirated        = Set("\u02B1", None, None, None, None)
    let Palatalized                  = Set("\u02B2", None, None, None, None)
    let Labialized                   = Set("\u02B7", None, None, None, None)
    let Velarized                    = Set("\u02E0", None, None, None, None)
    let Pharyngealized               = Set("\u02E4", None, None, None, None)
    let RhoticHook                   = Set("\u02DE", None, None, None, None)
    let Voiceless                    = Set("\u0325", None, None, None, None)
    let VoicelessDescender           = Set("\u030A", None, None, None, None)
    let BreathyVoiced                = Set("\u0324", None, None, None, None)
    let Dental                       = Set("\u032A", None, None, None, None)
    let Voiced                       = Set("\u032C", None, None, None, None)
    let CreakyVoiced                 = Set("\u0330", None, None, None, None)
    let Apical                       = Set("\u033A", None, None, None, None)
    let LinguoLabial                 = Set("\u033C", None, None, None, None)
    let Laminal                      = Set("\u033B", None, None, None, None)
    let NotAudiblyReleased           = Set("\u031A", None, None, None, None)
    let MoreRounded                  = Set("\u0339", None, None, None, None)
    let Nasalized                    = Set("\u0303", None, None, None, None)
    let LessRounded                  = Set("\u031C", None, None, None, None)
    let Advanced                     = Set("\u031F", None, None, None, None)
    let Retracted                    = Set("\u0320", None, None, None, None)
    let Centralized                  = Set("\u0308", None, None, None, None)
    let VelarizedOrPharyngealized    = Set("\u0334", None, None, None, None)
    let ReadyMadeCombination         = Set("\u026B", None, None, None, None)
    let MidCentralized               = Set("\u033D", None, None, None, None)
    let Raised                       = Set("\u031D", None, None, None, None)
    let Syllabic                     = Set("\u0329", None, None, None, None)
    let Lowered                      = Set("\u031E", None, None, None, None)
    let NonSyllabic                  = Set("\u032F", None, None, None, None)
    let AdvancedTongueRoot           = Set("\u0318", None, None, None, None)
    let RetractedTongueRoot          = Set("\u0319", None, None, None, None)
    let Extrashort                   = Set("\u0306", None, None, None, None)
    let ExtraHighTone                = Set("\u030B", None, None, None, None)
    let HighTone                     = Set("\u0301", None, None, None, None)
    let MidTone                      = Set("\u0304", None, None, None, None)
    let LowTone                      = Set("\u0300", None, None, None, None)
    let ExtraLowTone                 = Set("\u030F", None, None, None, None)
    let TieBarBelow                  = Set("\u035C", None, None, None, None)
    let TieBarAbove                  = Set("\u0361", None, None, None, None)
  }

  let AllForms = Alphabet + Impossible

  let HeaderCell(d) = Cell {
    HAlign: HAligns.Center,
    Style.SansSerif,
    Style.TitleBackground,
    EdgeB: 1 pts,
    PaddingTB: 2 pts,
    d
  }

  let TitleBar(name, columns) = Row {
    Cell {
      Padding: 2 pts,
      ParAlignment: ParAlignments.Center,
      Background: 40%,
      TextHeight: 16 pts,
      TextColor: Colors.White,
      ColumnSpan: columns,
      name
    }
  }

  let CellSize = Type.Size(20 pts, 30 pts)
  let CleanName(s) = s.Substitute(s.FindIndex("_"), Space)

  let ShowSound(c) = Canvas {
    HAlign: HAligns.Center,
    X: ((c.Prop & Props.Voiced) != 0 ? CellSize.Width : 0),
    Size: CellSize,
    if c.Text then
      c.Text
    else
      Style.ImpossibleBackground
    end
  }

  let DrawCell(form, sound, matches) = Cell {
    if matches.Length > 0 then
      if matches.Length == 2 and matches[0].Text == null and matches[1].Text == null then
        Style.ImpossibleBackground
      else
        TextFamily: Style.IPAFamily,
        TextHeight: CellSize.Height - 6 pts,
        Canvas {
          Width: CellSize.Width * 2,
          Height: CellSize.Height,
          ShowSound(each matches)
        }
      end
    end
  }

  let PulmonicCell(form, sound) = DrawCell(form, sound, AllForms.FindSlice(EqualSound PC(null, form, sound, 0)))

  let PulmonicRow(sound) = Row {
    EdgeB: 0.5 pts,
    Cell {
      VAlign: VAligns.Center,
      EdgeR: 0.5 pts,
      Style.TitleBackground,
      PaddingLR: 2 pts,
      TextHeight: 8 pts,
      CleanName(EachSymbol.SymbolName)
    },
    PulmonicCell(each Forms, sound)
  }

  let SymbolHeader(v) = HeaderCell(EachSymbol.SymbolName)

  let PulmonicTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [(0.8 inches) {EdgeR: 0.5 pts}] + [(0.6 inches) {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * 11,

      TitleBar("Pulmonic Consonants", 12),
      Row {
        TextHeight: 10 pts,
        HeaderCell(Empty),
        HeaderCell("Labial") {ColumnSpan: 2},
        HeaderCell("Coronal") {ColumnSpan: 4},
//        HeaderCell("Dorsal") {ColumnSpan: 1},
//        HeaderCell("Laryngeal") {ColumnSpan: 1},
      },
      Row {
        TextHeight: 7 pts,
        HeaderCell(Empty),
        SymbolHeader(each Forms)
      },
      PulmonicRow(each Sounds),
    },
    Paragraph {
      "Where symbols appear in pairs, the one to the right represents a modally voiced consonant, except for murmured {0}."(ToText(Alphabet.VlMultiplePlaceFricative))
    }
  }

  let ToText(c) = Span {
    (each c).Text
  }

  let ConCell(c, name, ejective) = Cell {
    EdgeR: 0.5 pts,
    Padding: 2 pts,
    Group {
      VAlign: VAligns.Center,
      Span {
        TextFamily: Style.IPAFamily,
        TextHeight: 18 pts,
        ToText(c),
        if ejective then
          Alphabet.Ejective.Text
        end
      },
      Space,
      name
    }
  }

  let NonPulmonicTable = Table {
    HAlign: HAligns.Center,
    Style.TableEdge,
    Columns: [2.5 inches, 1.5 inches],

    TitleBar("Non-Pulmonic Consonants", 3),
    Row {
      TextHeight: 12 pts,
      HeaderCell(each ["Clicks", "Voiced implosives", "Ejectives"])
    },
    Row {
      ConCell(Alphabet.BilabialClick, "Bilabial fricated", false),
      ConCell(Alphabet.VdBilabialimPlosive, "Bilabial", false),
      ConCell(Alphabet.VlBilabialPlosive, "Bilabial", true)
    },
    Row {
      ConCell(Alphabet.DentalClick, "Dental", false),
      ConCell(Alphabet.VdAlveolarimPlosive, "Dental/alveolar", false),
      ConCell(Alphabet.VlAlveolarPlosive, "Dental/alveolar", true)
    },
    Row {
      ConCell(Alphabet.RetroFlexClick, "(Post)alveoalar", false),
      ConCell(Alphabet.VdPalatalImplosive, "Palatal", false),
      ConCell(Alphabet.VlVelarPlosiv, "Velar", true)
    },
    Row {
      ConCell(Alphabet.AlveolarClick, "Palatoalveolar", false),
      ConCell(Alphabet.VdVelarImplosive, "Velar", false),
      ConCell(Alphabet.VlAlveolarFricative, "Alveolar fricative", true)
    },
    Row {
      ConCell(Alphabet.AlveolarLateralClick, "Alveolar lateral", false),
      ConCell(Alphabet.VdUvularImplosive, "Uvular", false),
      ConCell([Alphabet.VlAlveolarPlosive, Alphabet.TieBarBelow, Alphabet.VlAlveolarLateralFricative], "Lateral affricate", true)
    },
  }

  let VarCell(text) = Cell {
    VAlign: VAligns.Center,
    CleanName(text.SymbolName)
  }

  let GetPropNames(props, prop) = {
    if (props & (1 << EachIndex)) != 0 then
      CleanName(EachSymbol.SymbolName)
    end
  }

  let AlphabetRow(c) = Row {
    Cell {
      TextHeight: 14 pts,
      HAlign: HAligns.Center,
      VAlign: VAligns.Center,
      ToText(c)
    },
    VarCell(Categories.GetReference(c.Category)),
    VarCell(Forms.GetReference(c.Form)),
    VarCell(Sounds.GetReference(c.Sound)),
    Cell {
      VAlign: VAligns.Center,
      Span {
        Separator: ", ",
        GetPropNames(c.Prop, each Props)
      }
    }
  }

  let AlphabetTable = Table {
    Style.TableEdge,
    Columns: [(30 pts) Style.ColumnEdge, (60 pts) Style.ColumnEdge, (110 pts)Style.ColumnEdge],

    TitleBar("Complete IPA Listing", 5),
    Row {
      TextHeight: 12 pts,
      HeaderCell("Text"),
      HeaderCell("Categories") {HAlign: HAligns.Left},
      HeaderCell("Forms") {HAlign: HAligns.Left},
      HeaderCell("Sounds") {HAlign: HAligns.Left},
      HeaderCell("Properties") {HAlign: HAligns.Left}
    },
    AlphabetRow(each Alphabet)
  }

  let ShowAlphabet = Block {
    PulmonicTable,
    Empty,
    NonPulmonicTable,
    Empty,
    AlphabetTable
  }
}
