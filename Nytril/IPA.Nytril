using Format, Units, Type, IPA.SoundTypes
//======================================================================

with IPA
  with Opens
    let Close     = enum {Name: Lang.Close}
    let NearClose = enum {Name: Lang.NearClose}
    let CloseMid  = enum {Name: Lang.CloseMid}
    let Mid       = enum {Name: Lang.Mid}
    let OpenMid   = enum {Name: Lang.OpenMid}
    let NearOpen  = enum {Name: Lang.NearOpen}
    let Open      = enum {Name: Lang.Open}
  end

  with Backnesses
    let Front     = enum {Name: Lang.Front}
    let NearFront = enum {Name: Lang.NearFront}
    let Central   = enum {Name: Lang.Central}
    let NearBack  = enum {Name: Lang.NearBack}
    let Back      = enum {Name: Lang.Back}
  end

  with Places
    let Bilabial       = enum {Name: Lang.Bilabial}
    let Labial         = enum {Name: Lang.Labial}
    let LabialVelar    = enum {Name: Lang.LabialVelar}
    let LabialPalatal  = enum {Name: Lang.LabialPalatal}
    let LabioDental    = enum {Name: Lang.LabioDental}
    let LinguoLabial   = enum {Name: Lang.LinguoLabial}
    let Dental         = enum {Name: Lang.Dental}
    let Alveolar       = enum {Name: Lang.Alveolar}
    let AlveoloPalatal = enum {Name: Lang.AlveoloPalatal}
    let PostAlveolar   = enum {Name: Lang.PostAlveolar}
    let Retroflex      = enum {Name: Lang.Retroflex}
    let Palatal        = enum {Name: Lang.Palatal}
    let PalatoAlveolar = enum {Name: Lang.PalatoAlveolar}
    let Velar          = enum {Name: Lang.Velar}
    let Uvular         = enum {Name: Lang.Uvular}
    let Pharyngeal     = enum {Name: Lang.PharyngealEpiglottal}
    let Glottal        = enum {Name: Lang.Glottal}
  end

  with SoundTypes
    let None        = mask
    let Voiced      = mask {Name: Lang.Voiced}
    let Rounded     = mask {Name: Lang.Rounded}
    let Velarized   = mask {Name: Lang.Velarized}
    let Ejective    = mask {Name: Lang.Ejective}
    let Pulmonic    = mask {Name: Lang.Pulmonic}
    let Nasal       = mask {Name: Lang.Nasal}
    let Tenuis      = mask {Name: Lang.Tenuis}
    let Lateral     = mask {Name: Lang.Lateral}
    let Sibilant    = mask {Name: Lang.Sibilant}
    let Fricative   = mask {Name: Lang.Fricative}
    let Approximant = mask {Name: Lang.Approximant}
    let Plosive     = mask {Name: Lang.Plosive}
    let Implosive   = mask {Name: Lang.Implosive}
    let Central     = mask {Name: Lang.Central}
    let TapFlap     = mask {Name: Lang.TapFlap}
    let Trill       = mask {Name: Lang.Trill}
    let Stop        = mask {Name: Lang.Stop}
    let Click       = mask {Name: Lang.Click}
    let Affricate   = mask {Name: Lang.Affricate}
    let Vowel       = mask {Name: Lang.Vowel}
    let Consonant   = mask {Name: Lang.Consonant}
    let Rhotic      = mask {Name: Lang.Rhotic}
    let Impossible  = mask {Name: Lang.Impossible}
    let NonIPA      = mask {Name: Lang.NonIPA}
  end

  let Unrounded = SoundTypes.None

  let Encode(text, sampa, alt=null) = {
    Popup: SoundPopup,
    Text: text,
    Sampa: sampa,
    Alt: alt
  }

  let NewConsonant(flags, place, text, sampa, alt=null) = Encode (text, sampa, alt) {
    Flags: flags,
    Place: place,
  }

  let NewVowel(flags, open, backness, text, sampa) = Encode (text, sampa) {
    Flags: flags | Vowel,
    Open: open,
    Backness: backness,
  }

  let NPEjective(flags, sound) = NewConsonant(Ejective | flags, sound.Place, sound.Text Diacritics.Ejective.Text, sound.Sampa Diacritics.Ejective.Sampa)

  let Imp(flags, place) = {
    Flags: flags | Impossible | Consonant,
    Place: place,
  }

  with Sounds
    //==================================
    // Pulmonic Consonants
    //==================================

    // Nasal					
    let VlBilabialNasal              = NewConsonant(Pulmonic Nasal, Places.Bilabial, "m̥", "")
    let VdBilabialNasal              = NewConsonant(Voiced Pulmonic Nasal, Places.Bilabial, "m", "m")
    let VdLabioDentalNasal           = NewConsonant(Voiced Pulmonic Nasal, Places.LabioDental, "ɱ", "F")
    let VdLinguoLabioNasal           = NewConsonant(Voiced Pulmonic Nasal, Places.LinguoLabial, "n̼", "")
    let VlAlveolarNasal              = NewConsonant(Pulmonic Nasal, Places.Alveolar, "n̥", "")
    let VdAlveolarNasal              = NewConsonant(Voiced Pulmonic Nasal, Places.Alveolar, "n", "n")
    let VlRetroFlexNasal             = NewConsonant(Pulmonic Nasal, Places.Retroflex, "ɳ̊", "")
    let VdRetroFlexNasal             = NewConsonant(Voiced Pulmonic Nasal, Places.Retroflex, "ɳ", "n`")
    let VlPalatalNasal               = NewConsonant(Pulmonic Nasal, Places.Palatal, "ɲ̊", "")
    let VdPalatalNasal               = NewConsonant(Voiced Pulmonic Nasal, Places.Palatal, "ɲ", "J")
    let VlVelarNasal                 = NewConsonant(Pulmonic Nasal, Places.Velar, "ŋ̊", "")
    let VdVelarNasal                 = NewConsonant(Voiced Pulmonic Nasal, Places.Velar, "ŋ", "N")
    let VdUvularNasal                = NewConsonant(Voiced Pulmonic Nasal, Places.Uvular, "ɴ", "N\\")
														
    // Stop
    let VlBilabialStop               = NewConsonant(Pulmonic Stop, Places.Bilabial, "p", "p")
    let VdBilabialStop               = NewConsonant(Voiced Pulmonic Stop, Places.Bilabial, "b", "b")
    let VlLabioDentalStop            = NewConsonant(Pulmonic Stop, Places.LabioDental, "p̪", "")
    let VdLabioDentalStop            = NewConsonant(Voiced Pulmonic Stop, Places.LabioDental, "b̪", "")
    let VlLinguoLabialStop           = NewConsonant(Pulmonic Stop, Places.LinguoLabial, "t̼", "")
    let VdLinguoLabialStop           = NewConsonant(Voiced Pulmonic Stop, Places.LinguoLabial, "d̼", "")
    let VlAlveolarStop               = NewConsonant(Pulmonic Stop, Places.Alveolar, "t", "t")
    let VdAlveolarStop               = NewConsonant(Voiced Pulmonic Stop, Places.Alveolar, "d", "d")
    let VlRetroflexStop              = NewConsonant(Pulmonic Stop, Places.Retroflex, "ʈ", "t`")
    let VdRetroflexStop              = NewConsonant(Voiced Pulmonic Stop, Places.Retroflex, "ɖ", "d`")
    let VlPalatalStop                = NewConsonant(Pulmonic Stop, Places.Palatal, "c", "c")
    let VdPalatalStop                = NewConsonant(Voiced Pulmonic Stop, Places.Palatal, "ɟ", "J\\")
    let VlVelarStop                  = NewConsonant(Pulmonic Stop, Places.Velar, "k", "k")
    let VdVelarStop                  = NewConsonant(Voiced Pulmonic Stop, Places.Velar, "ɡ", "g")
    let VlUvularStop                 = NewConsonant(Pulmonic Stop, Places.Uvular, "q", "q")
    let VdUvularStop                 = NewConsonant(Voiced Pulmonic Stop, Places.Uvular, "ɢ", "G\\")
    let VdEpiglottalStop             = NewConsonant(Pulmonic Stop, Places.Pharyngeal, "ʡ", ">\\")
    let GlottalStop                  = NewConsonant(Pulmonic Stop, Places.Glottal, "ʔ", "?")
		
    // Sibilant Fricative										
    let VlAlveolarSibFricative       = NewConsonant(Pulmonic Sibilant Fricative, Places.Alveolar, "s", "s")
    let VdAlveolarSibFricative       = NewConsonant(Voiced Pulmonic Sibilant Fricative, Places.Alveolar, "z", "z")
    let VlPostalveolarSibFricative   = NewConsonant(Pulmonic Sibilant Fricative, Places.PostAlveolar, "ʃ", "S")
    let VdPostalveolarSibFricative   = NewConsonant(Voiced Pulmonic Sibilant Fricative, Places.PostAlveolar, "ʒ", "Z")
    let VlRetroflexSibFricative      = NewConsonant(Pulmonic Sibilant Fricative, Places.Retroflex, "ʂ", "s`")
    let VdRetroflexSibFricative      = NewConsonant(Voiced Pulmonic Sibilant Fricative, Places.Retroflex, "ʐ", "z`")
    let VlPalatalSibFricative        = NewConsonant(Pulmonic Sibilant Fricative, Places.Palatal, "ɕ", "s\\")
    let VdPalatalSibFricative        = NewConsonant(Voiced Pulmonic Sibilant Fricative, Places.Palatal, "ʑ", "z\\")

    // Fricative										
    let VlBilabialFricative          = NewConsonant(Pulmonic Fricative, Places.Bilabial, "ɸ", "p\\")
    let VdBilabialFricative          = NewConsonant(Voiced Pulmonic|  Fricative, Places.Bilabial, "β", "B")
    let VlLabiodentalFricative       = NewConsonant(Pulmonic Fricative, Places.LabioDental, "f", "f")
    let VdLabiodentalFricative       = NewConsonant(Voiced Pulmonic Fricative, Places.LabioDental, "v", "v")
    let VlLinguoLabialFricative      = NewConsonant(Pulmonic Fricative, Places.LinguoLabial, "θ̼", "")
    let VdLinguoLabialFricative      = NewConsonant(Voiced Pulmonic Fricative, Places.LinguoLabial, "ð̼", "")
    let VlDentalFricative            = NewConsonant(Pulmonic Fricative, Places.Dental, "θ", "T")
    let VdDentalFricative            = NewConsonant(Voiced Pulmonic Fricative, Places.Dental, "ð", "D")
    let VlAlveolarFricative          = NewConsonant(Pulmonic Fricative, Places.Alveolar, "θ̠", "")
    let VdAlveolarFricative          = NewConsonant(Voiced Pulmonic Fricative, Places.Alveolar, "ð̠", "")
    let VlPostaveolarFricative       = NewConsonant(Pulmonic Fricative, Places.PostAlveolar, "ɹ̠̊", "")
    let VdPostalveolarFricative      = NewConsonant(Voiced Pulmonic Fricative, Places.PostAlveolar, "ɹ̝̊", "")
    let VdRetroflexFricative         = NewConsonant(Voiced Pulmonic Fricative, Places.Retroflex, "ɻ˔","")
    let VlPalatalFricative           = NewConsonant(Pulmonic Fricative, Places.Palatal, "ç", "C")
    let VdPalatalFricative           = NewConsonant(Voiced Pulmonic Fricative, Places.Palatal, "ʝ", "j\\")
    let VlVelarFricative             = NewConsonant(Pulmonic Fricative, Places.Velar, "x", "x")
    let VdVelarFricative             = NewConsonant(Voiced Pulmonic Fricative, Places.Velar, "ɣ", "G")
    let VlUvularFricative            = NewConsonant(Pulmonic Fricative, Places.Uvular, "χ", "X")
    let VdUvularFricative            = NewConsonant(Voiced Pulmonic Fricative, Places.Uvular, "ʁ", "R")
    let VlPharyngealFricative        = NewConsonant(Pulmonic Fricative, Places.Pharyngeal, "ħ", "X\\")
    let VdPharyngealFricative        = NewConsonant(Voiced Pulmonic Fricative, Places.Pharyngeal, "ʕ", "?\\")
    let VlGlottalFricative           = NewConsonant(Pulmonic Fricative, Places.Glottal, "h", "h")
    let VdGlottalFricative           = NewConsonant(Voiced Pulmonic Fricative, Places.Glottal, "ɦ", "h\\")
														
    // Approximant										
    let VlLabioDentalApproximant     = NewConsonant(Pulmonic Approximant, Places.LabioDental, "ʋ̥", "")
    let VdLabioDentalApproximant     = NewConsonant(Voiced Pulmonic Approximant, Places.LabioDental, "ʋ", "v\\", "P")
    let VlPostalveolarApproximant    = NewConsonant(Pulmonic Approximant, Places.Alveolar, "ɹ̥", "")
    let VdPostalveolarApproximant    = NewConsonant(Voiced Pulmonic Approximant, Places.Alveolar, "ɹ", "r\\")
    let VlRetroflexApproximant       = NewConsonant(Pulmonic Approximant, Places.Retroflex, "ɻ̊", "")
    let VdRetroflexApproximant       = NewConsonant(Voiced Pulmonic Approximant, Places.Retroflex, "ɻ", "r\\`")
    let VlPalatalApproximant         = NewConsonant(Pulmonic Approximant, Places.Palatal, "j̊", "")
    let VdPalatalApproximant         = NewConsonant(Voiced Pulmonic Approximant, Places.Palatal, "j", "j")
    let VlVelarApproximant           = NewConsonant(Pulmonic Approximant, Places.Velar, "ɰ̊", "")
    let VdVelarApproximant           = NewConsonant(Voiced Pulmonic Approximant, Places.Velar, "ɰ", "M\\")
    let VdGlottalApproximant         = NewConsonant(Voiced Pulmonic Approximant, Places.Glottal, "ʔ̞", "")
														
    // Tap or Flap										
    let VdBilabialDentalFlap         = NewConsonant(Voiced Pulmonic TapFlap, Places.Bilabial, "ⱱ̟", "")
    let VdLabioDentalFlap            = NewConsonant(Voiced Pulmonic TapFlap, Places.LabioDental, "ⱱ", "")
    let VdLingualLabialStop          = NewConsonant(Voiced Pulmonic TapFlap, Places.LinguoLabial, "ɾ̼", "")
    let VlAlveolarFlap               = NewConsonant(Pulmonic TapFlap, Places.Alveolar, "ɾ̥", "")
    let VdAlveolarTap                = NewConsonant(Voiced Pulmonic TapFlap, Places.Alveolar, "ɾ", "4")
    let VlRetroflexFlap              = NewConsonant(Pulmonic TapFlap, Places.Retroflex, "ɽ̊", "")
    let VdRetroflexFlap              = NewConsonant(Voiced Pulmonic TapFlap, Places.Retroflex, "ɽ", "r`")
    let VdUvularFlap                 = NewConsonant(Voiced Pulmonic TapFlap, Places.Uvular, "ɢ̆", "")
    let VdPharyngealFlap             = NewConsonant(Voiced Pulmonic TapFlap, Places.Pharyngeal, "ʡ̆", "")
														
    // Trill											
    let VlBilabialTrill              = NewConsonant(Pulmonic Trill, Places.Bilabial, "ʙ̥", "")
    let VdBilabialTrill              = NewConsonant(Voiced Pulmonic Trill, Places.Bilabial, "ʙ", "B\\")
    let VlAlveolarTrill              = NewConsonant(Pulmonic Trill, Places.Alveolar, "r̥", "")
    let VdAlveolarTrill              = NewConsonant(Voiced Pulmonic Trill, Places.Alveolar, "r", "r")
    let VlRetroflexTrill             = NewConsonant(Pulmonic Trill, Places.Retroflex, "ɽ̊r̥", "")
    let VdRetroflexTrill             = NewConsonant(Voiced Pulmonic Trill, Places.Retroflex, "ɽr", "")
    let VlUvularTrill                = NewConsonant(Pulmonic Trill, Places.Uvular, "ʀ", "R\\")
    let VlPharyngealTrill            = NewConsonant(Pulmonic Trill, Places.Pharyngeal, "H", "")
    let VdPharyngealTrill            = NewConsonant(Voiced Pulmonic Trill, Places.Pharyngeal, "ʢ", "<\\")
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = NewConsonant(Pulmonic Lateral Fricative, Places.Alveolar, "ɬ", "K")
    let VdAlveolarLateralFricative   = NewConsonant(Voiced Pulmonic Lateral Fricative, Places.Alveolar, "ɮ", "K\\")
    let VlRetroflexLateralFricative  = NewConsonant(Pulmonic Lateral Fricative, Places.Retroflex, "ɭ̊˔", "")
    let VdRetroflexLateralFricative  = NewConsonant(Voiced Pulmonic Lateral Fricative, Places.Retroflex, "ɭ˔", "")
    let VlAlveolarPalatalFricative   = NewConsonant(Pulmonic Lateral Fricative, Places.Palatal, "ʎ̝̊", "")
    let VdAlveolarPalatalFricative   = NewConsonant(Voiced Pulmonic Lateral Fricative, Places.Palatal, "ʎ̝", "")
    let VlVelarPalatalFricative      = NewConsonant(Pulmonic Lateral Fricative, Places.Velar, "ʟ̝̊", "")
    let VdVelarPalatalFricative      = NewConsonant(Voiced Pulmonic Lateral Fricative, Places.Velar, "ʟ̝", "")
														
    // LateralApproximant								
    let VlAlveolarLateralApproximant = NewConsonant(Pulmonic Lateral Approximant, Places.Alveolar, "l̥", "")
    let VdAlveolarLateralApproximant = NewConsonant(Voiced Pulmonic Lateral Approximant, Places.Alveolar, "l", "l")
    let VdVelarizedAlvLatApproximant = NewConsonant(Voiced Velarized Pulmonic Lateral Approximant, Places.Alveolar, "ɫ", "5")
    let VlRetroflexLateral           = NewConsonant(Pulmonic Lateral Approximant, Places.Retroflex, "ɭ̊", "")
    let VdRetroflexLateral           = NewConsonant(Voiced Pulmonic Lateral Approximant, Places.Retroflex, "ɭ", "n`")
    let VlPalatalLateral             = NewConsonant(Pulmonic Lateral Approximant, Places.Palatal, "ʎ̥", "")
    let VdPalatalLateral             = NewConsonant(Voiced Pulmonic Lateral Approximant, Places.Palatal, "ʎ", "L")
    let VlVelarLateral               = NewConsonant(Pulmonic Lateral Approximant, Places.Velar, "ʟ̥", "")
    let VdVelarLateral               = NewConsonant(Voiced Pulmonic Lateral Approximant, Places.Velar, "ʟ", "L\\")
    let VdUvularLateral              = NewConsonant(Voiced Pulmonic Lateral Approximant, Places.Uvular, "ʟ̠", "")

    // Lateral tap/flap
    let VdAlveolarLateralFlap        = NewConsonant(Voiced Pulmonic Lateral TapFlap, Places.Alveolar, "ɺ", "l\\")
    let VdRetroflexLateralFlap       = NewConsonant(Voiced Pulmonic Lateral TapFlap, Places.Retroflex, "ɭ̆", "")
    let VdPalatalLateralFlap         = NewConsonant(Voiced Pulmonic Lateral TapFlap, Places.Palatal, "ʎ̆", "")
    let VdVelarLateralTap            = NewConsonant(Voiced Pulmonic Lateral TapFlap, Places.Velar, "L̆", "")


    //==================================
    // Non-Pulmonic Consonants
    //==================================

    // Clicks
    let VlBilabialTenuisClick        = NewConsonant(Ejective Tenuis Click Affricate, Places.Bilabial, "ʘ", "O\\")
    let VdBilabialTenuisClick        = NewConsonant(Voiced Ejective Tenuis Click Affricate, Places.Bilabial, "ʘ̬", "")
    let VlDentalTenuisClick          = NewConsonant(Ejective Tenuis Click Affricate, Places.Dental, "ǀ", " | ")
    let VdDentalTenuisClick          = NewConsonant(Voiced Ejective Tenuis Click Affricate, Places.Dental, "ǀ̬", "")
    let VlAlveolarTenuisClick        = NewConsonant(Ejective Tenuis Click Affricate, Places.Alveolar, "ǃ", "!\\")
    let VdAlveolarTenuisClick        = NewConsonant(Voiced Ejective Tenuis Click Affricate, Places.Alveolar, "ǃ̬", "")
    let VlPalatalTenuisClick         = NewConsonant(Ejective Tenuis Click Affricate, Places.Palatal, "ǂ", "=\\")
    let VdPalatalTenuisClick         = NewConsonant(Voiced Ejective Tenuis Click Affricate, Places.Palatal, "ǂ̬", "")

    let VlBilabialNasalClick         = NewConsonant(Ejective Nasal Click Affricate, Places.Bilabial, "ʘ̃", "")
    let VlDentalNasalClick           = NewConsonant(Ejective Nasal Click Affricate, Places.Dental, "ǀ̃", "")
    let VlAlveolarNasalClick         = NewConsonant(Ejective Nasal Click Affricate, Places.Alveolar, "ǃ̃", "")
    let VlPalatalNasalClick          = NewConsonant(Ejective Nasal Click Affricate, Places.Palatal, "ǂ̃", "")

    let VlAlveolarTenuisLateralClick = NewConsonant(Ejective Tenuis Lateral Click Affricate, Places.Alveolar, "ǁ", " | \\ | \\")
    let VdAlveolarTenuisLateralClick = NewConsonant(Voiced Ejective Tenuis Lateral Click Affricate, Places.Alveolar, "ǁ̬", "")

    let VlBilabialImplosiveClick     = NewConsonant(Ejective Implosive Click Affricate, Places.Bilabial, "ɓ̥", "")
    let VdBilabialImplosiveClick     = NewConsonant(Voiced Ejective Implosive Click Affricate, Places.Bilabial, "ɓ", "b_<")
    let VlAlveolarImplosiveClick     = NewConsonant(Ejective Implosive Click Affricate, Places.Alveolar, "ɗ̥", "")
    let VdAlveolarImplosiveClick     = NewConsonant(Voiced Ejective Implosive Click Affricate, Places.Alveolar, "ɗ", "d_<")
    let VlRetroflexImplosiveClick    = NewConsonant(Ejective Implosive Click Affricate, Places.Retroflex, "ᶑ̊", "")
    let VdRetroflexImplosiveClick    = NewConsonant(Voiced Ejective Implosive Click Affricate, Places.Retroflex, "ᶑ", "")
    let VlPalatalImplosiveClick      = NewConsonant(Ejective Implosive Click Affricate, Places.Palatal, "ʄ̊", "")
    let VdPalatalImplosiveClick      = NewConsonant(Voiced Ejective Implosive Click Affricate, Places.Palatal, "ʄ", "J\\_<")
    let VlVelarImplosiveClick        = NewConsonant(Ejective Implosive Click Affricate, Places.Velar, "ɠ̊", "")
    let VdVelarImplosiveClick        = NewConsonant(Voiced Ejective Implosive Click Affricate, Places.Velar, "ɠ", "g_<")
    let VlUvularImplosiveClick       = NewConsonant(Ejective Implosive Click Affricate, Places.Uvular, "ʛ̥", "")
    let VdUvularImplosiveClick       = NewConsonant(Voiced Ejective Implosive Click Affricate, Places.Uvular, "ʛ", "G\\_<")

    //==================================
    // Pulmonic Affricates
    //==================================

    // Sibilants
    let VlAlveolarAffricate          = NewConsonant(Pulmonic Sibilant Affricate, Places.Alveolar, "ts", "")
    let VdAlveolarAffricate          = NewConsonant(Voiced Pulmonic Sibilant Affricate, Places.Alveolar, "dz", "")
    let VlPostalveolarAffricate      = NewConsonant(Pulmonic Sibilant Affricate, Places.PalatoAlveolar, "t̠ʃ", "")
    let VdPostalveolarAffricate      = NewConsonant(Voiced Pulmonic Sibilant Affricate, Places.PalatoAlveolar, "d̠ʒ", "")
    let VlRetroflexAffricate         = NewConsonant(Pulmonic Sibilant Affricate, Places.Retroflex, "ʈʂ", "")
    let VdRetroflexAffricate         = NewConsonant(Voiced Pulmonic Sibilant Affricate, Places.Retroflex, "ɖʐ", "")
    let VlAlveoloPalatalAffricate    = NewConsonant(Pulmonic Sibilant Affricate, Places.AlveoloPalatal, "tɕ", "")
    let VdAlveoloPalatalAffricate    = NewConsonant(Voiced Pulmonic Sibilant Affricate, Places.AlveoloPalatal, "dʑ", "")

    // Non-Sibilants
    let VlBilabialNSAffricate        = NewConsonant(Pulmonic Affricate, Places.Bilabial, "pɸ", "")
    let VdBilabialNSAffricate        = NewConsonant(Voiced Pulmonic Affricate, Places.Bilabial, "bβ", "")
    let VlLabioDentalNSAffricate     = NewConsonant(Pulmonic Affricate, Places.LabioDental, "p̪f", "")
    let VdLabioDentalNSAffricate     = NewConsonant(Voiced Pulmonic Affricate, Places.LabioDental, "b̪v", "")
    let VlDentalNSAffricate          = NewConsonant(Pulmonic Affricate, Places.Dental, "t̪θ", "")
    let VdDentalNSAffricate          = NewConsonant(Voiced Pulmonic Affricate, Places.Dental, "d̪ð", "")
    let VlAlveolarNSAffricate        = NewConsonant(Pulmonic Affricate, Places.Alveolar, "tɹ̝̊", "")
    let VdAlveolarNSAffricate        = NewConsonant(Voiced Pulmonic Affricate, Places.Alveolar, "dɹ̝", "")
    let VlPalatoAlveolarNSAffricate  = NewConsonant(Pulmonic Affricate, Places.PalatoAlveolar, "t̠ɹ̠̊˔", "")
    let VdPalatoAlveolarNSAffricate  = NewConsonant(Voiced Pulmonic Affricate, Places.PalatoAlveolar, "d̠ɹ̠˔", "")
    let VlPalatalNSAffricate         = NewConsonant(Pulmonic Affricate, Places.Palatal, "cç", "")
    let VdPalatalNSAffricate         = NewConsonant(Voiced Pulmonic Affricate, Places.Palatal, "ɟʝ", "")
    let VlVelarNSAffricate           = NewConsonant(Pulmonic Affricate, Places.Velar, "kx", "")
    let VdVelarNSAffricate           = NewConsonant(Voiced Pulmonic Affricate, Places.Velar, "ɡɣ", "")
    let VlUvularNSAffricate          = NewConsonant(Pulmonic Affricate, Places.Uvular, "qχ", "")
    let VdEpiglottalNSAffricate      = NewConsonant(Voiced Pulmonic Affricate, Places.Pharyngeal, "ʡʢ", "")
    let VlGlottalNSAffricate         = NewConsonant(Pulmonic Affricate, Places.Glottal, "ʔh", "")

    // Lateral
    let VlAlveolarLateralAffricate   = NewConsonant(Pulmonic Lateral Affricate, Places.Alveolar, "tɬ̝̊", "")
    let VdAlveolarLateralAffricate   = NewConsonant(Voiced Pulmonic Lateral Affricate, Places.Alveolar, "dɮ", "")
    let VlRetroflexLateralAffricate  = NewConsonant(Pulmonic Lateral Affricate, Places.Retroflex, "ʈɭ̊˔", "")
    let VdPalatalLateralAffricate    = NewConsonant(Voiced Pulmonic Lateral Affricate, Places.Palatal, "cʎ̝̊", "")
    let VlVelarLateralAffricate      = NewConsonant(Pulmonic Lateral Affricate, Places.Velar, "kʟ̝̊", "")
    let VdVelarLateralAffricate      = NewConsonant(Voiced Pulmonic Lateral Affricate, Places.Velar, "ɡʟ̝", "")

    //==================================
    // Ejective | Affricates
    //==================================

    // Central
    let VlAlveolarEjectiveAffricate       = NewConsonant(Ejective Central Affricate, Places.Alveolar, "tsʼ", "")
    let VlPalatoAlveolarEjectiveAffricate = NewConsonant(Ejective Central Affricate, Places.PalatoAlveolar, "t̠ʃʼ", "")
    let VlRetroflexEjectiveAffricate      = NewConsonant(Ejective Central Affricate, Places.Retroflex, "ʈʂʼ", "")
    let VlVelarEjectiveAffricate          = NewConsonant(Ejective Central Affricate, Places.Velar, "kxʼ", "")
    let VlUvularEjectiveAffricate         = NewConsonant(Ejective Central Affricate, Places.Uvular, "qχʼ", "")

    // Lateral
    let VlAlveolarLateralEjective         = NewConsonant(Ejective Lateral Affricate, Places.Alveolar, "tɬʼ", "")
    let VlPalatalLateralEjective          = NewConsonant(Ejective Lateral Affricate, Places.Palatal, "cʎ̝̊ʼ", "")
    let VlVelarLateralEjective            = NewConsonant(Ejective Lateral Affricate, Places.Velar, "kʟ̝̊ʼ", "")

    let VlLabialVelarFricative            = NewConsonant(Fricative, Places.LabialVelar, "ʍ", "W")

// Pre-existing
//    let VlAlveoloPalatalFricative1      = NewConsonant(CPM(Categories.Other, Places.AlveoloPalatal) Fricative, "ɕ", "")
//    let VlAlveoloPalatalFricative       = NewConsonant(CPM(Categories.Other, Places.AlveoloPalatal) Fricative, "ʑ", "")

    let VdLabialVelarApproximant          = NewConsonant(Voiced Approximant, Places.LabialVelar, "w", "w")
    let VdLabialPalatalApproximant        = NewConsonant(Voiced Approximant, Places.LabialPalatal, "ɥ", "H")

    let SimultaneousSx                    = NewConsonant(Sibilant Fricative, Places.PostAlveolar, "ɧ", "x\\")
    let VlEpiglottalFricative             = NewConsonant(Fricative, Places.Pharyngeal, "ʜ", "H\\")
    let VdEpiglottalFricative             = NewConsonant(Voiced Fricative, Places.Pharyngeal, "ʢ", "?\\")
    let VlEpiglottalPlosive               = NewConsonant(Plosive, Places.Pharyngeal, "ʡ", "<\\")

    // Ejectives
    let VlBilabialStopEjective            = NPEjective(Stop, VlBilabialStop)
    let VlAveolarStopEjective             = NPEjective(Stop, VlAlveolarStop)
    let VlRetroflexStopEjective           = NPEjective(Stop, VlRetroflexStop)
    let VlPalatalStopEjective             = NPEjective(Stop, VlPalatalStop)
    let VlVelarStopEjective               = NPEjective(Stop, VlVelarStop)
    let VlUvularStopEjective              = NPEjective(Stop, VlUvularStop)
    let VlEpiglottalStopEjective          = NPEjective(Stop, VdEpiglottalStop)
    let VlBilabialFricativeEjective       = NPEjective(Fricative, VlBilabialFricative)
    let VlLabiodentalFricativeEjective    = NPEjective(Fricative, VlLabiodentalFricative)
    let VlDentalFricativeEjective         = NPEjective(Fricative, VlDentalFricative)
    let VlAlveolarFricativeEjective       = NPEjective(Fricative, VlAlveolarSibFricative)
    let VlPostalveolarFricativeEjective   = NPEjective(Fricative, VlPostalveolarSibFricative)
    let VlRetroflexFricativeEjective      = NPEjective(Fricative, VlRetroflexSibFricative)
    let VlPalatalFricativeEjective        = NPEjective(Fricative, VlPalatalSibFricative)
    let VlVelarFricativeEjective          = NPEjective(Fricative, VlVelarFricative)
    let VlUvularFricativeEjective         = NPEjective(Fricative, VlUvularFricative)

    // Lateral Fricatives
    let VlPostalveolarLatFricEjective    = NPEjective(Lateral | Fricative, VlAlveolarLateralFricative)

    //==================================
    // Vowels
    //==================================

    let CloseFrontUnrounded          = NewVowel(Unrounded, Opens.Close, Backnesses.Front, "i", "i")
    let CloseFrontRounded            = NewVowel(Rounded, Opens.Close, Backnesses.Front, "y", "y")
    let CloseCentralUnrounded        = NewVowel(Unrounded, Opens.Close, Backnesses.Central, "ɨ", "1")
    let CloseCentralRounded          = NewVowel(Rounded, Opens.Close, Backnesses.Central, "ʉ", "}")
    let CloseBackUnrounded           = NewVowel(Unrounded, Opens.Close, Backnesses.Back, "ɯ", "M")
    let CloseBackRounded             = NewVowel(Rounded, Opens.Close, Backnesses.Back, "u", "u")

    let NearCloseFrontUnrounded      = NewVowel(Unrounded, Opens.NearClose, Backnesses.NearFront, "ɪ", "I")
    let NearCloseCentralUnrounded    = NewVowel(Unrounded | NonIPA, Opens.NearClose, Backnesses.Central, "ᵻ", "I\\")
    let NearCloseFrontRounded        = NewVowel(Rounded, Opens.NearClose, Backnesses.NearFront, "ʏ", "Y")
    let NearCloseBackRounded         = NewVowel(Rounded, Opens.NearClose, Backnesses.NearBack, "ʊ", "U")
    let NearCloseCentralRounded      = NewVowel(Rounded |NonIPA, Opens.NearClose, Backnesses.Central, "ᵿ", "U\\")

    let CloseMidFrontUnrounded       = NewVowel(Unrounded, Opens.CloseMid, Backnesses.Front, "e", "e")
    let CloseMidFrontRounded         = NewVowel(Rounded, Opens.CloseMid, Backnesses.Front, "ø", "2")
    let Schwa                        = NewVowel(Unrounded, Opens.CloseMid, Backnesses.Central, "ə", "@")
    let RoundedSchwa                 = NewVowel(Rounded, Opens.CloseMid, Backnesses.Central, "ɵ", "8")
    let CloseMidBackUnrounded        = NewVowel(Unrounded, Opens.CloseMid, Backnesses.Back, "ɤ", "7")
    let CloseMidBackRounded          = NewVowel(Rounded, Opens.CloseMid, Backnesses.Back, "o", "o")

    let MidFrontUnrounded            = NewVowel(Unrounded, Opens.Mid, Backnesses.Front, "ø̞", "")
    let MidCentralUnrounded          = NewVowel(Unrounded, Opens.Mid, Backnesses.Central, "ɘ", "@\\")
    let MidBackUnrounded             = NewVowel(Unrounded, Opens.Mid, Backnesses.Back, "o̞", "")

    let OpenMidNearFrontUnrounded    = NewVowel(Unrounded, Opens.OpenMid, Backnesses.NearFront, "ɛ", "E")
    let OpenMidNearFrontRounded      = NewVowel(Rounded, Opens.OpenMid, Backnesses.NearFront, "œ", "9")
    let OpenMidCentral               = NewVowel(Unrounded, Opens.OpenMid, Backnesses.Central, "ɜ", "3")
    let OpenMidCentralRounded        = NewVowel(Rounded, Opens.OpenMid, Backnesses.Central, "ɞ", "3\\")
    let OpenMidBackUnrounded         = NewVowel(Unrounded, Opens.OpenMid, Backnesses.Back, "ʌ", "V")
    let OpenMidBackRounded           = NewVowel(Rounded, Opens.OpenMid, Backnesses.Back, "ɔ", "O")

    let NearFrontUnrounded           = NewVowel(Unrounded, Opens.NearOpen, Backnesses.NearFront, "æ", "{")
    let FrontOpenRounded             = NewVowel(Rounded, Opens.NearOpen, Backnesses.NearFront, "ɶ", "&")
    let OpenMidSchwa                 = NewVowel(Rounded, Opens.NearOpen, Backnesses.Central, "ɐ", "6")

    let OpenBackUnrounded            = NewVowel(Unrounded, Opens.Open, Backnesses.Back, "ɑ", "A")
    let OpenBackRounded              = NewVowel(Rounded, Opens.Open, Backnesses.Back, "ɒ", "Q")
    let OpenCentralUnrounded         = NewVowel(Unrounded, Opens.Open, Backnesses.Central, "ä", "a_\"")
    let OpenNearFrontUnrounded       = NewVowel(Unrounded, Opens.Open, Backnesses.NearFront, "a", "a")
    let OpenNearFrontRounded         = NewVowel(Rounded, Opens.Open, Backnesses.NearFront, "ɶ", "&")

// How to show rhotic vowels?
//    let OpenMidCentralRhotic       = NewVowel(Rhotic, Opens.OpenMid, Backnesses.Central, "ɝ", "")
//    let RhoticSchwa                = NewVowel(Rhotic, Opens.Open, Backnesses.NearFront, "ɚ", "@`")
  end

  let ImpossibleSounds = [
    Imp(Pulmonic Nasal, Places.Pharyngeal),
    Imp(Pulmonic Nasal, Places.Glottal),
    Imp(Pulmonic Stop Voiced, Places.Pharyngeal),
    Imp(Pulmonic Stop Voiced, Places.Glottal),
    Imp(Pulmonic Sibilant Fricative, Places.Bilabial),
    Imp(Pulmonic Sibilant Fricative, Places.LabioDental),
    Imp(Pulmonic Sibilant Fricative, Places.LinguoLabial),
    Imp(Pulmonic Sibilant Fricative, Places.Velar),
    Imp(Pulmonic Sibilant Fricative, Places.Uvular),
    Imp(Pulmonic Sibilant Fricative, Places.Pharyngeal),
    Imp(Pulmonic Sibilant Fricative, Places.Glottal),
    Imp(Pulmonic Trill, Places.Velar),
    Imp(Pulmonic Trill, Places.Glottal),
    Imp(Pulmonic TapFlap, Places.Velar),
    Imp(Pulmonic TapFlap, Places.Glottal),
    Imp(Pulmonic Lateral Fricative, Places.Bilabial),
    Imp(Pulmonic Lateral Fricative, Places.LabioDental),
    Imp(Pulmonic Lateral Fricative, Places.Pharyngeal),
    Imp(Pulmonic Lateral Fricative, Places.Glottal),
    Imp(Pulmonic Lateral Approximant, Places.Bilabial),
    Imp(Pulmonic Lateral Approximant, Places.LabioDental),
    Imp(Pulmonic Lateral Approximant, Places.Pharyngeal),
    Imp(Pulmonic Lateral Approximant, Places.Glottal),
    Imp(Pulmonic Lateral TapFlap, Places.Bilabial),
    Imp(Pulmonic Lateral TapFlap, Places.LabioDental),
    Imp(Pulmonic Lateral TapFlap, Places.Pharyngeal),
    Imp(Pulmonic Lateral TapFlap, Places.Glottal),
    Imp(Pulmonic Sibilant Affricate, Places.Bilabial),
    Imp(Pulmonic Sibilant Affricate, Places.LabioDental),
    Imp(Pulmonic Sibilant Affricate, Places.Velar),
    Imp(Pulmonic Sibilant Affricate, Places.Uvular),
    Imp(Pulmonic Sibilant Affricate, Places.Pharyngeal),
    Imp(Pulmonic Sibilant Affricate, Places.Glottal),
    Imp(Pulmonic Lateral Affricate, Places.Bilabial),
    Imp(Pulmonic Lateral Affricate, Places.LabioDental),
    Imp(Pulmonic Lateral Affricate, Places.Pharyngeal),
    Imp(Pulmonic Lateral Affricate, Places.Glottal),
    Imp(Ejective Lateral Fricative Affricate, Places.Bilabial),
    Imp(Ejective Lateral Fricative Affricate, Places.LabioDental),
    Imp(Ejective Lateral Fricative Affricate, Places.Pharyngeal),
    Imp(Ejective Central Affricate, Places.Glottal),
    Imp(Ejective Lateral Affricate, Places.Bilabial),
    Imp(Ejective Lateral Affricate, Places.LabioDental),
    Imp(Ejective Lateral Affricate, Places.Pharyngeal),
    Imp(Ejective Lateral Affricate, Places.Glottal),
    Imp(Ejective Tenuis Click Affricate, Places.Velar),
    Imp(Ejective Tenuis Click Affricate, Places.Uvular),
    Imp(Ejective Tenuis Click Affricate, Places.Pharyngeal),
    Imp(Ejective Nasal Click Affricate, Places.Velar),
    Imp(Ejective Nasal Click Affricate, Places.Uvular),
    Imp(Ejective Nasal Click Affricate, Places.Pharyngeal),
    Imp(Ejective Tenuis Lateral Click Affricate, Places.Bilabial),
    Imp(Ejective Tenuis Lateral Click Affricate, Places.LabioDental),
    Imp(Ejective Tenuis Lateral Click Affricate, Places.Velar),
    Imp(Ejective Tenuis Lateral Click Affricate, Places.Uvular),
    Imp(Ejective Tenuis Lateral Click Affricate, Places.Pharyngeal),
  ]                       									

  let AllSounds = Sounds + ImpossibleSounds

  with Diacritics
    let Centralized                  = Encode("\u0308", "_\"")
    let Advanced                     = Encode("\u031F", "_+")
    let Retracted                    = Encode("\u0320", "_-")
    let RisingTone                   = Encode("\u030C", "_R", "_/")
    let Voiceless                    = Encode("\u0325", "_0")
    let Implosive                    = Encode(null, "_<")
    let Syllabic                     = Encode("\u0329", "_=", "=")
    let Ejective                     = Encode("\u02BC", "_>")
    let Pharyngealized               = Encode("\u02E4", "_?\\")
    let FallingTone                  = Encode("\u0302", "_\\", "_F")
    let NonSyllabic                  = Encode("\u032F", "_^")
    let NoAudibleRelease             = Encode("\u031A", "_}")
    let RhoticHook                   = Encode("\u02DE", "`")
    let Nasalized                    = Encode("\u0303", "_~", "~")
    let AdvancedTongueRoot           = Encode("\u0318", "_A")
    let Apical                       = Encode("\u033A", "_a")
    let ExtraLowTone                 = Encode("\u030F", "_B")
    let LowRisingTone                = Encode("\u1DC5", "_B_L")
    let LessRounded                  = Encode("\u031C", "_c")
    let Dental                       = Encode("\u032A", "_d")
    let VelarizedOrPharyngealized    = Encode("\u0334", "_e")
    let GlobalFall                   = Encode("↘", "<F>")
    let Velarized                    = Encode("\u02E0", "_G")
    let HighTone                     = Encode("\u0301", "_H")
    let HighRisingTone               = Encode("\u1DC4", "_H_T")
    let Aspirated                    = Encode("\u02B0", "_h")
    let Palatalized                  = Encode("\u02B2", "_j", "'")
    let CreakyVoiced                 = Encode("\u0330", "_k")
    let LowTone                      = Encode("\u0300", "_L")
    let LateralRelease               = Encode("\u02E1", "_l")
    let MidTone                      = Encode("\u0304", "_M")
    let Laminal                      = Encode("\u033B", "_m")
    let LinguoLabial                 = Encode("\u033C", "_N")
    let NasalRelease                 = Encode("\u207F", "_n")
    let MoreRounded                  = Encode("\u0339", "_O")
    let Lowered                      = Encode("\u031E", "_o")
    let RetractedTongueRoot          = Encode("\u0319", "_q")
    let GlobalRise                   = Encode("↗", "<R>")
    let RisingFallingTone            = Encode("\u1DC8", "_R_F")
    let Raised                       = Encode("\u031D", "_r")
    let ExtraHighTone                = Encode("\u030B", "_T")
    let BreathyVoiced                = Encode("\u0324", "_t")
    let Voiced                       = Encode("\u032C", "_v")
    let Labialized                   = Encode("\u02B7", "_W")
    let ExtraShort                   = Encode("\u02D8", "_X")
    let MidCentralized               = Encode("\u033D", "_x")
    let Downstep                     = Encode("↓", "!")
    let Upstep                       = Encode("↑", "^")
    let SylableBreak                 = Encode(".", ".")
    let PrimaryStress                = Encode("ˈ", "\"")
    let SecondaryStress              = Encode("ˌ", "%")
    let Long                         = Encode("ː", ":")
    let HalfLong                     = Encode("ˑ", ":\\")
    let Separator                    = Encode("", "-")
    let UndefinedEscapeCharacter     = Encode(null, "*")
    let IndeterminacyinFrenchVowels  = Encode(null, "/")
    let BeginNonsegmentalNotation    = Encode(null, "<")
    let Voicedepiglottalfricative    = Encode("ʢ", "<\\")
    let Endnonsegmentalnotation      = Encode("", ">")
    let Postalveolarclick            = Encode("ǃ", "!\\")
    let MinorGroup                   = Encode(" | ", " | ")
    let Dentalclick                  = Encode("ǀ", " | \\")
    let MajorGroup                   = Encode("‖", " |  | ")
    let Alveolarlateralclick         = Encode("ǁ", " | \\ | \\")
    let Palatalclick                 = Encode("ǂ", "#NAME?")
    let Linkingmark                  = Encode("‿", "-\\")
    let VoicelessDescender           = Encode("\u030A", "")
    let CombiningMacron              = Encode("\u0331", "")
    let TieBarBelow                  = Encode("\u035C", "")
    let TieBarAbove                  = Encode("\u0361", "")
    let ReadyMadeCombination         = Encode("\u026B", "")
    let Becomes                      = Encode("→", "")
  end

  //======================================================================

  let HasFlag(flags, flag)        = (flags & flag) != None
  let NotFlag(flags, flag)        = (flags & flag) == None
  let HasMask(flag, fmask, flags) = (flag & fmask) == (flags & fmask)

  let FlagText(flags) = Span {
    Separator: Space,
    (each flags).Name
  }

  let SoundName(sound) = Span {
    if (sound.Flags.HasFlag(Vowel))
      sound.Open,
      Space,
      sound.Backness,
    else
      sound.Place,
    end,
    Space,
    FlagText(sound.Flags),
  }

  let ShowCodePoint(c) = {TextFamily: TextFamilies.Consolas, TextRadix: 16, TextDigits: 4} Type.Integer(c)

  let CodePoints(text) = Span {
    Separator: Lang.Separator,
    if (text)
      ShowCodePoint(each text)
    end
  }

  let SAMPA(sound) = Span {
    TextFamily: TextFamilies.Consolas,
    sound.Sampa,
    if (sound.Alt)
      "Alt: ",
      sound.Alt
    end
  }
  //======================================================================
  // Matching Options Table
  //======================================================================

  let CheckFlags(sflags, rflags, options) = sflags.NotFlag(options.Exclude) and sflags.HasFlag(options.Include) and sflags.HasMask(options.RowMask | rflags, rflags)

  let AnyManners(flags, data)             = CheckFlags(data.Flags, flags | data.Options.All, data.Options)

  let MatchRow(sound, data)               = sound.Place == data.Place and CheckFlags(sound.Flags, data.Flags, data.Options)

  let MatchInclude(sound, data)           = sound.Place == data.Place and sound.Flags.NotFlag(data.Options.Exclude) and
                                            sound.Flags.HasFlag(data.Options.Include) and
                                            data.Options.Manners.Contains(AnyManners, {Flags: sound.Flags, Options: data.Options})

  let MatchPlace(place, options)          = AllSounds.Contains(MatchInclude, {Place: place, Options: options})
  let GetPlaces(options)                  = Places.FindSlice(MatchPlace, options)


  let BoxSize  = Type.Size(18 pts, 20 pts)
  let CellSize = Type.Size(BoxSize.Width * 2, BoxSize.Height)

  let ShowSound(ref sound) = Span {
    Style.IPAFamily,
    sound.Text
  }

  let SoundText(ref sound) = ShowSound(sound) {
    Popup: SoundPopup.Call(sound),
    Link: EachSymbol.FullSymbolName,
  }

  let SoundBox(sound, color) = Canvas {
    HAlign: HAligns.Center,
    Size: BoxSize,
    if (sound.Text)
      TextHeight: BoxSize.Height - 4 pts,
      TextColor: color,
      SoundText(sound)
    else
      Style.ImpossibleBackground
    end
  }

  let ShowBox(sound, color) = SoundBox(sound, color) {
    if (sound.Flags.HasFlag(Voiced))
      X: BoxSize.Width
    end
  }

  let MatchError(matches) = matches.Length > 2 or (matches.Length == 2 and matches[0].Flags.HasFlag(Voiced) == matches[1].Flags.HasFlag(Voiced))

  let SoundBlock(matches) = Cell {
    Style.SoundBottom,
    if (matches.Length > 0)
      if (matches.Length == 1 and matches[0].Flags.HasFlag(Impossible))
        Style.ImpossibleBackground
      else
        TextHeight: 1 pts,
        Span {
          Canvas {
            Size: CellSize,
            ShowBox(each matches, MatchError(matches) ? Colors.Red : Colors.Black)
          }
        }
      end
    end
  }

  let AddCell(options, place, flags) = SoundBlock(AllSounds.FindSlice(MatchRow, {Place: place, Flags: flags, Options: options}))

  let AddRow(options, places, flags) begin
    var allflags = flags | options.All;
    return Row {
      Cell {
        VAlign: VAligns.Center,
        EdgeR: 0.5 pts,
        Style.TitleBackground,
        PaddingLR: 2 pts,
        TextHeight: 7 pts,
        if (allflags.HasMask(Lateral Pulmonic Affricate Sibilant, Pulmonic Affricate))
          Lang.NoSibilant,
        else
          FlagText(flags),
        end,
      },
      AddCell(options, each places, allflags)
    }
  end

  let PlaceHeader(place) = Style.HeaderCell(place.Name)

  let ShowTable(options) begin
    var places = GetPlaces(options);

    return Block {
      Table {
        Style.TableEdge,
        Columns: [options.ColWidth {EdgeR: 0.5 pts}] +
                 [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * places.Length,

        Style.TitleBar(options.Title, places.Length+1),
        Row {
          TextHeight: 6 pts,
          Style.HeaderCell(Bold Lang.Manner) {HAlign: HAligns.Left},
          PlaceHeader(each places)
        },
        AddRow(options, places, each options.Manners),
      },
      Style.TableNotes {
        Lang.Impossible,
        Space,
        options.Notes
      },
    }
  end

  //======================================================================
  // Options for each table type
  //======================================================================

  let PulmonicTable = {
    Title: Lang.PConsonants,
    ColWidth: 45 pts,
    Exclude: Affricate,
    Include: Consonant Pulmonic,
    All: None,
    Manners: [Nasal, Stop, Sibilant Fricative, Fricative, Approximant, TapFlap, Trill, Lateral Fricative, Lateral Approximant, Lateral TapFlap],
    RowMask: Nasal Stop Sibilant Fricative Approximant TapFlap Trill Lateral Velarized,
    Notes: Lang.PulmonicSymbols
  }

  let NonPulmonicTable = {
    Title: Lang.NPConsonants,
    ColWidth: 80 pts,
    Exclude: Vowel Pulmonic Central,
    Include: Ejective Click Implosive,
    All: None,
    Manners: [Ejective Stop, Ejective Fricative, Ejective Lateral Fricative, Click Tenuis, Click Nasal, Click Tenuis Lateral, Implosive],
    RowMask: Lateral,
    Notes: Lang.ConsonantSymbols
  }

  let PulmonicAffricatesTable = {
    Title: Lang.PulmonicAffricates,
    ColWidth: 50 pts,
    Exclude: Vowel,
    Include: Affricate Sibilant Lateral,
    All: Pulmonic Affricate,
    Manners: [Sibilant, None, Lateral],
    RowMask: Pulmonic Affricate Sibilant Fricative Lateral,
  }

  let EjectiveAffricatesTable = {
    Title: Lang.EjectiveAffricates,
    ColWidth: 50 pts,
    Exclude: Vowel Click Implosive Pulmonic,
    Include: Ejective Affricate Central Lateral,
    All: Ejective Affricate,
    Manners: [Central, Lateral],
    RowMask: Pulmonic Approximant Central Lateral,
  }
  //======================================================================

  let ShowVowel(sound) = SoundBox(sound) {
    if (sound.IsRounded)
      X: BoxSize.Width
    end
  }

  let VowelBlock(matches) = Cell {
    Style.SoundBottom,
    HAlign: HAligns.Center,
    TextHeight: BoxSize.Height,
    if (matches.Length == 2)
      Span {
        SoundText(matches[0]),
        " • " {TextColor: Colors.LightGray},
        SoundText(matches[1]),
      }
    else
      SoundText(matches[0]),
    end
  }

  let MatchVowelPair(sound, data) = sound.Flags.HasFlag(Vowel) and sound.Open == data.Open and sound.Backness == data.Backness
  let VowelCell(open, backness)   = VowelBlock(Sounds.FindSlice(MatchVowelPair, {Open: open, Backness: backness}))

  let VowelRow(open) = Row {
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      open.Name
    },
    VowelCell(open, each Backnesses)
  }

  let VowelTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [(1 inch){EdgeR: 0.5 pts}] + [BoxSize.Width*3 {EdgeR: 0.25 pts}] * Backnesses.Length,
      Style.TitleBar(Lang.Vowels, Backnesses.Length+1),
      Row {
        TextHeight: 10 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(each Backnesses)
      },
      VowelRow(each Opens)
    },
    Style.TableNotes {
      Lang.VowelSymbols,
    },
  }
  //======================================================================

  let MatchOther(sound) = sound.Flags.HasMask(Vowel Affricate, None)

  let OtherColumns = 2

  let OtherCell(sound) = {
    Cell {
      VAlign: VAligns.Center,
      HAlign: HAligns.Center,
      TextHeight: 20 pts,
      SoundText(sound),
    },
    Cell {
      VAlign: VAligns.Center,
      SoundName(sound)
    }
  }

  let OtherRow(sounds) = Row {
    OtherCell(each sounds)
  }

  let OtherTable = Block {
    Table {
      Style.TableEdge,
      Columns: [BoxSize.Width, Metrics.Content.Width * 0.5 - BoxSize.Width] * OtherColumns,
      Style.TitleBar(Lang.OtherSymbols, OtherColumns*2),
      OtherRow(each (Sounds.FindSlice(MatchOther) / OtherColumns)),
    },
    Style.TableNotes {
    }
  }
  //======================================================================

  let SoundColumns = 4
  let SoundSize    = 40 pts

  let SoundCell(sound) = Cell {
    Edge: 0.25 pts {Color: Colors.LightGray},
    Padding: 2 pts,
    ParAlignment: ParAlignments.Center,
    Paragraph {
      LocationMark: EachSymbol.FullSymbolName,
      SpaceBefore: 8 pts,
      SpaceAfter: 8 pts,
      TextHeight: SoundSize,
      ShowSound(sound),
      SpaceAfter: SoundSize * 0.125
    },
    Paragraph {
      TextHeight: 10 pts,
      SoundName(sound),
    },
    Paragraph {
      TextHeight: 8 pts,
      ParBackground: 95%,
      CodePoints(sound.Text),
    },
    Paragraph {
      TextHeight: 8 pts,
      if (sound.Sampa and sound.Sampa.Length > 0)
        ParBackground: 90%,
        SAMPA(sound),
      elseif (sound.Text.Length == 1)
        ParBackground: Colors.Red,
      end
    },
  }

  let SoundRow(sounds) = Row {
    SoundCell(each sounds)
  }

  let SoundTable = Block {
    Table {
      Columns: [Metrics.Content.Width / SoundColumns] * SoundColumns,
      Style.TitleBar(Lang.IPAListing, SoundColumns),
      SoundRow(each (Sounds / SoundColumns))
    },
    Style.TableNotes {
    }
  }

  let SoundPopup(sound) = Table {
    Columns: [2 inches],
    Row {
      SoundCell(sound)
    }
  }
  //======================================================================

  let ShowGroups = Block {
    ShowTable(each [PulmonicTable, NonPulmonicTable]),
    PageBreak,
    ShowTable(each [PulmonicAffricatesTable, EjectiveAffricatesTable]),
    VowelTable,
//    OtherTable,
  }
  //======================================================================
end
