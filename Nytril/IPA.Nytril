using Format, Units
//======================================================================

with IPA {
  with Lang {
    let PulmonicSymbols = "Where symbols appear in pairs, the one to the right represents a modally voiced consonant, except for murmured {0}."
    let Extensions      = "Light gray letters are unofficial extensions of the IPA."
  }

  let Link = IO.Domain("http://www.internationalphoneticalphabet.org") IO.Folder("ipa-charts") IO.Folder("ipa-symbols-chart-complete")

  let None = 0
  let PulmonicColumns = 12

  flags Props {
    Voiced,
    Pulmonic,
    Click,
    ImStop,
    Extension,
  }

  enum Categories {
    Vowel,
    Consonant
  }

  enum Places {
    Bilabial,
    Labio_Dental,
    Linguo_Labial,
    Dental,
    Alveolar,
    Postalveolar,
    Retroflex,
    Palatal,
    Velar,
    Uvular,
    Pharyngeal,
    Glottal,
  }

  enum Manners {
    Nasal,
    Stop,
    Sibilant_Fricative,
    Fricative,
    Approximant,
    Tap_Flap,
    Trill,
    Lateral_Fricative,
    Lateral_Approximant,
    Lateral_Tap_Flap
  }

  let CleanName(s) = s.Substitute(s.FindIndex("_"), Space)
  let HasFlag(props, prop) = (props & prop) != 0

  let Set(c, category, form, sound, prop) = {
    Text: c,
    Category: category,
    Place: form,
    Manner: sound,
    Prop: prop
  }

  let PC(c, form, sound, prop) = Set(c, Categories.Consonant, form, sound, prop | Props.Pulmonic)
  let PCI(form, sound, prop)   = PC(null, form, sound, prop)

  let EqualSound(r, data) =
    r.Category == data.Category and
    r.Place == data.Place and
    r.Manner == data.Manner and
    r.Prop.HasFlag(data.Prop)

  let Impossible = [
    PCI(Places.Pharyngeal, Manners.Nasal, None),
    PCI(Places.Pharyngeal, Manners.Nasal, Props.Voiced),
    PCI(Places.Glottal, Manners.Nasal, None),
    PCI(Places.Glottal, Manners.Nasal, Props.Voiced),

    PCI(Places.Pharyngeal, Manners.Stop, Props.Voiced),
    PCI(Places.Glottal, Manners.Stop, Props.Voiced),

    PCI(Places.Bilabial, Manners.Sibilant_Fricative, None),
    PCI(Places.Bilabial, Manners.Sibilant_Fricative, Props.Voiced),
    PCI(Places.Labio_Dental, Manners.Sibilant_Fricative, None),
    PCI(Places.Labio_Dental, Manners.Sibilant_Fricative, Props.Voiced),
    PCI(Places.Linguo_Labial, Manners.Sibilant_Fricative, None),
    PCI(Places.Linguo_Labial, Manners.Sibilant_Fricative, Props.Voiced),

    PCI(Places.Velar, Manners.Sibilant_Fricative, None),
    PCI(Places.Velar, Manners.Sibilant_Fricative, Props.Voiced),
    PCI(Places.Uvular, Manners.Sibilant_Fricative, None),
    PCI(Places.Uvular, Manners.Sibilant_Fricative, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.Sibilant_Fricative, None),
    PCI(Places.Pharyngeal, Manners.Sibilant_Fricative, Props.Voiced),
    PCI(Places.Glottal, Manners.Sibilant_Fricative, None),
    PCI(Places.Glottal, Manners.Sibilant_Fricative, Props.Voiced),

    PCI(Places.Velar, Manners.Trill, None),
    PCI(Places.Velar, Manners.Trill, Props.Voiced),
    PCI(Places.Glottal, Manners.Trill, None),
    PCI(Places.Glottal, Manners.Trill, Props.Voiced),
    PCI(Places.Velar, Manners.Tap_Flap, None),
    PCI(Places.Velar, Manners.Tap_Flap, Props.Voiced),
    PCI(Places.Glottal, Manners.Tap_Flap, None),
    PCI(Places.Glottal, Manners.Tap_Flap, Props.Voiced),
    PCI(Places.Bilabial, Manners.Lateral_Fricative, None),
    PCI(Places.Bilabial, Manners.Lateral_Fricative, Props.Voiced),
    PCI(Places.Labio_Dental, Manners.Lateral_Fricative, None),
    PCI(Places.Labio_Dental, Manners.Lateral_Fricative, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.Lateral_Fricative, None),
    PCI(Places.Pharyngeal, Manners.Lateral_Fricative, Props.Voiced),
    PCI(Places.Glottal, Manners.Lateral_Fricative, None),
    PCI(Places.Glottal, Manners.Lateral_Fricative, Props.Voiced),
    PCI(Places.Bilabial, Manners.Lateral_Approximant, None),
    PCI(Places.Bilabial, Manners.Lateral_Approximant, Props.Voiced),
    PCI(Places.Labio_Dental, Manners.Lateral_Approximant, None),
    PCI(Places.Labio_Dental, Manners.Lateral_Approximant, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.Lateral_Approximant, None),
    PCI(Places.Pharyngeal, Manners.Lateral_Approximant, Props.Voiced),
    PCI(Places.Glottal, Manners.Lateral_Approximant, None),
    PCI(Places.Glottal, Manners.Lateral_Approximant, Props.Voiced),
    PCI(Places.Bilabial, Manners.Lateral_Tap_Flap, None),
    PCI(Places.Bilabial, Manners.Lateral_Tap_Flap, Props.Voiced),
    PCI(Places.Labio_Dental, Manners.Lateral_Tap_Flap, None),
    PCI(Places.Labio_Dental, Manners.Lateral_Tap_Flap, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.Lateral_Tap_Flap, None),
    PCI(Places.Pharyngeal, Manners.Lateral_Tap_Flap, Props.Voiced),
    PCI(Places.Glottal, Manners.Lateral_Tap_Flap, None),
    PCI(Places.Glottal, Manners.Lateral_Tap_Flap, Props.Voiced),
  ]                       									

  with Alphabet {
    // Nasal					
    let VlBilabialNasal              = PC("m" Voiceless, Places.Bilabial, Manners.Nasal, None)
    let VdBilabialNasal              = PC("m", Places.Bilabial, Manners.Nasal, Props.Voiced)
    let VdLabioDentalNasal           = PC("ɱ", Places.Labio_Dental, Manners.Nasal, Props.Voiced)
    let VdLinguoLabioNasal           = PC("n" LinguoLabial, Places.Linguo_Labial, Manners.Nasal, Props.Voiced)

    let VlAlveolarNasal              = PC("n" Voiceless, Places.Alveolar, Manners.Nasal, None)
    let VdAlveolarNasal              = PC("n", Places.Alveolar, Manners.Nasal, Props.Voiced)
    let VlRetroFlexNasal             = PC("ɳ" VoicelessDescender, Places.Retroflex, Manners.Nasal, None)
    let VdRetroFlexNasal             = PC("ɳ", Places.Retroflex, Manners.Nasal, Props.Voiced)
    let VdPalatalNasal               = PC("ɲ", Places.Palatal, Manners.Nasal, Props.Voiced)
    let VlVelarNasal                 = PC("ŋ" VoicelessDescender, Places.Velar, Manners.Nasal, None)
    let VdVelarNasal                 = PC("ŋ", Places.Velar, Manners.Nasal, Props.Voiced)
    let VdUvularNasal                = PC("ɴ", Places.Uvular, Manners.Nasal, Props.Voiced)
														
    // Stop
    let VlBilabialStop            = PC("p", Places.Bilabial, Manners.Stop, None)
    let VdBilabialStop            = PC("b", Places.Bilabial, Manners.Stop, Props.Voiced)

    let VlLabioDentalStop         = PC("p" Dental, Places.Labio_Dental, Manners.Stop, None)
    let VdLabioDentalStop         = PC("b" Dental, Places.Labio_Dental, Manners.Stop, Props.Voiced)

    let VlAlveolarStop            = PC("t", Places.Alveolar, Manners.Stop, None)
    let VdAlveolarStop            = PC("d", Places.Alveolar, Manners.Stop, Props.Voiced)

    let VlLinguoLabialStop        = PC("t" LinguoLabial, Places.Linguo_Labial, Manners.Stop, None)
    let VdLinguoLabialStop        = PC("d" LinguoLabial, Places.Linguo_Labial, Manners.Stop, Props.Voiced)
    let VlRetroFlexStop           = PC("ʈ", Places.Retroflex, Manners.Stop, None)
    let VdRetroFlexStop           = PC("ɖ", Places.Retroflex, Manners.Stop, Props.Voiced)
    let VlPalatalStop             = PC("c", Places.Palatal, Manners.Stop, None)
    let VdPalatalStop             = PC("ɟ", Places.Palatal, Manners.Stop, Props.Voiced)
    let VlVelarStop               = PC("k", Places.Velar, Manners.Stop, None)
    let VdVelarStop               = PC("ɡ", Places.Velar, Manners.Stop, Props.Voiced)
    let VlUvularStop              = PC("q", Places.Uvular, Manners.Stop, None)
    let VdUvularStop              = PC("ɢ", Places.Uvular, Manners.Stop, Props.Voiced)
    let VdEpiglottalStop          = PC("ʡ", Places.Pharyngeal, Manners.Stop, None)
    let GlottalStop               = PC("ʔ", Places.Glottal, Manners.Stop, None)
		
    // Sibilant Fricative										
    let VlAlveolarSibFricative      = PC("s", Places.Alveolar, Manners.Sibilant_Fricative, None)
    let VdAlveolarSibFricative      = PC("z", Places.Alveolar, Manners.Sibilant_Fricative, Props.Voiced)
    let VlPostAlveolarFricative     = PC("ʃ", Places.Postalveolar, Manners.Sibilant_Fricative, None)
    let VdPostAlveolarFricative     = PC("ʒ", Places.Postalveolar, Manners.Sibilant_Fricative, Props.Voiced)
    let VlRetroFlexFricative        = PC("ʂ", Places.Retroflex, Manners.Sibilant_Fricative, None)
    let VdRetroFlexFricative        = PC("ʐ", Places.Retroflex, Manners.Sibilant_Fricative, Props.Voiced)
    let VlAlveoloPalatalFricative   = PC("ɕ", Places.Palatal, Manners.Sibilant_Fricative, None)
    let VdAlveoloPalatalFricative   = PC("ʑ", Places.Palatal, Manners.Sibilant_Fricative, Props.Voiced)

    // Fricative										
    let VlBilabialFricative          = PC("ɸ", Places.Bilabial, Manners.Fricative, None)
    let VdBilabialFricative          = PC("β", Places.Bilabial, Manners.Fricative, Props.Voiced)
    let VlLabiodentalFricative       = PC("f", Places.Labio_Dental, Manners.Fricative, None)
    let VdLabiodentalFricative       = PC("v", Places.Labio_Dental, Manners.Fricative, Props.Voiced)
    let VlLinguoLabialFricative      = PC("θ" LinguoLabial, Places.Linguo_Labial, Manners.Fricative, None)
    let VdLinguoLabialFricative      = PC("ð" LinguoLabial, Places.Linguo_Labial, Manners.Fricative, Props.Voiced)
    let VlDentalFricative            = PC("θ", Places.Dental, Manners.Fricative, None)
    let VdDentalFricative            = PC("ð", Places.Dental, Manners.Fricative, Props.Voiced)
    let VlAlveolarFricative          = PC("θ" CombiningMacron, Places.Alveolar, Manners.Fricative, None)
    let VdAlveolarFricative          = PC("ð" CombiningMacron, Places.Alveolar, Manners.Fricative, Props.Voiced)
    let VlPostaveolarFricative       = PC("ɹ̠̊", Places.Postalveolar, Manners.Fricative, None)
    let VdPostalveolarFricative      = PC("ɹ̝̊", Places.Postalveolar, Manners.Fricative, Props.Voiced)
    let VdRetroflexFricative         = PC("ɻ˔", Places.Retroflex, Manners.Fricative, Props.Voiced)
    let VlPalatalFricative           = PC("ç", Places.Palatal, Manners.Fricative, None)
    let VdPalatalFricative           = PC("ʝ", Places.Palatal, Manners.Fricative, Props.Voiced)
    let VlVelarFricative             = PC("x", Places.Velar, Manners.Fricative, None)
    let VdVelarFricative             = PC("ɣ", Places.Velar, Manners.Fricative, Props.Voiced)
    let VlUvularFricative            = PC("χ", Places.Uvular, Manners.Fricative, None)
    let VdUvularFricative            = PC("ʁ", Places.Uvular, Manners.Fricative, Props.Voiced)
    let VlPharyngealFricative        = PC("ħ", Places.Pharyngeal, Manners.Fricative, None)
    let VdPharyngealFricative        = PC("ʕ", Places.Pharyngeal, Manners.Fricative, Props.Voiced)
    let VlGlottalFricative           = PC("h", Places.Glottal, Manners.Fricative, None)
    let VdGlottalFricative           = PC("ɦ", Places.Glottal, Manners.Fricative, Props.Voiced)
														
    // Approximant										
    let VlLabioDentalApproximant     = PC("ʋ" Voiceless, Places.Labio_Dental, Manners.Approximant, None)
    let VdLabioDentalApproximant     = PC("ʋ", Places.Labio_Dental, Manners.Approximant, Props.Voiced)
    let VlPostAlveolarApproximant    = PC("ɹ" Voiceless, Places.Alveolar, Manners.Approximant, None)
    let VdPostAlveolarApproximant    = PC("ɹ", Places.Alveolar, Manners.Approximant, Props.Voiced)
    let VlRetroFlexApproximant       = PC("ɻ" VoicelessDescender, Places.Retroflex, Manners.Approximant, None)
    let VdRetroFlexApproximant       = PC("ɻ", Places.Retroflex, Manners.Approximant, Props.Voiced)
    let VlPalatalApproximant         = PC("j" VoicelessDescender, Places.Palatal, Manners.Approximant, None)
    let VdPalatalApproximant         = PC("j", Places.Palatal, Manners.Approximant, Props.Voiced)
    let VlVelarApproximant           = PC("ɰ" VoicelessDescender, Places.Velar, Manners.Approximant, None)
    let VdVelarApproximant           = PC("ɰ", Places.Velar, Manners.Approximant, Props.Voiced)
    let VdGlottalApproximant         = PC("ʔ̞", Places.Glottal, Manners.Approximant, Props.Voiced)
														
    // Tap or Flap										
    let VdBilabialDentalFlap         = PC("ⱱ̟", Places.Bilabial, Manners.Tap_Flap, Props.Voiced)
    let VdLabioDentalFlap            = PC("ⱱ", Places.Labio_Dental, Manners.Tap_Flap, Props.Voiced)
    let VdLingualLabialStop          = PC("ɾ̼", Places.Linguo_Labial, Manners.Tap_Flap, Props.Voiced)
    let VlAlveolarFlap               = PC("ɾ" Voiceless, Places.Alveolar, Manners.Tap_Flap, None)
    let VdAlveolarTap                = PC("ɾ", Places.Alveolar, Manners.Tap_Flap, Props.Voiced)
    let VlRetroFlexFlap              = PC("ɽ" VoicelessDescender, Places.Retroflex, Manners.Tap_Flap, None)
    let VdRetroFlexFlap              = PC("ɽ", Places.Retroflex, Manners.Tap_Flap, Props.Voiced)
    let VdUvularFlap                 = PC("ɢ̆", Places.Uvular, Manners.Tap_Flap, Props.Voiced)
    let VdPharyngealFlap             = PC("ʡ̆", Places.Pharyngeal, Manners.Tap_Flap, Props.Voiced)
														
    // Trill											
    let VdBilabialTrill              = PC("ʙ", Places.Bilabial, Manners.Trill, Props.Voiced)
    let VdAlveolarTrill              = PC("r", Places.Alveolar, Manners.Trill, Props.Voiced)
    let VdUvularTrill                = PC("ʀ", Places.Uvular, Manners.Trill, Props.Voiced)
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = PC("ɬ", Places.Alveolar, Manners.Lateral_Fricative, None)
    let VdAlveolarLateralFricative   = PC("ɮ", Places.Alveolar, Manners.Lateral_Fricative, Props.Voiced)

    let VlAlveolarFlexFricative      = PC("ɬ", Places.Retroflex, Manners.Lateral_Fricative, Props.Extension)
    let VdAlveolarFlexFricative      = PC("ɮ", Places.Retroflex, Manners.Lateral_Fricative, Props.Voiced | Props.Extension)
    let VlAlveolarPalatalFricative   = PC("ɬ", Places.Retroflex, Manners.Lateral_Fricative, Props.Extension)
														
    // LateralApproximant								
    let VdAlveolarLateralApproximant = PC("l", Places.Alveolar, Manners.Lateral_Approximant, Props.Voiced)
    let VdRetroFlexLateral           = PC("ɭ", Places.Retroflex, Manners.Lateral_Approximant, Props.Voiced)
    let VdPalatalLateral             = PC("ʎ", Places.Palatal, Manners.Lateral_Approximant, Props.Voiced)
    let VdVelarLateral               = PC("ʟ", Places.Velar, Manners.Lateral_Approximant, Props.Voiced)

    // Lateral tap/flap
    let VdAlveolarLateralFlap        = PC("ɺ", Places.Alveolar, Manners.Lateral_Tap_Flap, Props.Voiced)
    let VdRetroflexLateralFlap       = PC("ɭ̆", Places.Retroflex, Manners.Lateral_Tap_Flap, Props.Voiced | Props.Extension)
    let VdPalatalLateralFlap         = PC("ʎ" Extrashort, Places.Palatal, Manners.Lateral_Tap_Flap, Props.Voiced | Props.Extension)
    let VdVelarLateralTap            = PC("L̆", Places.Velar, Manners.Lateral_Tap_Flap, Props.Voiced | Props.Extension)

    // Clicks
    let BilabialClick                = Set("ʘ", Categories.Consonant, None, None, Props.Click)
    let DentalClick                  = Set("ǀ", Categories.Consonant, None, None, Props.Click)
    let RetroFlexClick               = Set("ǃ", Categories.Consonant, None, None, Props.Click)
    let AlveolarClick                = Set("ǂ", Categories.Consonant, None, None, Props.Click)
    let AlveolarLateralClick         = Set("ǁ", Categories.Consonant, None, None, Props.Click)

    // Voiced imStops
    let VdBilabialimStop          = Set("ɓ", Categories.Consonant, None, None, Props.ImStop)
    let VdAlveolarimStop          = Set("ɗ", Categories.Consonant, None, None, Props.ImStop)
    let VdPalatalImStop           = Set("ʄ", Categories.Consonant, None, None, Props.ImStop)
    let VdVelarImStop             = Set("ɠ", Categories.Consonant, None, None, Props.ImStop)
    let VdUvularImStop            = Set("ʛ", Categories.Consonant, None, None, Props.ImStop)

    let VdEpiglottalFricative        = Set("ʢ", None, None, None, None)
    let VlMultiplePlaceFricative     = Set("ɧ", None, None, None, None)
    let VlLabialVelarFricative       = Set("ʍ", None, None, None, None)

    let VdPostAlveolarAffricate      = Set("ʤ", None, None, None, None)
    let VlPostAlveolarAffricate      = Set("ʧ", None, None, None, None)

    let OpenBackUnrounded            = Set("ɑ", None, None, None, None)
    let RaisedOpenFrontUnrounded     = Set("æ", None, None, None, None)
    let OpenMidFrontUnrounded        = Set("ɛ", None, None, None, None)
    let CloseCentralUnrounded        = Set("ɨ", None, None, None, None)
    let LaxCloseFrontUnrounded       = Set("ɪ", None, None, None, None)
    let CloseBackUnrounded           = Set("ɯ", None, None, None, None)
    let OpenMidBackUnrounded         = Set("ʌ", None, None, None, None)
    let CloseMidBackUnrounded        = Set("ɤ", None, None, None, None)

    let OpenMidSchwa                 = Set("ɐ", None, None, None, None)
    let OpenBackRounded              = Set("ɒ", None, None, None, None)
    let OpenMidBackRounded           = Set("ɔ", None, None, None, None)
    let Schwa                        = Set("ə", None, None, None, None)
    let CloseMidSchwa                = Set("ɘ", None, None, None, None)
    let RhotacizedSchwa              = Set("ɚ", None, None, None, None)
    let OpenMidCentral               = Set("ɜ", None, None, None, None)
    let RhotacizedOpenMidCentral     = Set("ɝ", None, None, None, None)
    let OpenMidCentralRounded        = Set("ɞ", None, None, None, None)
    let LabialPalatalApproximant     = Set("ɥ", None, None, None, None)
    let VlEpiglottalFricative        = Set("ʜ", None, None, None, None)
    let VelarizedVdAlveolarLateral   = Set("ɫ", None, None, None, None)
    let FrontCloseMidRounded         = Set("ø", None, None, None, None)
    let RoundedSchwa                 = Set("ɵ", None, None, None, None)
    let FrontOpenMidRounded          = Set("œ", None, None, None, None)
    let FrontOpenRounded             = Set("ɶ", None, None, None, None)
    let CloseCentralRounded          = Set("ʉ", None, None, None, None)
    let LaxCloseBackRounded          = Set("ʊ", None, None, None, None)
    let LaxCloseFrontRounded         = Set("ʏ", None, None, None, None)
  }

  let Downstep                     = '↓'
  let Upstep                       = '↑'
  let Becomes                      = '→'
  let Globalrise                   = '↗'
  let Globalfall                   = '↘'
  let ReadyMadeCombination         = '\u026B'
  let Breve                        = '\u02D8'
  let PrimaryStress                = '\u02C8'
  let SecondaryStress              = '\u02CC'
  let LengthMark                   = '\u02D0'
  let Halflength                   = '\u02D1'
  let Ejective                     = '\u02BC'
  let Rhotacized                   = '\u02B4'
  let Aspirated                    = '\u02B0'
  let BreathyVoiceAspirated        = '\u02B1'
  let Palatalized                  = '\u02B2'
  let Labialized                   = '\u02B7'
  let Velarized                    = '\u02E0'
  let Pharyngealized               = '\u02E4'
  let RhoticHook                   = '\u02DE'
  let LowTone                      = '\u0300'
  let HighTone                     = '\u0301'
  let MidTone                      = '\u0304'
  let Extrashort                   = '\u0306'
  let ExtraHighTone                = '\u030B'
  let ExtraLowTone                 = '\u030F'
  let VoicelessDescender           = '\u030A'
  let BreathyVoiced                = '\u0324'
  let Voiceless                    = '\u0325'
  let Dental                       = '\u032A'
  let Voiced                       = '\u032C'
  let CreakyVoiced                 = '\u0330'
  let CombiningMacron              = '\u0331'
  let Apical                       = '\u033A'
  let LinguoLabial                 = '\u033C'
  let Laminal                      = '\u033B'
  let NotAudiblyReleased           = '\u031A'
  let MoreRounded                  = '\u0339'
  let Nasalized                    = '\u0303'
  let LessRounded                  = '\u031C'
  let Advanced                     = '\u031F'
  let Centralized                  = '\u0308'
  let VelarizedOrPharyngealized    = '\u0334'
  let Retracted                    = '\u0320'
  let MidCentralized               = '\u033D'
  let Raised                       = '\u031D'
  let Syllabic                     = '\u0329'
  let Lowered                      = '\u031E'
  let NonSyllabic                  = '\u032F'
  let AdvancedTongueRoot           = '\u0318'
  let RetractedTongueRoot          = '\u0319'
  let TieBarBelow                  = '\u035C'
  let TieBarAbove                  = '\u0361'

  let AllForms = Alphabet + Impossible

  let TitleBar(name, columns) = Row {
    Cell {
      Padding: 2 pts,
      ParAlignment: ParAlignments.Center,
      Background: 40%,
      TextHeight: 16 pts,
      TextColor: Colors.White,
      ColumnSpan: columns,
      name
    }
  }

  let CellSize = Type.Size(40 pts, 20 pts)

  let ShowSound(c) = Canvas {
    HAlign: HAligns.Center,
    X: (c.Prop.HasFlag(Props.Voiced) ? CellSize.Width*0.5 : 0),
    Width: CellSize.Width * 0.5,
    Height: CellSize.Height,
    if c.Text then
//      Y: 2 pts,
      if c.Prop.HasFlag(Props.Extension) then
        Style.Extension
      end,
      TextFamily: Style.IPAFamily,
      TextHeight: CellSize.Height - 4 pts,
      c.Text
    else
      Style.ImpossibleBackground
    end
  }

  let PulmonicBlock(form, sound, matches) = Cell {
    if matches.Length > 0 then
      if matches.Length == 2 and matches[0].Text == null and matches[1].Text == null then
        Style.ImpossibleBackground
      else
        TextHeight: 1 pts,
        Span {
          Canvas {
            Size: CellSize,
            ShowSound(each matches)
          }
        }
      end
    end
  }

  let PulmonicCell(form, sound) = PulmonicBlock(form, sound, AllForms.FindSlice(EqualSound PC(null, form, sound, 0)))

  let PulmonicRow(sound) = Row {
    EdgeB: 0.5 pts,
    Cell {
      VAlign: VAligns.Center,
      EdgeR: 0.5 pts,
      Style.TitleBackground,
      PaddingLR: 2 pts,
      TextHeight: 7 pts,
      CleanName(EachSymbol.SymbolName)
    },
    PulmonicCell(each Places, sound)
  }

  let HeaderCell(d) = Cell {
    HAlign: HAligns.Center,
    VAlign: VAligns.Center,
    Style.SansSerif,
    Style.TitleBackground,
    EdgeB: 1 pts,
    PaddingTB: 2 pts,
    d
  }

  let SymbolHeader(v) = HeaderCell(CleanName(EachSymbol.SymbolName))

  let PulmonicTable = Block {
    Table {
      Style.TableEdge,
      Columns: [(45 pts) {EdgeR: 0.5 pts}] + [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * PulmonicColumns,

      TitleBar("Pulmonic Consonants", PulmonicColumns+1),
      Row {
        TextHeight: 10 pts,
        HeaderCell(Span {Bold, "Place", Space, Alphabet.Becomes}),
        HeaderCell("Labial") {ColumnSpan: 3},
        HeaderCell("Coronal") {ColumnSpan: 4},
        HeaderCell("Dorsal") {ColumnSpan: 3},
        HeaderCell("Laryngeal") {ColumnSpan: 2},
      },
      Row {
        TextHeight: 7 pts,
        HeaderCell(Span {Bold, "Manner", Space, Alphabet.Downstep}),
        SymbolHeader(each Places)
      },
      PulmonicRow(each Manners),
    },
    Paragraph {
      SpaceAfter: 8 pts,
      Lang.PulmonicSymbols(ToText(Alphabet.VlMultiplePlaceFricative)),
      Space,
      Span {Style.Extension Lang.Extensions}
    }
  }

  let ToText(c) = Span {
    (each c).Text
  }

  let ConCell(c, name, ejective) = Cell {
    EdgeR: 0.5 pts,
    Padding: 2 pts,
    Group {
      VAlign: VAligns.Center,
      Span {
        TextFamily: Style.IPAFamily,
        TextHeight: 18 pts,
        ToText(c),
        if ejective then
          Alphabet.Ejective.Text
        end
      },
      Space,
      name
    }
  }

  let NonPulmonicTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [2.5 inches, 1.5 inches],

      TitleBar("Non-Pulmonic Consonants", 3),
      Row {
        TextHeight: 12 pts,
        HeaderCell(each ["Clicks", "Voiced imStops", "Ejectives"])
      },
      Row {
        ConCell(Alphabet.BilabialClick, "Bilabial fricated", false),
        ConCell(Alphabet.VdBilabialimStop, "Bilabial", false),
        ConCell(Alphabet.VlBilabialStop, "Bilabial", true)
      },
      Row {
        ConCell(Alphabet.DentalClick, "Dental", false),
        ConCell(Alphabet.VdAlveolarimStop, "Dental/alveolar", false),
        ConCell(Alphabet.VlAlveolarStop, "Dental/alveolar", true)
      },
      Row {
        ConCell(Alphabet.RetroFlexClick, "(Post)alveoalar", false),
        ConCell(Alphabet.VdPalatalImStop, "Palatal", false),
        ConCell(Alphabet.VlVelarStop, "Velar", true)
      },
      Row {
        ConCell(Alphabet.AlveolarClick, "Palatoalveolar", false),
        ConCell(Alphabet.VdVelarImStop, "Velar", false),
        ConCell(Alphabet.VlAlveolarFricative, "Alveolar fricative", true)
      },
      Row {
        ConCell(Alphabet.AlveolarLateralClick, "Alveolar lateral", false),
        ConCell(Alphabet.VdUvularImStop, "Uvular", false),
        ConCell([Alphabet.VlAlveolarStop, Alphabet.TieBarBelow, Alphabet.VlAlveolarLateralFricative], "Lateral affricate", true)
      },
    },
    Paragraph {}
  }

  let VarCell(text) = Cell {
    VAlign: VAligns.Center,
    CleanName(text.SymbolName)
  }

  let GetPropNames(props, prop) = {
    if props.HasFlag(prop) then
      CleanName(EachSymbol.SymbolName)
    end
  }

  let AlphabetRow(c) = Row {
    Style.RowBar(EachIndex),
    Cell {
      TextHeight: 14 pts,
      HAlign: HAligns.Center,
      VAlign: VAligns.Center,
      ToText(c)
    },
    VarCell(Categories.GetReference(c.Category)),
    VarCell(Places.GetReference(c.Place)),
    VarCell(Manners.GetReference(c.Manner)),
    Cell {
      VAlign: VAligns.Center,
      Span {
        Separator: ", ",
        GetPropNames(c.Prop, each Props)
      }
    }
  }

  let AlphabetTable = Table {
    Style.TableEdge,
    PaddingL: 2 pts,
    PaddingB: 2 pts,
    Columns: [(30 pts) Style.ColumnEdge, (65 pts) Style.ColumnEdge, (110 pts)Style.ColumnEdge],

    TitleBar("Complete IPA Listing", 5),
    Row {
      TextHeight: 12 pts,
      HeaderCell("Text"),
      HeaderCell("Categories") {HAlign: HAligns.Left},
      HeaderCell("Places") {HAlign: HAligns.Left},
      HeaderCell("Manners") {HAlign: HAligns.Left},
      HeaderCell("Properties") {HAlign: HAligns.Left}
    },
    AlphabetRow(each Alphabet)
  }

  let ShowAlphabet = Block {
    PulmonicTable,
    NonPulmonicTable,
    AlphabetTable
  }
}
