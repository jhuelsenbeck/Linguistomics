using Format, Units, Type, IPA.FeatureSet;
//======================================================================

with IPA {
  enum Opens {
    Close     {Name: Lang.Close},
    NearClose {Name: Lang.NearClose},
    CloseMid  {Name: Lang.CloseMid},
    Mid       {Name: Lang.Mid},
    OpenMid   {Name: Lang.OpenMid},
    NearOpen  {Name: Lang.NearOpen},
    Open      {Name: Lang.Open},
  }

  enum Backnesses {
    Front     {Name: Lang.Front},
    NearFront {Name: Lang.NearFront},
    Central   {Name: Lang.Central},
    NearBack  {Name: Lang.NearBack},
    Back      {Name: Lang.Back},
  }

  enum Places {
    Bilabial       {Name: Lang.Bilabial},
    Labial         {Name: Lang.Labial},
    LabialVelar    {Name: Lang.LabialVelar},
    LabialPalatal  {Name: Lang.LabialPalatal},
    LabioDental    {Name: Lang.LabioDental},
    LinguoLabial   {Name: Lang.LinguoLabial},
    Dental         {Name: Lang.Dental},
    Alveolar       {Name: Lang.Alveolar},
    AlveoloPalatal {Name: Lang.AlveoloPalatal},
    PostAlveolar   {Name: Lang.PostAlveolar},
    Retroflex      {Name: Lang.Retroflex},
    Palatal        {Name: Lang.Palatal},
    PalatoAlveolar {Name: Lang.PalatoAlveolar},
    Velar          {Name: Lang.Velar},
    Uvular         {Name: Lang.Uvular},
    Pharyngeal     {Name: Lang.Pharyngeal},
    Glottal        {Name: Lang.Glottal},
  }

  flags FeatureSet {
    NoFeature   {Name: Lang.NoFeatures},
    Rounded     {Name: Lang.Rounded},
    Vocoid      {Name: Lang.Vocoid},
    Semivowel   {Name: Lang.SemiVowel},
    LongVowel   {Name: Lang.LongVowel},
    Voiced      {Name: Lang.Voiced},
    Velarized   {Name: Lang.Velarized},
    Ejective    {Name: Lang.Ejective},
    Pulmonic    {Name: Lang.Pulmonic},
    Nasal       {Name: Lang.Nasal},
    Tenuis      {Name: Lang.Tenuis},
    Lateral     {Name: Lang.Lateral},
    Sibilant    {Name: Lang.Sibilant},
    Fricative   {Name: Lang.Fricative},
    Approximant {Name: Lang.Approximant},
    Implosive   {Name: Lang.Implosive},
    Central     {Name: Lang.Central},
    TapFlap     {Name: Lang.TapFlap},
    Trill       {Name: Lang.Trill},
    Stop        {Name: Lang.Stop},
    Click       {Name: Lang.Click},
    Affricate   {Name: Lang.Affricate},
    Vowel       {Name: Lang.Vowel},
    Rhotic      {Name: Lang.Rhotic},
    Occlusive   {Name: Lang.Occlusive},
    Strident    {Name: Lang.Strident},
    Obstruent   {Name: Lang.Obstruent},
    Continuant  {Name: Lang.Continuant},
    Vibrant     {Name: Lang.Vibrant},
    Liquid      {Name: Lang.Liquid},
  }

  Encode(ipa, sampa) = {
    Popup: SegmentPopup,
    Ipa: ipa,
    Sampa: sampa,
    Impossible: false,
    Punctuation: false,
    Diacritic: false,
  };

  Diac(description, ipa, sampa) = Encode(ipa, sampa) {
    Diacritic: true,
    Description: description,
  };

  Con(features, place, ipa, sampa) = Encode(ipa, sampa) {
    Features: features,
    Place: place,
  };

  Vow(features, open, backness, ipa, sampa) = Encode(ipa, sampa) {
    Features: features | Vowel,
    Open: open,
    Backness: backness,
  };

  Dia(ipa, sampa) = Encode(ipa, sampa) {
    Diacritic: true
  };

  Punct(ipa) = Encode(ipa, ipa) {
    Punctuation: true,
  };

  Imp(features, place) = {
    Features: features,
    Place: place,
    Diacritic: false,
    Punctuation: false,
    Impossible: true,
  };

  NoSegment     = Encode("?", "!?") {Impossible: true};
  GapSegment    = Punct("-");
  LeftSegment   = Punct("(");
  RightSegment  = Punct(")");
  SpaceSegment  = Punct(" ");

  with Segments {
    //==================================
    // Extra segments found in word list
    //==================================


    rn        = Con(Nasal Voiced Pulmonic Fricative, Places.Uvular, "r\u0303", "r~");

// French Cold "Froid"  Same as SAMPA "R"?
//    r_nasal = Con(Nasal Voiced Pulmonic Fricative, Places.Uvular, "ʁ", "r~");

    //==================================
    // Pulmonic Consonants
    //==================================

    // Nasal					
    VlBilabialNasal              = Con(Pulmonic Nasal, Places.Bilabial, "m̥", "m_0");
    m                            = Con(Voiced Pulmonic Nasal Occlusive, Places.Bilabial, "m", "m");
    VdLabioDentalNasal           = Con(Voiced Pulmonic Nasal Occlusive, Places.LabioDental, "ɱ", "F");
    VdLinguoLabioNasal           = Con(Voiced Pulmonic Nasal, Places.LinguoLabial, "n̼", "m_d");
    VlAlveolarNasal              = Con(Pulmonic Nasal, Places.Alveolar, "n̥", "n_0");
    n                            = Con(Voiced Pulmonic Nasal Occlusive, Places.Alveolar, "n", "n");
    VlRetroFlexNasal             = Con(Pulmonic Nasal, Places.Retroflex, "ɳ̊", "n`_0");
    VdRetroFlexNasal             = Con(Voiced Pulmonic Nasal Occlusive, Places.Retroflex, "ɳ", "n`");
    VlPalatalNasal               = Con(Pulmonic Nasal, Places.Palatal, "ɲ̊", "J_0");
    VdPalatalNasal               = Con(Voiced Pulmonic Nasal Occlusive, Places.Palatal, "ɲ", "J");
    VlVelarNasal                 = Con(Pulmonic Nasal, Places.Velar, "ŋ̊", "N_0");
    nya                          = Con(Voiced Pulmonic Nasal Occlusive, Places.Velar, "ŋ", "N");
    VdUvularNasal                = Con(Voiced Pulmonic Nasal Occlusive, Places.Uvular, "ɴ", "N\\");
														
    // Stop
    p                            = Con(Pulmonic Stop Occlusive, Places.Bilabial, "p", "p");
    b                            = Con(Voiced Pulmonic Stop Occlusive, Places.Bilabial, "b", "b");
    VlLabioDentalStop            = Con(Pulmonic Stop, Places.LabioDental, "p̪", "p_d");
    VdLabioDentalStop            = Con(Voiced Pulmonic Stop, Places.LabioDental, "b̪", "b_d");
    VlLinguoLabialStop           = Con(Pulmonic Stop, Places.LinguoLabial, "t̼", "");
    VdLinguoLabialStop           = Con(Voiced Pulmonic Stop, Places.LinguoLabial, "d̼", "");
    t                            = Con(Pulmonic Stop Occlusive, Places.Alveolar, "t", "t");
    d                            = Con(Voiced Pulmonic Stop Occlusive, Places.Alveolar, "d", "d");
    VlRetroflexStop              = Con(Pulmonic Stop Occlusive, Places.Retroflex, "ʈ", "t`");
    VdRetroflexStop              = Con(Voiced Pulmonic Stop Occlusive, Places.Retroflex, "ɖ", "d`");
    tya                          = Con(Pulmonic Stop Occlusive, Places.Palatal, "c", "c");
    VdPalatalStop                = Con(Voiced Pulmonic Stop Occlusive, Places.Palatal, "ɟ", "J\\");
    k                            = Con(Pulmonic Stop Occlusive, Places.Velar, "k", "k");
    kw                           = Con(Pulmonic Stop Occlusive, Places.Labial, "kʷ", "k_W");

    g                            = Con(Voiced Pulmonic Stop Occlusive, Places.Velar, "ɡ", "g");
    gw                           = Con(Voiced Pulmonic Stop Occlusive, Places.Labial, "ɡʷ", "g_W");

    VlUvularStop                 = Con(Pulmonic Stop Occlusive, Places.Uvular, "q", "q");
    VdUvularStop                 = Con(Voiced Pulmonic Stop Occlusive, Places.Uvular, "ɢ", "G\\");
    VdEpiglottalStop             = Con(Pulmonic Stop, Places.Pharyngeal, "ʡ", ">\\");
    GlottalStop                  = Con(Pulmonic Stop, Places.Glottal, "ʔ", "?");
		
    // Sibilant Fricative										
    s                            = Con(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Alveolar, "s", "s");
    zz                           = Con(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Alveolar, "z", "z");
    shh                          = Con(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.PostAlveolar, "ʃ", "S");
    gzah                         = Con(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.PostAlveolar, "ʒ", "Z");
    VlRetroflexSibFricative      = Con(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Retroflex, "ʂ", "s`");
    VdRetroflexSibFricative      = Con(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Retroflex, "ʐ", "z`");
    VlPalatalSibFricative        = Con(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Palatal, "ɕ", "s\\");
    VdPalatalSibFricative        = Con(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Palatal, "ʑ", "z\\");

    // Fricative										
    VlBilabialFricative          = Con(Pulmonic Fricative Obstruent Continuant, Places.Bilabial, "ɸ", "p\\");
    VdBilabialFricative          = Con(Voiced Pulmonic Fricative Obstruent Continuant, Places.Bilabial, "β", "B");
    f                            = Con(Pulmonic Fricative Obstruent Continuant Strident, Places.LabioDental, "f", "f");
    v                            = Con(Voiced Pulmonic Fricative Obstruent Continuant Strident, Places.LabioDental, "v", "v");
    VlLinguoLabialFricative      = Con(Pulmonic Fricative, Places.LinguoLabial, "θ̼", "");
    VdLinguoLabialFricative      = Con(Voiced Pulmonic Fricative, Places.LinguoLabial, "ð̼", "");
    th                           = Con(Pulmonic Fricative Obstruent Continuant, Places.Dental, "θ", "T");
    VdDentalFricative            = Con(Voiced Pulmonic Fricative Obstruent Continuant, Places.Dental, "ð", "D");
    VlAlveolarFricative          = Con(Pulmonic Fricative, Places.Alveolar, "θ̠", "");
    VdAlveolarFricative          = Con(Voiced Pulmonic Fricative, Places.Alveolar, "ð̠", "");
    VlPostaveolarFricative       = Con(Pulmonic Fricative, Places.PostAlveolar, "ɹ̠̊", "");
    VdPostalveolarFricative      = Con(Voiced Pulmonic Fricative, Places.PostAlveolar, "ɹ̝̊", "");
    VdRetroflexFricative         = Con(Voiced Pulmonic Fricative, Places.Retroflex, "ɻ˔","");
    sh                           = Con(Pulmonic Fricative Obstruent Continuant, Places.Palatal, "ç", "C");
    VdPalatalFricative           = Con(Voiced Pulmonic Fricative Obstruent Continuant, Places.Palatal, "ʝ", "j\\");
    xha                          = Con(Pulmonic Fricative Obstruent Continuant, Places.Velar, "x", "x");
    VdVelarFricative             = Con(Voiced Pulmonic Fricative Obstruent Continuant, Places.Velar, "ɣ", "G");
    VlUvularFricative            = Con(Pulmonic Fricative Obstruent Continuant Strident, Places.Uvular, "χ", "X");
    VdUvularFricative            = Con(Voiced Pulmonic Fricative Obstruent Continuant Strident Rhotic Liquid, Places.Uvular, "ʁ", "R");
    VlPharyngealFricative        = Con(Pulmonic Fricative, Places.Pharyngeal, "ħ", "X\\");
    VdPharyngealFricative        = Con(Voiced Pulmonic Fricative, Places.Pharyngeal, "ʕ", "?\\");
    h                            = Con(Pulmonic Fricative, Places.Glottal, "h", "h");
    VdGlottalFricative           = Con(Voiced Pulmonic Fricative, Places.Glottal, "ɦ", "h\\");
														
    // Approximant										
    VlLabioDentalApproximant     = Con(Pulmonic Approximant, Places.LabioDental, "ʋ̥", "");
    VdLabioDentalApproximant     = Con(Voiced Pulmonic Approximant Vocoid Approximant, Places.LabioDental, "ʋ", "v\\");
    VlPostalveolarApproximant    = Con(Pulmonic Approximant, Places.Alveolar, "ɹ̥", "");
    VdPostalveolarApproximant    = Con(Voiced Pulmonic Approximant Vocoid Rhotic Liquid, Places.Alveolar, "ɹ", "r\\");
    VlRetroflexApproximant       = Con(Pulmonic Approximant, Places.Retroflex, "ɻ̊", "");
    VdRetroflexApproximant       = Con(Voiced Pulmonic Approximant Vocoid Rhotic Liquid, Places.Retroflex, "ɻ", "r\\`");
    VlPalatalApproximant         = Con(Pulmonic Approximant, Places.Palatal, "j̊", "");
    jg                           = Con(Voiced Pulmonic Approximant Vocoid Semivowel Continuant, Places.Palatal, "j", "j");
    VlVelarApproximant           = Con(Pulmonic Approximant, Places.Velar, "ɰ̊", "");
    VdVelarApproximant           = Con(Voiced Pulmonic Approximant Vocoid Semivowel Continuant, Places.Velar, "ɰ", "M\\");
    VdGlottalApproximant         = Con(Voiced Pulmonic Approximant, Places.Glottal, "ʔ̞", "");
														
    // Tap or Flap										
    VdBilabialDentalFlap         = Con(Voiced Pulmonic TapFlap, Places.Bilabial, "ⱱ̟", "");
    VdLabioDentalFlap            = Con(Voiced Pulmonic TapFlap Vibrant, Places.LabioDental, "ⱱ", "");
    VdLingualLabialStop          = Con(Voiced Pulmonic TapFlap, Places.LinguoLabial, "ɾ̼", "");
    VlAlveolarFlap               = Con(Pulmonic TapFlap, Places.Alveolar, "ɾ̥", "");
    VdAlveolarTap                = Con(Voiced Pulmonic TapFlap Rhotic Liquid Vibrant, Places.Alveolar, "ɾ", "4");
    VlRetroflexFlap              = Con(Pulmonic TapFlap, Places.Retroflex, "ɽ̊", "");
    VdRetroflexFlap              = Con(Voiced Pulmonic TapFlap Rhotic Liquid Vibrant, Places.Retroflex, "ɽ", "r`");
    VdUvularFlap                 = Con(Voiced Pulmonic TapFlap, Places.Uvular, "ɢ̆", "");
    VdPharyngealFlap             = Con(Voiced Pulmonic TapFlap, Places.Pharyngeal, "ʡ̆", "");
														
    // Trill											
    VlBilabialTrill              = Con(Pulmonic Trill, Places.Bilabial, "ʙ̥", "");
    VdBilabialTrill              = Con(Voiced Pulmonic Trill Vibrant, Places.Bilabial, "ʙ", "B\\");
    VlAlveolarTrill              = Con(Pulmonic Trill, Places.Alveolar, "r̥", "");
    r                            = Con(Voiced Pulmonic Trill Rhotic Liquid Vibrant, Places.Alveolar, "r", "r");
    VlRetroflexTrill             = Con(Pulmonic Trill, Places.Retroflex, "ɽ̊r̥", "");
    VdRetroflexTrill             = Con(Voiced Pulmonic Trill, Places.Retroflex, "ɽr", "");
    VlUvularTrill                = Con(Pulmonic Trill Rhotic Liquid Vibrant, Places.Uvular, "ʀ", "R\\");
    VlPharyngealTrill            = Con(Pulmonic Trill, Places.Pharyngeal, "ʜ", "H\\");
    VdPharyngealTrill            = Con(Voiced Pulmonic Trill, Places.Pharyngeal, "ʢ", "<\\");
														
    // Lateral Fricative								
    VlAlveolarLateralFricative   = Con(Pulmonic Lateral Fricative Obstruent Continuant Strident Lateral Liquid, Places.Alveolar, "ɬ", "K");
    VdAlveolarLateralFricative   = Con(Voiced Pulmonic Lateral Fricative Obstruent Continuant Strident Lateral Liquid, Places.Alveolar, "ɮ", "K\\");
    VlRetroflexLateralFricative  = Con(Pulmonic Lateral Fricative, Places.Retroflex, "ɭ̊˔", "");
    VdRetroflexLateralFricative  = Con(Voiced Pulmonic Lateral Fricative, Places.Retroflex, "ɭ˔", "");
    VlAlveolarPalatalFricative   = Con(Pulmonic Lateral Fricative, Places.Palatal, "ʎ̝̊", "");
    VdAlveolarPalatalFricative   = Con(Voiced Pulmonic Lateral Fricative, Places.Palatal, "ʎ̝", "");
    VlVelarPalatalFricative      = Con(Pulmonic Lateral Fricative, Places.Velar, "ʟ̝̊", "");
    VdVelarPalatalFricative      = Con(Voiced Pulmonic Lateral Fricative, Places.Velar, "ʟ̝", "");
														
    // LateralApproximant								
    VlAlveolarLateralApproximant = Con(Pulmonic Lateral Approximant, Places.Alveolar, "l̥", "");
    l                            = Con(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Alveolar, "l", "l");
    ssha                         = Con(Voiced Velarized Pulmonic Lateral Approximant, Places.Alveolar, "ɫ", "5");
    VlRetroflexLateral           = Con(Pulmonic Lateral Approximant, Places.Retroflex, "ɭ̊", "");
    VdRetroflexLateral           = Con(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Retroflex, "ɭ", "n`");
    VlPalatalLateral             = Con(Pulmonic Lateral Approximant, Places.Palatal, "ʎ̥", "");
    yuh                          = Con(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Palatal, "ʎ", "L");
    VlVelarLateral               = Con(Pulmonic Lateral Approximant, Places.Velar, "ʟ̥", "");
    VdVelarLateral               = Con(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Velar, "ʟ", "L\\");
    VdUvularLateral              = Con(Voiced Pulmonic Lateral Approximant, Places.Uvular, "ʟ̠", "");

    // Lateral tap/flap
    VdAlveolarLateralFlap        = Con(Voiced Pulmonic Lateral TapFlap Vibrant Rhotic Liquid, Places.Alveolar, "ɺ", "l\\");
    VdRetroflexLateralFlap       = Con(Voiced Pulmonic Lateral TapFlap, Places.Retroflex, "ɭ̆", "");
    VdPalatalLateralFlap         = Con(Voiced Pulmonic Lateral TapFlap, Places.Palatal, "ʎ̆", "");
    VdVelarLateralTap            = Con(Voiced Pulmonic Lateral TapFlap, Places.Velar, "L̆", "");


    //==================================
    // Non-Pulmonic Consonants
    //==================================

    // Clicks
    VlBilabialTenuisClick        = Con(Ejective Tenuis Click Affricate, Places.Bilabial, "ʘ", "O\\");
    VdBilabialTenuisClick        = Con(Voiced Ejective Tenuis Click Affricate, Places.Bilabial, "ʘ̬", "");
    VlDentalTenuisClick          = Con(Ejective Tenuis Click Affricate, Places.Dental, "ǀ", "|");
    VdDentalTenuisClick          = Con(Voiced Ejective Tenuis Click Affricate, Places.Dental, "ǀ̬", "");
    VlAlveolarTenuisClick        = Con(Ejective Tenuis Click Affricate, Places.Alveolar, "ǃ", "!\\");
    VdAlveolarTenuisClick        = Con(Voiced Ejective Tenuis Click Affricate, Places.Alveolar, "ǃ̬", "");
    VlPalatalTenuisClick         = Con(Ejective Tenuis Click Affricate, Places.Palatal, "ǂ", "=\\");
    VdPalatalTenuisClick         = Con(Voiced Ejective Tenuis Click Affricate, Places.Palatal, "ǂ̬", "");

    VlBilabialNasalClick         = Con(Ejective Nasal Click Affricate, Places.Bilabial, "ʘ̃", "");
    VlDentalNasalClick           = Con(Ejective Nasal Click Affricate, Places.Dental, "ǀ̃", "");
    VlAlveolarNasalClick         = Con(Ejective Nasal Click Affricate, Places.Alveolar, "ǃ̃", "");
    VlPalatalNasalClick          = Con(Ejective Nasal Click Affricate, Places.Palatal, "ǂ̃", "");

    VlAlveolarTenuisLateralClick = Con(Ejective Tenuis Lateral Click Affricate, Places.Alveolar, "ǁ", " | \\ | \\");
    VdAlveolarTenuisLateralClick = Con(Voiced Ejective Tenuis Lateral Click Affricate, Places.Alveolar, "ǁ̬", "");

    VlBilabialImplosiveClick     = Con(Ejective Implosive Click Affricate, Places.Bilabial, "ɓ̥", "");
    VdBilabialImplosiveClick     = Con(Voiced Ejective Implosive Click Affricate, Places.Bilabial, "ɓ", "b_<");
    VlAlveolarImplosiveClick     = Con(Ejective Implosive Click Affricate, Places.Alveolar, "ɗ̥", "");
    VdAlveolarImplosiveClick     = Con(Voiced Ejective Implosive Click Affricate, Places.Alveolar, "ɗ", "d_<");
    VlRetroflexImplosiveClick    = Con(Ejective Implosive Click Affricate, Places.Retroflex, "ᶑ̊", "");
    VdRetroflexImplosiveClick    = Con(Voiced Ejective Implosive Click Affricate, Places.Retroflex, "ᶑ", "");
    VlPalatalImplosiveClick      = Con(Ejective Implosive Click Affricate, Places.Palatal, "ʄ̊", "");
    VdPalatalImplosiveClick      = Con(Voiced Ejective Implosive Click Affricate, Places.Palatal, "ʄ", "J\\_<");
    VlVelarImplosiveClick        = Con(Ejective Implosive Click Affricate, Places.Velar, "ɠ̊", "");
    VdVelarImplosiveClick        = Con(Voiced Ejective Implosive Click Affricate, Places.Velar, "ɠ", "g_<");
    VlUvularImplosiveClick       = Con(Ejective Implosive Click Affricate, Places.Uvular, "ʛ̥", "");
    VdUvularImplosiveClick       = Con(Voiced Ejective Implosive Click Affricate, Places.Uvular, "ʛ", "G\\_<");

    //==================================
    // Pulmonic Affricates
    //==================================

    // Sibilants
    VlAlveolarAffricate          = Con(Pulmonic Sibilant Affricate Occlusive Strident, Places.Alveolar, "ts", "");
    VdAlveolarAffricate          = Con(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.Alveolar, "dz", "");
    VlPostalveolarAffricate      = Con(Pulmonic Sibilant Affricate Occlusive Strident, Places.PalatoAlveolar, "t̠ʃ", "");
    VdPostalveolarAffricate      = Con(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.PalatoAlveolar, "d̠ʒ", "");
    VlRetroflexAffricate         = Con(Pulmonic Sibilant Affricate Occlusive Strident, Places.Retroflex, "ʈʂ", "");
    VdRetroflexAffricate         = Con(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.Retroflex, "ɖʐ", "");
    VlAlveoloPalatalAffricate    = Con(Pulmonic Sibilant Affricate Occlusive Strident, Places.AlveoloPalatal, "tɕ", "");
    VdAlveoloPalatalAffricate    = Con(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.AlveoloPalatal, "dʑ", "");

    // Non-Sibilants
    VlBilabialNSAffricate        = Con(Pulmonic Affricate Occlusive, Places.Bilabial, "pɸ", "");
    VdBilabialNSAffricate        = Con(Voiced Pulmonic Affricate Occlusive, Places.Bilabial, "bβ", "");
    VlLabioDentalNSAffricate     = Con(Pulmonic Affricate Occlusive Strident, Places.LabioDental, "p̪f", "");
    VdLabioDentalNSAffricate     = Con(Voiced Pulmonic Affricate Occlusive Strident, Places.LabioDental, "b̪v", "");
    VlDentalNSAffricate          = Con(Pulmonic Affricate Occlusive, Places.Dental, "t̪θ", "");
    VdDentalNSAffricate          = Con(Voiced Pulmonic Affricate Occlusive, Places.Dental, "d̪ð", "");
    VlAlveolarNSAffricate        = Con(Pulmonic Affricate, Places.Alveolar, "tɹ̝̊", "");
    VdAlveolarNSAffricate        = Con(Voiced Pulmonic Affricate, Places.Alveolar, "dɹ̝", "");
    VlPalatoAlveolarNSAffricate  = Con(Pulmonic Affricate, Places.PalatoAlveolar, "t̠ɹ̠̊˔", "");
    VdPalatoAlveolarNSAffricate  = Con(Voiced Pulmonic Affricate, Places.PalatoAlveolar, "d̠ɹ̠˔", "");
    VlPalatalNSAffricate         = Con(Pulmonic Affricate Occlusive, Places.Palatal, "cç", "");
    VdPalatalNSAffricate         = Con(Voiced Pulmonic Affricate Occlusive, Places.Palatal, "ɟʝ", "");
    VlVelarNSAffricate           = Con(Pulmonic Affricate Occlusive, Places.Velar, "kx", "");
    VdVelarNSAffricate           = Con(Voiced Pulmonic Affricate Occlusive, Places.Velar, "ɡɣ", "");
    VlUvularNSAffricate          = Con(Pulmonic Affricate, Places.Uvular, "qχ", "");
    VdEpiglottalNSAffricate      = Con(Voiced Pulmonic Affricate, Places.Pharyngeal, "ʡʢ", "");
    VlGlottalNSAffricate         = Con(Pulmonic Affricate, Places.Glottal, "ʔh", "");

    // Lateral
    VlAlveolarLateralAffricate   = Con(Pulmonic Lateral Affricate, Places.Alveolar, "tɬ̝̊", "");
    VdAlveolarLateralAffricate   = Con(Voiced Pulmonic Lateral Affricate, Places.Alveolar, "dɮ", "");
    VlRetroflexLateralAffricate  = Con(Pulmonic Lateral Affricate, Places.Retroflex, "ʈɭ̊˔", "");
    VdPalatalLateralAffricate    = Con(Voiced Pulmonic Lateral Affricate, Places.Palatal, "cʎ̝̊", "");
    VlVelarLateralAffricate      = Con(Pulmonic Lateral Affricate, Places.Velar, "kʟ̝̊", "");
    VdVelarLateralAffricate      = Con(Voiced Pulmonic Lateral Affricate, Places.Velar, "ɡʟ̝", "");

    //==================================
    // Ejective | Affricates
    //==================================

    // Central
    VlAlveolarEjectiveAffricate       = Con(Ejective Central Affricate, Places.Alveolar, "tsʼ", "");
    VlPalatoAlveolarEjectiveAffricate = Con(Ejective Central Affricate, Places.PalatoAlveolar, "t̠ʃʼ", "");
    VlRetroflexEjectiveAffricate      = Con(Ejective Central Affricate, Places.Retroflex, "ʈʂʼ", "");
    VlVelarEjectiveAffricate          = Con(Ejective Central Affricate, Places.Velar, "kxʼ", "");
    VlUvularEjectiveAffricate         = Con(Ejective Central Affricate, Places.Uvular, "qχʼ", "");

    // Lateral
    VlAlveolarLateralEjective         = Con(Ejective Lateral Affricate, Places.Alveolar, "tɬʼ", "");
    VlPalatalLateralEjective          = Con(Ejective Lateral Affricate, Places.Palatal, "cʎ̝̊ʼ", "");
    VlVelarLateralEjective            = Con(Ejective Lateral Affricate, Places.Velar, "kʟ̝̊ʼ", "");

    VlLabialVelarApproximant          = Con(Approximant Vocoid Semivowel Continuant, Places.LabialVelar, "ʍ", "W");

// Pre-existing
//    VlAlveoloPalatalFricative1      = NewConsonant(CPM(Categories.Other, Places.AlveoloPalatal) Fricative, "ɕ", "");
//    VlAlveoloPalatalFricative       = NewConsonant(CPM(Categories.Other, Places.AlveoloPalatal) Fricative, "ʑ", "");


    wh                                = Con(Nasal Voiced Approximant Nasal, Places.LabialVelar, "w\u0303", "w~");
    w                                 = Con(Voiced Approximant Vocoid Semivowel Continuant, Places.LabialVelar, "w", "w");

// This conflicts with another segment (VlPharyngealTrill)

//    VlEpiglottalFricative             = Con(Fricative, Places.Pharyngeal, "ʜ", "H\\");


    VdLabialPalatalApproximant        = Con(Voiced Approximant Vocoid Semivowel Continuant, Places.LabialPalatal, "ɥ", "H");

    SimultaneousSx                    = Con(Sibilant Fricative, Places.PostAlveolar, "ɧ", "x\\");
    VdEpiglottalFricative             = Con(Voiced Fricative, Places.Pharyngeal, "ʢ", "?\\");
    VlEpiglottalPlosive               = Con(Ejective, Places.Pharyngeal, "ʡ", "<\\");

    // Ejectives
    VlBilabialStopEjective            = Con(Ejective Pulmonic Stop, Places.Bilabial, "p\u02BC", "p_>");
    VlAveolarStopEjective             = Con(Ejective Stop, Places.Alveolar, "t\u02BC", "t_>");
    VlRetroflexStopEjective           = Con(Ejective Stop, Places.Retroflex, "ʈ\u02BC", "t`_>");
    VlPalatalStopEjective             = Con(Ejective Stop, Places.Palatal, "c\u02BC", "c_>");
    VlVelarStopEjective               = Con(Ejective Stop, Places.Velar, "k\u02BC", "k_>");
    VlUvularStopEjective              = Con(Ejective Stop, Places.Uvular, "q\u02BC", "q_>");
    VlEpiglottalStopEjective          = Con(Ejective Stop, Places.Pharyngeal, "ʡ\u02BC", ">\\_>");
    VlBilabialFricativeEjective       = Con(Ejective Fricative, Places.Bilabial, "ɸ\u02BC", "p\\_>");
    VlLabiodentalFricativeEjective    = Con(Ejective Fricative, Places.LabioDental, "f\u02BC", "f_>");
    VlDentalFricativeEjective         = Con(Ejective Fricative, Places.Dental, "θ\u02BC", "T_>");
    VlAlveolarFricativeEjective       = Con(Ejective Fricative, Places.Alveolar, "s\u02BC", "s_>");
    VlPostalveolarFricativeEjective   = Con(Ejective Fricative, Places.PostAlveolar, "ʃ\u02BC", "S_>");
    VlRetroflexFricativeEjective      = Con(Ejective Fricative, Places.Retroflex, "ʂ\u02BC", "s`_>");
    VlPalatalFricativeEjective        = Con(Ejective Fricative, Places.Palatal, "ɕ\u02BC", "s\\_>");
    VlVelarFricativeEjective          = Con(Ejective Fricative, Places.Velar, "x\u02BC" , "x_>");
    VlUvularFricativeEjective         = Con(Ejective Fricative, Places.Uvular, "χ\u02BC", "X_>");
    VlPostalveolarLatFricEjective     = Con(Ejective Lateral Fricative, Places.Alveolar, "ɬ\u02BC", "K_>");

    //==================================
    // Vowels
    //==================================

    e                         = Vow(Vocoid Continuant, Opens.Close, Backnesses.Front, "i", "i");
    E                         = Vow(LongVowel Vocoid Continuant, Opens.Close, Backnesses.Front, "iː", "i:");
    eeh                       = Vow(Rounded Vocoid Continuant, Opens.Close, Backnesses.Front, "y", "y");

    CloseCentralUnrounded     = Vow(NoFeature, Opens.Close, Backnesses.Central, "ɨ", "1");
    CloseCentralRounded       = Vow(Rounded, Opens.Close, Backnesses.Central, "ʉ", "}");
    CloseBackUnrounded        = Vow(Vocoid Continuant, Opens.Close, Backnesses.Back, "ɯ", "M");
    u                         = Vow(Rounded Vocoid Continuant, Opens.Close, Backnesses.Back, "u", "u");

    NearCloseCentralUnrounded = Vow(NoFeature, Opens.NearClose, Backnesses.Central, "ᵻ", "I\\");
    NearCloseFrontUnrounded   = Vow(NoFeature, Opens.NearClose, Backnesses.NearFront, "ɪ", "I");
    NearCloseFrontRounded     = Vow(Rounded, Opens.NearClose, Backnesses.NearFront, "ʏ", "Y");
    NearCloseCentralRounded   = Vow(Rounded, Opens.NearClose, Backnesses.Central, "ᵿ", "U\\");

    NearCloseBackRounded      = Vow(Rounded, Opens.NearClose, Backnesses.NearBack, "ʊ", "U");
    U                         = Vow(LongVowel Rounded, Opens.Close, Backnesses.Back, "uː", "u:");

    ay                        = Vow(Vocoid Continuant, Opens.CloseMid, Backnesses.Front, "e", "e");
    CloseMidFrontRounded      = Vow(Rounded Vocoid Continuant, Opens.CloseMid, Backnesses.Front, "ø", "2");
    MidCentralUnrounded       = Vow(NoFeature, Opens.Mid, Backnesses.Central, "ɘ", "@\\");
    Schwa                     = Vow(NoFeature, Opens.CloseMid, Backnesses.Central, "ə", "@");
    ooh                       = Vow(Rounded, Opens.CloseMid, Backnesses.Central, "ɵ", "8");
    CloseMidBackUnrounded     = Vow(Vocoid Continuant, Opens.CloseMid, Backnesses.Back, "ɤ", "7");
    oh                        = Vow(Rounded Vocoid Continuant, Opens.CloseMid, Backnesses.Back, "o", "o");

    MidFrontUnrounded         = Vow(NoFeature, Opens.Mid, Backnesses.Front, "ø̞", "");
    MidBackUnrounded          = Vow(NoFeature, Opens.Mid, Backnesses.Back, "o̞", "");

    eh                        = Vow(Vocoid Continuant, Opens.OpenMid, Backnesses.NearFront, "ɛ", "E");
    ai                        = Vow(LongVowel Vocoid Continuant, Opens.Mid, Backnesses.Front, "eː", "e:");

    OpenMidNearFrontRounded   = Vow(Rounded Vocoid Continuant, Opens.OpenMid, Backnesses.NearFront, "œ", "9");
    OpenMidCentralRounded     = Vow(Rounded, Opens.OpenMid, Backnesses.Central, "ɞ", "3\\");
    aeh                       = Vow(NoFeature, Opens.OpenMid, Backnesses.Central, "ɜ", "3");
    OpenMidBackUnrounded      = Vow(Vocoid Continuant, Opens.OpenMid, Backnesses.Back, "ʌ", "V");
    OpenMidBackRounded        = Vow(Rounded Vocoid Continuant, Opens.OpenMid, Backnesses.Back, "ɔ", "O");
    O                         = Vow(LongVowel Rounded Vocoid Continuant, Opens.Mid, Backnesses.Back, "oː", "o:");

    NearFrontUnrounded        = Vow(NoFeature, Opens.NearOpen, Backnesses.NearFront, "æ", "{");
    FrontOpenRounded          = Vow(Rounded, Opens.NearOpen, Backnesses.NearFront, "ɶ", "&");
    OpenMidSchwa              = Vow(Rounded, Opens.NearOpen, Backnesses.Central, "ɐ", "6");

    OpenCentralUnrounded      = Vow(NoFeature, Opens.Open, Backnesses.Central, "ä", "a_\"");
    ah                        = Vow(Vocoid Continuant, Opens.Open, Backnesses.NearFront, "a", "a");
    A                         = Vow(LongVowel Vocoid Continuant, Opens.Open, Backnesses.Central, "aː", "a:");

    OpenNearFrontRounded      = Vow(Rounded Vocoid Continuant, Opens.Open, Backnesses.NearFront, "ɶ", "&");
    OpenBackUnrounded         = Vow(Vocoid Continuant, Opens.Open, Backnesses.Back, "ɑ", "A");
    OpenBackRounded           = Vow(Rounded Vocoid Continuant, Opens.Open, Backnesses.Back, "ɒ", "Q");

    uuh                       = Vow(Nasal Rounded, Opens.OpenMid, Backnesses.NearFront, "œ\u0303", "oe*"); // French One "un"
    ey                        = Vow(Rounded Nasal, Opens.Close, Backnesses.Front, "y\u0303", "y~");
    aa                        = Vow(Nasal, Opens.Open, Backnesses.NearFront, "a\u0303", "~a");
    ahn                       = Vow(Nasal Rounded, Opens.NearOpen, Backnesses.Central, "ɐ\u0303", "a*");   // Supposed to be "ɛ̃" as in French Dog "chien"?
    oon                       = Vow(Nasal Rounded, Opens.OpenMid, Backnesses.Back, "ɔ\u0303", "o*");       // French Fish "poisson"
    aehn                      = Vow(Nasal, Opens.OpenMid, Backnesses.NearFront, "ɜ\u0303", "3*");
    ehnn                      = Vow(Nasal, Opens.OpenMid, Backnesses.NearFront, "ɛ\u0303", "E*");
    uh                        = Vow(Nasal Rounded, Opens.Close, Backnesses.Back, "u\u0303", "u*");         // Portuguese One "um"
    en                        = Vow(Nasal, Opens.CloseMid, Backnesses.Front, "e\u0303", "e*");             // Portuguese Trail "se*da
    een                       = Vow(Nasal, Opens.Close, Backnesses.Front, "i\u0303", "i*");                // Portuguese Tongue


// How to show rhotic vowels?
//    OpenMidCentralRhotic       = Vow(Rhotic, Opens.OpenMid, Backnesses.Central, "ɝ", "");
//    RhoticSchwa                = Vow(Rhotic, Opens.Open, Backnesses.NearFront, "ɚ", "@`");
  }

  with ImpossibleSegments {
    I10 = Imp(Pulmonic Nasal, Places.Pharyngeal);
    I11 = Imp(Pulmonic Nasal, Places.Glottal);
    I12 = Imp(Pulmonic Stop Voiced, Places.Pharyngeal);
    I13 = Imp(Pulmonic Stop Voiced, Places.Glottal);
    I14 = Imp(Pulmonic Sibilant Fricative, Places.Bilabial);
    I15 = Imp(Pulmonic Sibilant Fricative, Places.LabioDental);
    I16 = Imp(Pulmonic Sibilant Fricative, Places.LinguoLabial);
    I17 = Imp(Pulmonic Sibilant Fricative, Places.Velar);
    I18 = Imp(Pulmonic Sibilant Fricative, Places.Uvular);
    I19 = Imp(Pulmonic Sibilant Fricative, Places.Pharyngeal);
    I20 = Imp(Pulmonic Sibilant Fricative, Places.Glottal);
    I21 = Imp(Pulmonic Trill, Places.Velar);
    I22 = Imp(Pulmonic Trill, Places.Glottal);
    I23 = Imp(Pulmonic TapFlap, Places.Velar);
    I24 = Imp(Pulmonic TapFlap, Places.Glottal);
    I25 = Imp(Pulmonic Lateral Fricative, Places.Bilabial);
    I26 = Imp(Pulmonic Lateral Fricative, Places.LabioDental);
    I27 = Imp(Pulmonic Lateral Fricative, Places.Pharyngeal);
    I28 = Imp(Pulmonic Lateral Fricative, Places.Glottal);
    I29 = Imp(Pulmonic Lateral Approximant, Places.Bilabial);
    I30 = Imp(Pulmonic Lateral Approximant, Places.LabioDental);
    I31 = Imp(Pulmonic Lateral Approximant, Places.Pharyngeal);
    I32 = Imp(Pulmonic Lateral Approximant, Places.Glottal);
    I33 = Imp(Pulmonic Lateral TapFlap, Places.Bilabial);
    I34 = Imp(Pulmonic Lateral TapFlap, Places.LabioDental);
    I35 = Imp(Pulmonic Lateral TapFlap, Places.Pharyngeal);
    I36 = Imp(Pulmonic Lateral TapFlap, Places.Glottal);
    I37 = Imp(Pulmonic Sibilant Affricate, Places.Bilabial);
    I38 = Imp(Pulmonic Sibilant Affricate, Places.LabioDental);
    I39 = Imp(Pulmonic Sibilant Affricate, Places.Velar);
    I40 = Imp(Pulmonic Sibilant Affricate, Places.Uvular);
    I41 = Imp(Pulmonic Sibilant Affricate, Places.Pharyngeal);
    I42 = Imp(Pulmonic Sibilant Affricate, Places.Glottal);
    I43 = Imp(Pulmonic Lateral Affricate, Places.Bilabial);
    I44 = Imp(Pulmonic Lateral Affricate, Places.LabioDental);
    I45 = Imp(Pulmonic Lateral Affricate, Places.Pharyngeal);
    I46 = Imp(Pulmonic Lateral Affricate, Places.Glottal);
    I47 = Imp(Ejective Lateral Fricative Affricate, Places.Bilabial);
    I48 = Imp(Ejective Lateral Fricative Affricate, Places.LabioDental);
    I49 = Imp(Ejective Lateral Fricative Affricate, Places.Pharyngeal);
    I50 = Imp(Ejective Central Affricate, Places.Glottal);
    I51 = Imp(Ejective Lateral Affricate, Places.Bilabial);
    I52 = Imp(Ejective Lateral Affricate, Places.LabioDental);
    I53 = Imp(Ejective Lateral Affricate, Places.Pharyngeal);
    I54 = Imp(Ejective Lateral Affricate, Places.Glottal);
    I55 = Imp(Ejective Tenuis Click Affricate, Places.Velar);
    I56 = Imp(Ejective Tenuis Click Affricate, Places.Uvular);
    I57 = Imp(Ejective Tenuis Click Affricate, Places.Pharyngeal);
    I58 = Imp(Ejective Nasal Click Affricate, Places.Velar);
    I59 = Imp(Ejective Nasal Click Affricate, Places.Uvular);
    I60 = Imp(Ejective Nasal Click Affricate, Places.Pharyngeal);
    I61 = Imp(Ejective Tenuis Lateral Click Affricate, Places.Bilabial);
    I62 = Imp(Ejective Tenuis Lateral Click Affricate, Places.LabioDental);
    I63 = Imp(Ejective Tenuis Lateral Click Affricate, Places.Velar);
    I64 = Imp(Ejective Tenuis Lateral Click Affricate, Places.Uvular);
    I65 = Imp(Ejective Tenuis Lateral Click Affricate, Places.Pharyngeal);
  }                 									

  AllSegments = Results.UsedSegments + ImpossibleSegments;

  with DiacriticModifiers {
    UndefinedEscapeCharacter     = Diac("Undefined escape character", null, "*");
    Nasalized                    = Diac("Nasalized", "\u0303", "_~");
    Centralized                  = Diac("Centralized", "\u0308", "_\"");
    Advanced                     = Diac("Advanced", "\u031F", "_+");
    Retracted                    = Diac("Retracted", "\u0320", "_-");
    RisingTone                   = Diac("RisingTone ", "\u030C", "_R");
    Voiceless                    = Diac("Voiceless", "\u0325", "_0");
    Implosive                    = Diac("Implosive", null, "_<");
    Syllabic                     = Diac("Syllabic", "\u0329", "_=");
    Ejective                     = Diac("Ejective", "\u02BC", "_>");
    Pharyngealized               = Diac("Pharyngealized ", "\u02E4", "_?\\");
    FallingTone                  = Diac("Falling tone", "\u0302", "_F");
    NonSyllabic                  = Diac("Non-syllabic", "\u032F", "_^");
    NoAudibleRelease             = Diac("No audible release", "\u031A", "_}");
    RhoticHook                   = Diac("Rhotic hook", "\u02DE", "`");
    AdvancedTongueRoot           = Diac("Advanced tongue root ", "\u0318", "_A");
    Apical                       = Diac("Apical", "\u033A", "_a");
    ExtraLowTone                 = Diac("Extra low tone", "\u030F", "_B");
    LowRisingTone                = Diac("Low rising tone", "\u1DC5", "_B_L");
    LessRounded                  = Diac("Less rounded", "\u031C", "_c");
    Dental                       = Diac("Dental", "\u032A", "_d");
    VelarizedOrPharyngealized    = Diac("Velarized or Pharyngealized", "\u0334", "_e");
    GlobalFall                   = Diac("Global fall", "\u2198", "<F>");
    Velarized                    = Diac("Velarized", "\u02E0", "_G");
    HighTone                     = Diac("High tone", "\u0301", "_H");
    HighRisingTone               = Diac("High rising tone", "\u1DC4", "_H_T");
    Aspirated                    = Diac("Aspirated", "\u02B0", "_h");
    Palatalized                  = Diac("Palatalized", "\u02B2", "_j");
    CreakyVoiced                 = Diac("Creaky voiced", "\u0330", "_k");
    LowTone                      = Diac("Low tone", "\u0300", "_L");
    LateralRelease               = Diac("Lateral release", "\u02E1", "_l");
    MidTone                      = Diac("Mid tone", "\u0304", "_M");
    Laminal                      = Diac("Laminal", "\u033B", "_m");
    LinguoLabial                 = Diac("Linguo-Labial", "\u033C", "_N");
    NasalRelease                 = Diac("Nasal release", "\u207F", "_n");
    MoreRounded                  = Diac("More rounded", "\u0339", "_O");
    Lowered                      = Diac("Lowered", "\u031E", "_o");
    RetractedTongueRoot          = Diac("Retracted tongue root", "\u0319", "_q");
    GlobalRise                   = Diac("Global rise", "\u2197", "<R>");
    RisingFallingTone            = Diac("Rising falling tone", "\u1DC8", "_R_F");
    Raised                       = Diac("Raised", "\u031D", "_r");
    ExtraHighTone                = Diac("Extra high tone", "\u030B", "_T");
    BreathyVoiced                = Diac("Breathy voiced", "\u0324", "_t");
    Voiced                       = Diac("Voiced", "\u032C", "_v");
    Labialized                   = Diac("Labialized", "\u02B7", "_W");
    ExtraShort                   = Diac("Extra short", "\u02D8", "_X");
    MidCentralized               = Diac("Mid-centralized", "\u033D", "_x");
    Downstep                     = Diac("Down-step", "↓", "!");
    Upstep                       = Diac("Up-step", "↑", "^");
    SylableBreak                 = Diac("Sylable break", ".", ".");
    PrimaryStress                = Diac("Primary stress", "ˈ", "\"");
    SecondaryStress              = Diac("Secondary stress", "ˌ", "%");
    Long                         = Diac("Long", "ː", ":");
    HalfLong                     = Diac("Half-long", "ˑ", ":\\");
    IndeterminacyinFrenchVowels  = Diac("Indeterminacy in french vowels", null, "/");
    BeginNonsegmentalNotation    = Diac("Begin Non-segmental notation", null, "<");
    Endnonsegmentalnotation      = Diac("End non-segmental notation", "", ">");
    Voicedepiglottalfricative    = Diac("Voiced epiglottal fricative", "ʢ", "<\\");
    Postalveolarclick            = Diac("Post-alveolar click", "ǃ", "!\\");
    MinorGroup                   = Diac("Minor group", " | ", " | ");
    Dentalclick                  = Diac("Dental click", "ǀ", " | \\");
    MajorGroup                   = Diac("Major group", "‖", " |  | ");
    Alveolarlateralclick         = Diac("Alveolar lateral click", "ǁ", " | \\ | \\");
    Palatalclick                 = Diac("Palatal click", "ǂ", "");
//    Linkingmark                  = Diac("Linking Mark", "\u203f", "-\\");
    VoicelessDescender           = Diac("Voiceless descender", "\u030A", "");
    CombiningMacron              = Diac("Combining macron", "\u0331", "");
    TieBarBelow                  = Diac("Tie-bar below", "\u035C", "");
    TieBarAbove                  = Diac("Tie-bar above", "\u0361", "");
    ReadyMadeCombination         = Diac("Ready made combination", "\u026B", "");
    Becomes                      = Diac("Becomes", "→", "");
    Separator                    = Diac("Separator", "", "-");
  }

  //======================================================================

  SegmentColumns = 4;
  SegmentSize    = 40 pts;

  ShowSampa(sampa) = Span {
    Style.MonoFamily,
    sampa,
  };

  SegmentName(segment) = Span {
    if (segment.Features.HasFlag(Vowel)) {
      segment.Open,
      Space,
      segment.Backness,
    }
    else
      segment.Place;
    Space,
    Span {
      Separator: Space,
      if (segment.Diacritic)
        segment.Description;
      else
        each segment.Features;
    }
  };

  SegmentDisplay(segment, location) = Block {
    ParAlignment: ParAlignments.Center,
    Paragraph {
      LocationMark: location,
      SpaceBefore: 8 pts,
      SpaceAfter: 8 pts,
      TextHeight: SegmentSize,
      Style.IPAFamily,
      SpaceAfter: SegmentSize * 0.125,
      segment.Ipa,
    },
    Paragraph {
      TextHeight: 10 pts,
      SegmentName(segment),
    },
    Paragraph {
      TextHeight: 8 pts,
      ParBackground: 95%,
      Style.MonoFamily,
      TextRadix: 16,
      TextDigits: 4,
      Span {
        Separator: Lang.Separator,
        if (segment.Ipa)
          Type.Integer(each segment.Ipa);
      }
    },
    Paragraph {
      TextHeight: 8 pts,
      if (segment.Sampa and segment.Sampa.Length > 0) {
        ParBackground: 90%,
        ShowSampa(segment.Sampa)
      }
      else if (segment.Ipa.Length > 0) {
        "No Sampa" {TextColor: Colors.White},
        ParBackground: Colors.Red,
      }
    },
  };

  SegmentPopup(segment) = Frame {
    Width: 2 inches,
    SegmentDisplay(segment, null)
  };

  SegmentCell(segment) = Cell {
    Edge: 0.25 pts {Color: Colors.LightGray},
    Padding: 2 pts,
    SegmentDisplay(segment, segment.Key)
  };

  SegmentRow(segments) = Row {
    SegmentCell(each segments)
  };

  AlphaOrder(x, y) {
    var cl = Math.Compare(x.Ipa.Length, y.Ipa.Length);
    if (cl == 0)
      cl = -Math.Compare(x.Ipa, y.Ipa);
    return cl;
  }

  SortedSegments = Results.UsedSegments.Sort(false, AlphaOrder);

  SegmentTable = Block {
    Table {
      Columns: [Metrics.Content.Width / SegmentColumns] * SegmentColumns,
      Style.TitleBar(Lang.IPAListing, SegmentColumns),
      SegmentRow(each (SortedSegments / SegmentColumns))
    },
    Style.TableNotes
  };

  ShowIPA(word) = Span {
    (each word.Segments).Ipa
  };

  ShowCharacter(c) = Span {
    Popup: Call(SegmentPopup, c.Segment),
//    Link: c.Segment.Key,
    c.Character
  };

  ShowSegment(segment) = Span {
    Style.IPAFamily,
    Popup: Call(SegmentPopup, segment),
//    Link: segment.Key,
    if (segment.?Impossible) {
      Assert(false, Lang.Impossible),
      TextColor: Colors.Red,
    }
    if (segment.?Diacritic)
      "  ";
    segment.?Ipa
  };

  SegmentSound(segment) {
    if (segment == SpaceSegment)
      return Space;
    return segment.Name
  }

  LangHasMeaning(word, meaning) = word.Meaning == meaning;
  FindWordsWithMeaning(language, meaning) = language.Words.FindSlice(LangHasMeaning, meaning);

  //======================================================================
  // Build a dictionary with SAMPA text as the key
  //======================================================================

  GatherText(set, segment) {
    if (segment.Sampa.Length > 0)
      set.Add(segment, segment.Sampa);
  }

  SampaSet {
    var set = new DictionaryClass(128);
    GatherText(set, each Segments);
    set.Add(SpaceSegment, " ");
    return set;
  }

  //======================================================================
  // Code for Euler segment diagram
  //======================================================================

  ChartSize = 6 inches;
  EX(x)     = ChartSize * x * 0.01;
  EY(y)     = ChartSize * y * 0.01;

  Enclosure(x, y, w, h, color) {
    var size = Size(EX(w), EY(h));
    return Canvas {
      X: EX(x),
      Y: EY(y),
      Size: size,
      Figure {
        Stroke: 1 pts,
        Fill: color,
        Rectangle(Rect(0, size), Size(6 pts))
      }
    };
  }

  NameBox(name, angle=0) = Paragraph {
    Transform: Rotate(angle),
    TransformFit: true,
    Space,
    name Bold,
    Space,
  };

  FeatureMask = Vowel Nasal Vocoid LongVowel Semivowel Approximant Vibrant Lateral Affricate Occlusive Strident Sibilant Obstruent Continuant Fricative Rhotic Liquid Trill TapFlap;
  MatchFeature(segment, data) = segment.Features.HasFlagMask(FeatureMask, data);
  FeatureSegments(features)   = Results.UsedSegments.FindSlice(MatchFeature, features);

  FeatureFrame(x, y, width, name, features) = Canvas {
    X: EX(x),
    Y: EY(y),
    Frame {
      Width: EX(width),
      ParAlignment: ParAlignments.Center,
      if (name)
        Span {Bold, name};
      Paragraph {
        Separator: Space,
        IPA.ShowSegment(each FeatureSegments(features))
      }
    }
  };

  VNameFrame(name, x, y, width, height, color) = Enclosure(x, y, width, height, color) {
    VAlign: VAligns.Center,
    NameBox(name, 90 degrees)
  };

  FeatureChart = Canvas {
    TextHeight: 16 pts,

    VNameFrame(Lang.Occlusive, 10, 0, 90, 34, Color(255, 238, 238)) {
      HAlign: HAligns.Right,
    },
    VNameFrame(Lang.Continuant, 10, 35, 90, 37, Color(229, 255, 255)) {
      HAlign: HAligns.Right,
    },
    VNameFrame(Lang.Obstruent, 0, 11, 94, 40, Color(238, 238, 255, 50%)),
    VNameFrame(Lang.Vocoid, 0, 52, 78, 21, Color(238, 255, 238, 50%)),
    VNameFrame(Lang.Vibrant, 20, 74, 65, 17, Color(238, 238, 255)),

    Enclosure(11, 1, 83, 9, Color(255, 246, 246)),    // Nasals
    Enclosure(31, 12, 62, 21, Color(246, 242, 250)),  // Affricates
    Enclosure(11, 12, 19, 21, Color(246, 243, 250)),  // Plosives
    Enclosure(11, 36, 80, 14, Color(240, 247, 255)),  // Fricatives

    Enclosure(25, 75, 59, 7, Color(247, 247, 255)) {
      HAlign: HAligns.Left,
      VAlign: VAligns.Center,
      NameBox(Lang.TapFlap),
    },
    Enclosure(25, 83, 53, 7, Color(247, 247, 255)) {
      HAlign: HAligns.Left,
      VAlign: VAligns.Center,
      NameBox(Lang.Trill),
    },

    Enclosure(53, 13, 39, 36, Color(233, 248, 235, 50%)) {
      HAlign: HAligns.Center,
      NameBox(Lang.Strident),
    },

    Enclosure(62, 18, 25, 24, Color(245, 252, 220, 50%)), // Sibilants
    Enclosure(11, 53, 21, 18, Color(240, 255, 247)),      // Vowels
    Enclosure(33, 53, 61, 18, Color(240, 255, 247, 50%)) {
      HAlign: HAligns.Left,
      NameBox(Lang.Approximant),
    },

    Enclosure(35, 59, 21, 11, Color(248, 255, 225)), // Semivowels

    Enclosure(64, 43, 26, 59, Color(255, 238, 238, 50%)) {
      HAlign: HAligns.Center,
      VAlign: VAligns.Bottom,
      NameBox(Lang.Liquid),
    },

    Enclosure(65, 44, 14, 52, Color(255, 247, 221, 50%)) {
      HAlign: HAligns.Center,
      VAlign: VAligns.Bottom,
      NameBox(Lang.Rhotic),
    },

    Enclosure(80, 44, 9, 44, Color(238, 247, 230, 70%)) {
      HAlign: HAligns.Right,
      VAlign: VAligns.Bottom,
      NameBox(Lang.Lateral, 90 degrees),
    },

    FeatureFrame(11, 1, 84, Lang.Nasal, Nasal Occlusive),
    FeatureFrame(12, 14, 17, Lang.Plosive, Stop Occlusive),
    FeatureFrame(32, 14, 20, Lang.Affricate, Affricate Occlusive),
    FeatureFrame(54, 20, 7, null, Affricate Occlusive Strident),
    FeatureFrame(65, 18, 18, Lang.Sibilant, Affricate Occlusive Strident Sibilant),
    FeatureFrame(14, 38, 22, Lang.Fricative, Fricative Obstruent Continuant),
    FeatureFrame(54, 38, 6, null, Fricative Obstruent Continuant Strident),
    FeatureFrame(64, 36, 20, null, Fricative Obstruent Continuant Strident Sibilant),
    FeatureFrame(66, 44, 10, null, Fricative Obstruent Continuant Strident Rhotic Liquid),
    FeatureFrame(80, 44, 10, null, Fricative Obstruent Continuant Strident Lateral Liquid),
    FeatureFrame(12, 53, 19, Lang.Vowel, Vowel Vocoid Continuant),
    FeatureFrame(36, 60, 19, Lang.SemiVowel, Vocoid Semivowel Approximant Continuant),
    FeatureFrame(57, 62, 5, null, Vocoid Approximant),
    FeatureFrame(66, 60, 10, null, Vocoid Approximant Rhotic Liquid),
    FeatureFrame(82, 58, 5, null, Vocoid Approximant Rhotic Liquid Lateral),
    FeatureFrame(54, 76, 10, null, Vibrant TapFlap),
    FeatureFrame(66, 76, 10, null, Vibrant TapFlap Rhotic Liquid),
    FeatureFrame(77, 77, 10, null, Vibrant TapFlap Rhotic Liquid Lateral),
    FeatureFrame(54, 84, 10, null, Vibrant Trill),
    FeatureFrame(66, 84, 10, null, Vibrant Trill Rhotic Liquid),
  };
  //======================================================================
  // Code for drift diagram
  //======================================================================

  RowText     = 8 pts;
  RowHeight   = 9 pts;
  BoxWidth    = 6 pts;
  BorderSize  = 0.33 pts;
  FeatureList = FeatureSet[1..];

  FeaturePopup(feature) = Frame {
    Width: 2 inches,
    Paragraph {
      feature.Name
    }
  };

  RowBox = Canvas {
    Height: RowHeight,
    Width: BoxWidth,
    HAlign: HAligns.Center,
    VAlign: VAligns.Center,
  };

  ShowFeature(feature) = Canvas {
    Height: RowHeight,
    VAlign: VAligns.Center,
    feature.Name
  };

  FeatureBox(feature, features0, features1) = RowBox {
    if (features0.HasFlag(feature)) {
      if (not features1.HasFlag(feature))
        Background: Colors.Red;
    }
    else if (features1.HasFlag(feature))
      Background: Colors.Green;
  };

  FeatureSegment(segment0, segment1) = Group {
    Vertical: true,
    VAlign: VAligns.Center,
    FeatureBox(each FeatureList, segment0.Features, segment1.Features),
  };

  DriftFeatures(line0, line, index) = Group {
    Vertical: true,
    Group {
      Vertical: true,
      RowBox {
        if (EachIndex == 0)
          ShowSegment(line0.Segments[index]);
      },
      RowBox {
        ShowSegment(line.Segments[index]),
      },
      BorderB: BorderSize,
    },
    Group {
      FeatureSegment(line0.Segments[index], line.Segments[index]),
    }
  };

  SegmentLength(line) = line.Segments.Length;
  MinLength(lines)    = SegmentLength(each lines).Min;

  DriftMatrix(lines, index) = Group {
    if (index != 0)
      BorderL: BorderSize;
    DriftFeatures(lines[0], each lines[1..], index)
  };

  DriftChart(lines) = Group {
    TextHeight: RowText,
    VAlign: VAligns.Top,
    Border: BorderSize,
    Group {
      Vertical: true,
      BorderR: BorderSize,
      Group {
        Vertical: true,
        VAlign: VAligns.Center,
        RowBox,
        RowBox,
      },
      Group {
        Vertical: true,
        PaddingR: 3 pts,
        BorderT: BorderSize,
        ShowFeature(each FeatureList)
      },
    },
    DriftMatrix(lines, each 0..<MinLength(lines))
  };

  DriftMeaning(meaning) = Group {
    MarginB: 8 pts,
    Vertical: true,
    Paragraph {
      Lang.Meaning, ": ",
      meaning Bold,
    },
    DriftChart(Results.GetGeneText(meaning, each Results.UsedLanguages)),
  };

  DriftGroup(meanings) = Group {
    DriftMeaning(each meanings)
  };

  DriftSection = Block {
    Paragraph {
      Separator: "  ",
      DriftGroup(each Results.UsedMeanings)
    }
  };
}

