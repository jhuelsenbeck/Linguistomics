using Format, Units
//======================================================================

with IPA
  enum Categories
    Vowel,
    Consonant,
    PulmonicAffricate,
    EjectiveAffricate,
    Other
  end

  enum Opens
    Close,
    NearClose,
    CloseMid,
    Mid,
    OpenMid,
    NearOpen,
    Open
  end

  enum Backnesses
    Front,
    NearFront,
    Central,
    NearBack,
    Back,
  end

  enum Places
    Bilabial,
    Labial,
    LabialVelar,
    LabialPalatal,
    LabioDental,
    LinguoLabial,
    Dental,
    Alveolar,
    AlveoloPalatal,
    PostAlveolar,
    Retroflex,
    Palatal,
    PalatoAlveolar,
    Velar,
    Uvular,
    Pharyngeal,
    Glottal,
  end

  enum Manners
    Stop,
    Nasal,
    SibilantFricative,
    Fricative,
    Approximant,
    TapFlap,
    Trill,
    LateralFricative,
    LateralApproximant,
    LateralTapFlap,
    Tenuis,
    TenuisLateral,
    Plosive,
    Implosive,
    Affricate,
    Sibilant,
    NonSibilant,
    Central,
    Lateral
  end

  let Encode(text, sampa, alt=null) = {
    Popup: SoundPopup,
    Text: text,
    Sampa: sampa,
    Alt: alt
  }

  let Consonant(category, place, manner) = {
    Category: category,
    Place: place,
    Manner: manner,
  }

  let Vowel(open, backness) = {
    Category: Categories.Vowel,
    Open: open,
    Backness: backness,
  }

  let Voiced     = {IsVoiced: true}
  let NonIPA     = {IsNotIPA: true}
  let Rounded    = {IsRounded: true}
  let Velarized  = {IsVelarized: true}
  let Click      = {IsClick: true}
  let Ejective   = {IsEjective: true}
  let Pulmonic   = {IsPulmonic: true}
  let Impossible = {IsImpossible: true}

  let PulmonicConsonant(place, manner) = Pulmonic Consonant(Categories.Consonant, place, manner)
  let PulmonicAffricate(place, manner) = Consonant(Categories.PulmonicAffricate, place, manner)
  let EjectiveAffricate(place, manner) = Consonant(Categories.EjectiveAffricate, place, manner)
  let NPEjective(sound, manner)        = Encode(sound.Text Diacritics.Ejective.Text, sound.Sampa Diacritics.Ejective.Sampa) EjectiveAffricate(sound.Place, manner) Ejective

  let MatchPulmonicManner(sound, data) = sound.Manner == data.Manner and MatchPulmonic(sound, data)

  let MatchPulmonic(sound, data) = sound.IsPulmonic and sound.Category == Categories.Consonant and sound.Place == data.Place
  let MatchPulmonicPlace(place)  = Sounds.Contains(MatchPulmonic {Place: place})
  let PulmonicPlaces             = Places.FindSlice(MatchPulmonicPlace)


  with Sounds
    //==================================
    // Pulmonic Consonants
    //==================================

    // Nasal					
    let VlBilabialNasal           = Encode("m̥", "") PulmonicConsonant(Places.Bilabial, Manners.Nasal)
    let VdBilabialNasal           = Encode("m", "m") Voiced PulmonicConsonant(Places.Bilabial, Manners.Nasal)
    let VdLabioDentalNasal        = Encode("ɱ", "F") Voiced PulmonicConsonant(Places.LabioDental, Manners.Nasal)
    let VdLinguoLabioNasal        = Encode("n̼", "") Voiced PulmonicConsonant(Places.LinguoLabial, Manners.Nasal)
    let VlAlveolarNasal           = Encode("n̥", "") PulmonicConsonant(Places.Alveolar, Manners.Nasal)
    let VdAlveolarNasal           = Encode("n", "n") Voiced PulmonicConsonant(Places.Alveolar, Manners.Nasal)
    let VlRetroFlexNasal          = Encode("ɳ̊", "") PulmonicConsonant(Places.Retroflex, Manners.Nasal)
    let VdRetroFlexNasal          = Encode("ɳ", "n`") Voiced PulmonicConsonant(Places.Retroflex, Manners.Nasal)
    let VlPalatalNasal            = Encode("ɲ̊", "") PulmonicConsonant(Places.Palatal, Manners.Nasal)
    let VdPalatalNasal            = Encode("ɲ", "J") Voiced PulmonicConsonant(Places.Palatal, Manners.Nasal)
    let VlVelarNasal              = Encode("ŋ̊", "") PulmonicConsonant(Places.Velar, Manners.Nasal)
    let VdVelarNasal              = Encode("ŋ", "N") Voiced PulmonicConsonant(Places.Velar, Manners.Nasal)
    let VdUvularNasal             = Encode("ɴ", "N\\") Voiced PulmonicConsonant(Places.Uvular, Manners.Nasal)
														
    // Stop
    let VlBilabialStop            = Encode("p", "p") PulmonicConsonant(Places.Bilabial, Manners.Stop)
    let VdBilabialStop            = Encode("b", "b") Voiced PulmonicConsonant(Places.Bilabial, Manners.Stop)
    let VlLabioDentalStop         = Encode("p̪", "") PulmonicConsonant(Places.LabioDental, Manners.Stop)
    let VdLabioDentalStop         = Encode("b̪", "") Voiced PulmonicConsonant(Places.LabioDental, Manners.Stop)
    let VlLinguoLabialStop        = Encode("t̼", "") PulmonicConsonant(Places.LinguoLabial, Manners.Stop)
    let VdLinguoLabialStop        = Encode("d̼", "") Voiced PulmonicConsonant(Places.LinguoLabial, Manners.Stop)
    let VlAlveolarStop            = Encode("t", "t") PulmonicConsonant(Places.Alveolar, Manners.Stop)
    let VdAlveolarStop            = Encode("d", "d") Voiced PulmonicConsonant(Places.Alveolar, Manners.Stop)
    let VlRetroflexStop           = Encode("ʈ", "t`") PulmonicConsonant(Places.Retroflex, Manners.Stop)
    let VdRetroflexStop           = Encode("ɖ", "d`") Voiced PulmonicConsonant(Places.Retroflex, Manners.Stop)
    let VlPalatalStop             = Encode("c", "c") PulmonicConsonant(Places.Palatal, Manners.Stop)
    let VdPalatalStop             = Encode("ɟ", "J\\") Voiced PulmonicConsonant(Places.Palatal, Manners.Stop)
    let VlVelarStop               = Encode("k", "k") PulmonicConsonant(Places.Velar, Manners.Stop)
    let VdVelarStop               = Encode("ɡ", "g") Voiced PulmonicConsonant(Places.Velar, Manners.Stop)
    let VlUvularStop              = Encode("q", "q") PulmonicConsonant(Places.Uvular, Manners.Stop)
    let VdUvularStop              = Encode("ɢ", "G\\") Voiced PulmonicConsonant(Places.Uvular, Manners.Stop)
    let VdEpiglottalStop          = Encode("ʡ", ">\\") PulmonicConsonant(Places.Pharyngeal, Manners.Stop)
    let GlottalStop               = Encode("ʔ", "?") PulmonicConsonant(Places.Glottal, Manners.Stop)
		
    // Sibilant Fricative										
    let VlAlveolarSibFricative       = Encode("s", "s") PulmonicConsonant(Places.Alveolar, Manners.SibilantFricative)
    let VdAlveolarSibFricative       = Encode("z", "z") Voiced PulmonicConsonant(Places.Alveolar, Manners.SibilantFricative)
    let VlPostalveolarSibFricative   = Encode("ʃ", "S") PulmonicConsonant(Places.PostAlveolar, Manners.SibilantFricative)
    let VdPostalveolarSibFricative   = Encode("ʒ", "Z") Voiced PulmonicConsonant(Places.PostAlveolar, Manners.SibilantFricative)
    let VlRetroflexSibFricative      = Encode("ʂ", "s`") PulmonicConsonant(Places.Retroflex, Manners.SibilantFricative)
    let VdRetroflexSibFricative      = Encode("ʐ", "z`") Voiced PulmonicConsonant(Places.Retroflex, Manners.SibilantFricative)
    let VlPalatalSibFricative        = Encode("ɕ", "s\\") PulmonicConsonant(Places.Palatal, Manners.SibilantFricative)
    let VdPalatalSibFricative        = Encode("ʑ", "z\\") Voiced PulmonicConsonant(Places.Palatal, Manners.SibilantFricative)

    // Fricative										
    let VlBilabialFricative          = Encode("ɸ", "p\\") PulmonicConsonant(Places.Bilabial, Manners.Fricative)
    let VdBilabialFricative          = Encode("β", "B") Voiced PulmonicConsonant(Places.Bilabial, Manners.Fricative)
    let VlLabiodentalFricative       = Encode("f", "f") PulmonicConsonant(Places.LabioDental, Manners.Fricative)
    let VdLabiodentalFricative       = Encode("v", "v") Voiced PulmonicConsonant(Places.LabioDental, Manners.Fricative)
    let VlLinguoLabialFricative      = Encode("θ̼", "") PulmonicConsonant(Places.LinguoLabial, Manners.Fricative)
    let VdLinguoLabialFricative      = Encode("ð̼", "") Voiced PulmonicConsonant(Places.LinguoLabial, Manners.Fricative)
    let VlDentalFricative            = Encode("θ", "T") PulmonicConsonant(Places.Dental, Manners.Fricative)
    let VdDentalFricative            = Encode("ð", "D") Voiced PulmonicConsonant(Places.Dental, Manners.Fricative)
    let VlAlveolarFricative          = Encode("θ̠", "") PulmonicConsonant(Places.Alveolar, Manners.Fricative)
    let VdAlveolarFricative          = Encode("ð̠", "") Voiced PulmonicConsonant(Places.Alveolar, Manners.Fricative)
    let VlPostaveolarFricative       = Encode("ɹ̠̊", "") PulmonicConsonant(Places.PostAlveolar, Manners.Fricative)
    let VdPostalveolarFricative      = Encode("ɹ̝̊", "") Voiced PulmonicConsonant(Places.PostAlveolar, Manners.Fricative)
    let VdRetroflexFricative         = Encode("ɻ˔","") Voiced PulmonicConsonant(Places.Retroflex, Manners.Fricative)
    let VlPalatalFricative           = Encode("ç", "C") PulmonicConsonant(Places.Palatal, Manners.Fricative)
    let VdPalatalFricative           = Encode("ʝ", "j\\") Voiced PulmonicConsonant(Places.Palatal, Manners.Fricative)
    let VlVelarFricative             = Encode("x", "x") PulmonicConsonant(Places.Velar, Manners.Fricative)
    let VdVelarFricative             = Encode("ɣ", "G") Voiced PulmonicConsonant(Places.Velar, Manners.Fricative)
    let VlUvularFricative            = Encode("χ", "X") PulmonicConsonant(Places.Uvular, Manners.Fricative)
    let VdUvularFricative            = Encode("ʁ", "R") Voiced PulmonicConsonant(Places.Uvular, Manners.Fricative)
    let VlPharyngealFricative        = Encode("ħ", "X\\") PulmonicConsonant(Places.Pharyngeal, Manners.Fricative)
    let VdPharyngealFricative        = Encode("ʕ", "?\\") Voiced PulmonicConsonant(Places.Pharyngeal, Manners.Fricative)
    let VlGlottalFricative           = Encode("h", "h") PulmonicConsonant(Places.Glottal, Manners.Fricative)
    let VdGlottalFricative           = Encode("ɦ", "h\\") Voiced PulmonicConsonant(Places.Glottal, Manners.Fricative)
														
    // Approximant										
    let VlLabioDentalApproximant     = Encode("ʋ̥", "") PulmonicConsonant(Places.LabioDental, Manners.Approximant)
    let VdLabioDentalApproximant     = Encode("ʋ", "v\\", "P") Voiced PulmonicConsonant(Places.LabioDental, Manners.Approximant)
    let VlPostalveolarApproximant    = Encode("ɹ̥", "") PulmonicConsonant(Places.Alveolar, Manners.Approximant)
    let VdPostalveolarApproximant    = Encode("ɹ", "r\\") Voiced PulmonicConsonant(Places.Alveolar, Manners.Approximant)
    let VlRetroflexApproximant       = Encode("ɻ̊", "") PulmonicConsonant(Places.Retroflex, Manners.Approximant)
    let VdRetroflexApproximant       = Encode("ɻ", "r\\`") Voiced PulmonicConsonant(Places.Retroflex, Manners.Approximant)
    let VlPalatalApproximant         = Encode("j̊", "") PulmonicConsonant(Places.Palatal, Manners.Approximant)
    let VdPalatalApproximant         = Encode("j", "j") Voiced PulmonicConsonant(Places.Palatal, Manners.Approximant)
    let VlVelarApproximant           = Encode("ɰ̊", "") PulmonicConsonant(Places.Velar, Manners.Approximante)
    let VdVelarApproximant           = Encode("ɰ", "M\\") Voiced PulmonicConsonant(Places.Velar, Manners.Approximant)
    let VdGlottalApproximant         = Encode("ʔ̞", "") Voiced PulmonicConsonant(Places.Glottal, Manners.Approximant)
														
    // Tap or Flap										
    let VdBilabialDentalFlap         = Encode("ⱱ̟", "") Voiced PulmonicConsonant(Places.Bilabial, Manners.TapFlap)
    let VdLabioDentalFlap            = Encode("ⱱ", "") Voiced PulmonicConsonant(Places.LabioDental, Manners.TapFlap)
    let VdLingualLabialStop          = Encode("ɾ̼", "") Voiced PulmonicConsonant(Places.LinguoLabial, Manners.TapFlap)
    let VlAlveolarFlap               = Encode("ɾ̥", "") PulmonicConsonant(Places.Alveolar, Manners.TapFlap)
    let VdAlveolarTap                = Encode("ɾ", "4") Voiced PulmonicConsonant(Places.Alveolar, Manners.TapFlap)
    let VlRetroflexFlap              = Encode("ɽ̊", "") PulmonicConsonant(Places.Retroflex, Manners.TapFlap)
    let VdRetroflexFlap              = Encode("ɽ", "r`") Voiced PulmonicConsonant(Places.Retroflex, Manners.TapFlap)
    let VdUvularFlap                 = Encode("ɢ̆", "") Voiced PulmonicConsonant(Places.Uvular, Manners.TapFlap)
    let VdPharyngealFlap             = Encode("ʡ̆", "") Voiced PulmonicConsonant(Places.Pharyngeal, Manners.TapFlap)
														
    // Trill											
    let VlBilabialTrill              = Encode("ʙ̥", "") PulmonicConsonant(Places.Bilabial, Manners.Trill)
    let VdBilabialTrill              = Encode("ʙ", "B\\") Voiced PulmonicConsonant(Places.Bilabial, Manners.Trill)
    let VlAlveolarTrill              = Encode("r̥", "") PulmonicConsonant(Places.Alveolar, Manners.Trill)
    let VdAlveolarTrill              = Encode("r", "r") Voiced PulmonicConsonant(Places.Alveolar, Manners.Trill)
    let VlRetroflexTrill             = Encode("ɽ̊r̥", "") PulmonicConsonant(Places.Retroflex, Manners.Trill)
    let VdRetroflexTrill             = Encode("ɽr", "") Voiced PulmonicConsonant(Places.Retroflex, Manners.Trill)
    let VlUvularTrill                = Encode("ʀ", "R\\") PulmonicConsonant(Places.Uvular, Manners.Trill)
    let VlPharyngealTrill            = Encode("H", "") PulmonicConsonant(Places.Pharyngeal, Manners.Trill)
    let VdPharyngealTrill            = Encode("ʢ", "<\\") Voiced PulmonicConsonant(Places.Pharyngeal, Manners.Trill)
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = Encode("ɬ", "K") PulmonicConsonant(Places.Alveolar, Manners.LateralFricative)
    let VdAlveolarLateralFricative   = Encode("ɮ", "K\\") Voiced PulmonicConsonant(Places.Alveolar, Manners.LateralFricative)
    let VlRetroflexLateralFricative  = Encode("ɭ̊˔", "") PulmonicConsonant(Places.Retroflex, Manners.LateralFricative)
    let VdRetroflexLateralFricative  = Encode("ɭ˔", "") Voiced PulmonicConsonant(Places.Retroflex, Manners.LateralFricative)
    let VlAlveolarPalatalFricative   = Encode("ʎ̝̊", "") PulmonicConsonant(Places.Palatal, Manners.LateralFricative)
    let VdAlveolarPalatalFricative   = Encode("ʎ̝", "") Voiced PulmonicConsonant(Places.Palatal, Manners.LateralFricative)
    let VlVelarPalatalFricative      = Encode("ʟ̝̊", "") PulmonicConsonant(Places.Velar, Manners.LateralFricative)
    let VdVelarPalatalFricative      = Encode("ʟ̝", "") Voiced PulmonicConsonant(Places.Velar, Manners.LateralFricative)
														
    // LateralApproximant								
    let VlAlveolarLateralApproximant = Encode("l̥", "") PulmonicConsonant(Places.Alveolar, Manners.LateralApproximant)
    let VdAlveolarLateralApproximant = Encode("l", "l") Voiced PulmonicConsonant(Places.Alveolar, Manners.LateralApproximant)
    let VdVelarizedAlveolarLateralApproximant = Encode("ɫ", "5") Voiced Velarized PulmonicConsonant(Places.Alveolar, Manners.LateralApproximant)
    let VlRetroflexLateral           = Encode("ɭ̊", "") PulmonicConsonant(Places.Retroflex, Manners.LateralApproximant)
    let VdRetroflexLateral           = Encode("ɭ", "n`") Voiced PulmonicConsonant(Places.Retroflex, Manners.LateralApproximant)
    let VlPalatalLateral             = Encode("ʎ̥", "") PulmonicConsonant(Places.Palatal, Manners.LateralApproximant)
    let VdPalatalLateral             = Encode("ʎ", "L") Voiced PulmonicConsonant(Places.Palatal, Manners.LateralApproximant)
    let VlVelarLateral               = Encode("ʟ̥", "") PulmonicConsonant(Places.Velar, Manners.LateralApproximant)
    let VdVelarLateral               = Encode("ʟ", "L\\") Voiced PulmonicConsonant(Places.Velar, Manners.LateralApproximant)
    let VdUvularLateral              = Encode("ʟ̠", "") Voiced PulmonicConsonant(Places.Uvular, Manners.LateralApproximant)

    // Lateral tap/flap
    let VdAlveolarLateralFlap        = Encode("ɺ", "l\\") Voiced PulmonicConsonant(Places.Alveolar, Manners.LateralTapFlap)
    let VdRetroflexLateralFlap       = Encode("ɭ̆", "") Voiced PulmonicConsonant(Places.Retroflex, Manners.LateralTapFlap)
    let VdPalatalLateralFlap         = Encode("ʎ̆", "") Voiced PulmonicConsonant(Places.Palatal, Manners.LateralTapFlap)
    let VdVelarLateralTap            = Encode("L̆", "") Voiced PulmonicConsonant(Places.Velar, Manners.LateralTapFlap)


    //==================================
    // Non-Pulmonic Consonants
    //==================================

    // Stops
    let VlBilabialStopEjective       = NPEjective(VlBilabialStop, Manners.Stop)
    let VlAveolarStopEjective        = NPEjective(VlAlveolarStop, Manners.Stop)
    let VlRetroflexStopEjective      = NPEjective(VlRetroflexStop, Manners.Stop)
    let VlPalatalStopEjective        = NPEjective(VlPalatalStop, Manners.Stop)
    let VlVelarStopEjective          = NPEjective(VlVelarStop, Manners.Stop)
    let VlUvularStopEjective         = NPEjective(VlUvularStop, Manners.Stop)
    let VlEpiglottalStopEjective     = NPEjective(VdEpiglottalStop, Manners.Stop)

    // Fricatives
    let VlBilabialFricativeEjective     = NPEjective(VlBilabialFricative, Manners.Fricative)
    let VlLabiodentalFricativeEjective  = NPEjective(VlLabiodentalFricative, Manners.Fricative)
    let VlDentalFricativeEjective       = NPEjective(VlDentalFricative, Manners.Fricative)
    let VlAlveolarFricativeEjective     = NPEjective(VlAlveolarSibFricative, Manners.Fricative)
    let VlPostalveolarFricativeEjective = NPEjective(VlPostalveolarSibFricative, Manners.Fricative)
    let VlRetroflexFricativeEjective    = NPEjective(VlRetroflexSibFricative, Manners.Fricative)
    let VlPalatalFricativeEjective      = NPEjective(VlPalatalSibFricative, Manners.Fricative)
    let VlVelarFricativeEjective        = NPEjective(VlVelarFricative, Manners.Fricative)
    let VlUvularFricativeEjective       = NPEjective(VlUvularFricative, Manners.Fricative)

    // Lateral Fricatives
    let VlPostalveolarLatFricEjective = NPEjective(VlAlveolarLateralFricative, Manners.LateralFricative)

    // Clicks
    let VlBilabialTenuisClick        = Encode("ʘ", "O\\") EjectiveAffricate(Places.Bilabial, Manners.Tenuis) Click
    let VdBilabialTenuisClick        = Encode("ʘ̬", "") Voiced EjectiveAffricate(Places.Bilabial, Manners.Tenuis) Click
    let VlDentalTenuisClick          = Encode("ǀ", "|") EjectiveAffricate(Places.Dental, Manners.Tenuis) Click
    let VdDentalTenuisClick          = Encode("ǀ̬", "") EjectiveAffricate(Places.Dental, Manners.Tenuis) Voiced Click
    let VlAlveolarTenuisClick        = Encode("ǃ", "!\\") EjectiveAffricate(Places.Alveolar, Manners.Tenuis) Click
    let VdAlveolarTenuisClick        = Encode("ǃ̬", "") EjectiveAffricate(Places.Alveolar, Manners.Tenuis) Voiced Click
    let VlPalatalTenuisClick         = Encode("ǂ", "=\\") EjectiveAffricate(Places.Palatal, Manners.Tenuis) Click
    let VdPalatalTenuisClick         = Encode("ǂ̬", "") Voiced EjectiveAffricate(Places.Palatal, Manners.Tenuis) Click

    let VlBilabialNasalClick         = Encode("ʘ̃", "") EjectiveAffricate(Places.Bilabial, Manners.Nasal) Click
    let VlDentalNasalClick           = Encode("ǀ̃", "") EjectiveAffricate(Places.Dental, Manners.Nasal) Click
    let VlAlveolarNasalClick         = Encode("ǃ̃", "") EjectiveAffricate(Places.Alveolar, Manners.Nasal) Click
    let VlPalatalNasalClick          = Encode("ǂ̃", "") EjectiveAffricate(Places.Palatal, Manners.Nasal) Click

    let VlAlveolarTenuisLateralClick = Encode("ǁ", "|\\|\\") EjectiveAffricate(Places.Alveolar, Manners.TenuisLateral) Click
    let VdAlveolarTenuisLateralClick = Encode("ǁ̬", "") Voiced EjectiveAffricate(Places.Alveolar, Manners.TenuisLateral) Click

    let VlBilabialImplosiveClick     = Encode("ɓ̥", "") EjectiveAffricate(Places.Bilabial, Manners.Implosive) Click
    let VdBilabialImplosiveClick     = Encode("ɓ", "b_<") Voiced EjectiveAffricate(Places.Bilabial, Manners.Implosive) Click
    let VlAlveolarImplosiveClick     = Encode("ɗ̥", "") EjectiveAffricate(Places.Alveolar, Manners.Implosive) Click
    let VdAlveolarImplosiveClick     = Encode("ɗ", "d_<") Voiced EjectiveAffricate(Places.Alveolar, Manners.Implosive) Click
    let VlRetroflexImplosiveClick    = Encode("ᶑ̊", "") EjectiveAffricate(Places.Retroflex, Manners.Implosive) Click
    let VdRetroflexImplosiveClick    = Encode("ᶑ", "") Voiced EjectiveAffricate(Places.Retroflex, Manners.Implosive) Click
    let VlPalatalImplosiveClick      = Encode("ʄ̊", "") EjectiveAffricate(Places.Palatal, Manners.Implosive) Click
    let VdPalatalImplosiveClick      = Encode("ʄ", "J\\_<") Voiced EjectiveAffricate(Places.Palatal, Manners.Implosive) Click
    let VlVelarImplosiveClick        = Encode("ɠ̊", "") EjectiveAffricate(Places.Velar, Manners.Implosive) Click
    let VdVelarImplosiveClick        = Encode("ɠ", "g_<") Voiced EjectiveAffricate(Places.Velar, Manners.Implosive) Click
    let VlUvularImplosiveClick       = Encode("ʛ̥", "") EjectiveAffricate(Places.Uvular, Manners.Implosive) Click
    let VdUvularImplosiveClick       = Encode("ʛ", "G\\_<") Voiced EjectiveAffricate(Places.Uvular, Manners.Implosive) Click

    //==================================
    // Pulmonic Affricates
    //==================================

    // Sibilants
    let VlAlveolarAffricate          = Encode("ts", "") PulmonicAffricate(Places.Alveolar, Manners.Sibilant)
    let VdAlveolarAffricate          = Encode("dz", "") Voiced PulmonicAffricate(Places.Alveolar, Manners.Sibilant)
    let VlPostalveolarAffricate      = Encode("t̠ʃ", "") PulmonicAffricate(Places.PalatoAlveolar, Manners.Sibilant)
    let VdPostalveolarAffricate      = Encode("d̠ʒ", "") Voiced PulmonicAffricate(Places.PalatoAlveolar, Manners.Sibilant)
    let VlRetroflexAffricate         = Encode("ʈʂ", "") PulmonicAffricate(Places.Retroflex, Manners.Sibilant)
    let VdRetroflexAffricate         = Encode("ɖʐ", "") Voiced PulmonicAffricate(Places.Retroflex, Manners.Sibilant)
    let VlAlveoloPalatalAffricate    = Encode("tɕ", "") PulmonicAffricate(Places.AlveoloPalatal, Manners.Sibilant)
    let VdAlveoloPalatalAffricate    = Encode("dʑ", "") Voiced PulmonicAffricate(Places.AlveoloPalatal, Manners.Sibilant)

    // Non-Sibilants
    let VlBilabialNSAffricate        = Encode("pɸ", "") PulmonicAffricate(Places.Bilabial, Manners.NonSibilant)
    let VdBilabialNSAffricate        = Encode("bβ", "") Voiced PulmonicAffricate(Places.Bilabial, Manners.NonSibilant)
    let VlLabioDentalNSAffricate     = Encode("p̪f", "") PulmonicAffricate(Places.LabioDental, Manners.NonSibilant)
    let VdLabioDentalNSAffricate     = Encode("b̪v", "") Voiced PulmonicAffricate(Places.LabioDental, Manners.NonSibilant)
    let VlDentalNSAffricate          = Encode("t̪θ", "") PulmonicAffricate(Places.Dental, Manners.NonSibilant)
    let VdDentalNSAffricate          = Encode("d̪ð", "") Voiced PulmonicAffricate(Places.Dental, Manners.NonSibilant)
    let VlAlveolarNSAffricate        = Encode("tɹ̝̊", "") PulmonicAffricate(Places.Alveolar, Manners.NonSibilant)
    let VdAlveolarNSAffricate        = Encode("dɹ̝", "") Voiced PulmonicAffricate(Places.Alveolar, Manners.NonSibilant)
    let VlPalatoAlveolarNSAffricate  = Encode("t̠ɹ̠̊˔", "") PulmonicAffricate(Places.PalatoAlveolar, Manners.NonSibilant)
    let VdPalatoAlveolarNSAffricate  = Encode("d̠ɹ̠˔", "") Voiced PulmonicAffricate(Places.PalatoAlveolar, Manners.NonSibilant)
    let VlPalatalNSAffricate         = Encode("cç", "") PulmonicAffricate(Places.Palatal, Manners.NonSibilant)
    let VdPalatalNSAffricate         = Encode("ɟʝ", "") Voiced PulmonicAffricate(Places.Palatal, Manners.NonSibilant)
    let VlVelarNSAffricate           = Encode("kx", "") PulmonicAffricate(Places.Velar, Manners.NonSibilant)
    let VdVelarNSAffricate           = Encode("ɡɣ", "") Voiced PulmonicAffricate(Places.Velar, Manners.NonSibilant)
    let VlUvularNSAffricate          = Encode("qχ", "") PulmonicAffricate(Places.Uvular, Manners.NonSibilant)
    let VdEpiglottalNSAffricate      = Encode("ʡʢ", "") Voiced PulmonicAffricate(Places.Pharyngeal, Manners.NonSibilant)
    let VlGlottalNSAffricate         = Encode("ʔh", "") PulmonicAffricate(Places.Glottal, Manners.NonSibilant)

    // Lateral
    let VlAlveolarLateralAffricate   = Encode("tɬ̝̊", "") PulmonicAffricate(Places.Alveolar, Manners.Lateral)
    let VdAlveolarLateralAffricate   = Encode("dɮ", "") Voiced PulmonicAffricate(Places.Alveolar, Manners.Lateral)
    let VlRetroflexLateralAffricate  = Encode("ʈɭ̊˔", "") PulmonicAffricate(Places.Retroflex, Manners.Lateral)
    let VdPalatalLateralAffricate    = Encode("cʎ̝̊", "") Voiced PulmonicAffricate(Places.Palatal, Manners.Lateral)
    let VlVelarLateralAffricate      = Encode("kʟ̝̊", "") PulmonicAffricate(Places.Velar, Manners.Lateral)
    let VdVelarLateralAffricate      = Encode("ɡʟ̝", "") Voiced PulmonicAffricate(Places.Velar, Manners.Lateral)

    //==================================
    // Ejective Affricates
    //==================================

    // Central
    let VlAlveolarEjectiveAffricate       = Encode("tsʼ", "") EjectiveAffricate(Places.Alveolar, Manners.Central)
    let VlPalatoAlveolarEjectiveAffricate = Encode("t̠ʃʼ", "") EjectiveAffricate(Places.PalatoAlveolar, Manners.Central)
    let VlRetroflexEjectiveAffricate      = Encode("ʈʂʼ", "") EjectiveAffricate(Places.Retroflex, Manners.Central)
    let VlVelarEjectiveAffricate          = Encode("kxʼ", "") EjectiveAffricate(Places.Velar, Manners.Central)
    let VlUvularEjectiveAffricate         = Encode("qχʼ", "") EjectiveAffricate(Places.Uvular, Manners.Central)

    // Lateral
    let VlAlveolarLateralEjective         = Encode("tɬʼ", "") EjectiveAffricate(Places.Alveolar, Manners.Lateral)
    let VlPalatalLateralEjective          = Encode("cʎ̝̊ʼ", "") EjectiveAffricate(Places.Palatal, Manners.Lateral)
    let VlVelarLateralEjective            = Encode("kʟ̝̊ʼ", "") EjectiveAffricate(Places.Velar, Manners.Lateral)

    let VlLabialVelarFricative       = Encode("ʍ", "W") Consonant(Categories.Other, Places.LabialVelar, Manners.Fricative)

// Pre-existing
//    let VlAlveoloPalatalFricative1   = Sound("ɕ", "") CPM(Categories.Other, Places.AlveoloPalatal, Manners.Fricative)
//    let VlAlveoloPalatalFricative    = Sound("ʑ", "") CPM(Categories.Other, Places.AlveoloPalatal, Manners.Fricative)

    let VdLabialVelarApproximant     = Encode("w", "w") Voiced Consonant(Categories.Other, Places.LabialVelar, Manners.Approximant)
    let VdLabialPalatalApproximant   = Encode("ɥ", "H") Voiced Consonant(Categories.Other, Places.LabialPalatal, Manners.Approximant)

    let SimultaneousSx               = Encode("ɧ", "x\\") Consonant(Categories.Other, Places.PostAlveolar, Manners.SibilantFricative) {
                                         Name: "Simultaneous {0} and {1}"(VlPostalveolarSibFricative.Text, VlVelarFricative.Text)
                                       }
    let VlEpiglottalFricative        = Encode("ʜ", "H\\") Consonant(Categories.Other, Places.Pharyngeal, Manners.Fricative)
    let VdEpiglottalFricative        = Encode("ʢ", "?\\") Voiced Consonant(Categories.Other, Places.Pharyngeal, Manners.Fricative)
    let VlEpiglottalPlosive          = Encode("ʡ", "<\\") Consonant(Categories.Other, Places.Pharyngeal, Manners.Plosive)

    //==================================
    // Vowels
    //==================================

    let CloseFrontUnrounded          = Encode("i", "i") Vowel(Opens.Close, Backnesses.Front)
    let CloseFrontRounded            = Encode("y", "y") Rounded Vowel(Opens.Close, Backnesses.Front)
    let CloseCentralUnrounded        = Encode("ɨ", "1") Vowel(Opens.Close, Backnesses.Central)
    let CloseCentralRounded          = Encode("ʉ", "}") Rounded Vowel(Opens.Close, Backnesses.Central)
    let CloseBackUnrounded           = Encode("ɯ", "M") Vowel(Opens.Close, Backnesses.Back)
    let CloseBackRounded             = Encode("u", "u") Rounded Vowel(Opens.Close, Backnesses.Back)

    let NearCloseFrontUnrounded      = Encode("ɪ", "I") Vowel(Opens.NearClose, Backnesses.NearFront)
    let NearCloseCentralUnrounded    = Encode("ᵻ", "I\\") Vowel(Opens.NearClose, Backnesses.Central) NonIPA


    let NearCloseFrontRounded        = Encode("ʏ", "Y") Rounded Vowel(Opens.NearClose, Backnesses.NearFront)
    let NearCloseBackRounded         = Encode("ʊ", "U") Rounded Vowel(Opens.NearClose, Backnesses.NearBack)

    let NearCloseCentralRounded      = Encode("ᵿ", "U\\") Rounded Vowel(Opens.NearClose, Backnesses.Central) NonIPA

    let CloseMidFrontUnrounded       = Encode("e", "e") Vowel(Opens.CloseMid, Backnesses.Front)
    let CloseMidFrontRounded         = Encode("ø", "2") Rounded Vowel(Opens.CloseMid, Backnesses.Front)
    let Schwa                        = Encode("ə", "@") Vowel(Opens.CloseMid, Backnesses.Central)
    let RoundedSchwa                 = Encode("ɵ", "8") Rounded Vowel(Opens.CloseMid, Backnesses.Central)
    let CloseMidBackUnrounded        = Encode("ɤ", "7") Vowel(Opens.CloseMid, Backnesses.Back)
    let CloseMidBackRounded          = Encode("o", "o") Rounded Vowel(Opens.CloseMid, Backnesses.Back)
    let MidFrontUnrounded            = Encode("ø̞", "") Vowel(Opens.Mid, Backnesses.Front)
    let MidCentralUnrounded          = Encode("ɘ", "@\\") Vowel(Opens.Mid, Backnesses.Central)
    let MidBackUnrounded             = Encode("o̞", "") Vowel(Opens.Mid, Backnesses.Back)
    let OpenMidNearFrontUnrounded    = Encode("ɛ", "E") Vowel(Opens.OpenMid, Backnesses.NearFront)
    let OpenMidNearFrontRounded      = Encode("œ", "9") Rounded Vowel(Opens.OpenMid, Backnesses.NearFront)
    let OpenMidCentral               = Encode("ɜ", "3") Vowel(Opens.OpenMid, Backnesses.Central)
    let OpenMidCentralRounded        = Encode("ɞ", "3\\") Rounded Vowel(Opens.OpenMid, Backnesses.Central)
    let OpenMidBackUnrounded         = Encode("ʌ", "V") Vowel(Opens.OpenMid, Backnesses.Back)
    let OpenMidBackRounded           = Encode("ɔ", "O") Rounded Vowel(Opens.OpenMid, Backnesses.Back)
    let NearFrontUnrounded           = Encode("æ", "{") Vowel(Opens.NearOpen, Backnesses.NearFront)
    let FrontOpenRounded             = Encode("ɶ", "&") Rounded Vowel(Opens.NearOpen, Backnesses.NearFront)
    let OpenMidSchwa                 = Encode("ɐ", "6") Rounded Vowel(Opens.NearOpen, Backnesses.Central)
    let OpenBackUnrounded            = Encode("ɑ", "A") Vowel(Opens.Open, Backnesses.Back)
    let OpenBackRounded              = Encode("ɒ", "Q") Rounded Vowel(Opens.Open, Backnesses.Back)
    let OpenCentralUnrounded         = Encode("ä", "a_\"") Vowel(Opens.Open, Backnesses.Central)
    let OpenNearFrontUnrounded       = Encode("a", "a") Vowel(Opens.Open, Backnesses.NearFront)

// There seems to be conflicting unicode symbols for the same sound
    let OpenNearFrontRounded         = Encode("ɶ", "&") Rounded Vowel(Opens.Open, Backnesses.NearFront)
//    let RhotacizedSchwa              = Sound("ɚ", "@`") Rounded Vowel(Opens.Open, Backnesses.NearFront)

  end

  let ImpossibleSounds = [
    Impossible PulmonicConsonant(Places.Pharyngeal, Manners.Nasal),
    Impossible PulmonicConsonant(Places.Glottal, Manners.Nasal),
    Impossible PulmonicConsonant(Places.Pharyngeal, Manners.Stop) Voiced,
    Impossible PulmonicConsonant(Places.Glottal, Manners.Stop) Voiced,
    Impossible PulmonicConsonant(Places.Bilabial, Manners.SibilantFricative),
    Impossible PulmonicConsonant(Places.LabioDental, Manners.SibilantFricative),
    Impossible PulmonicConsonant(Places.LinguoLabial, Manners.SibilantFricative),
    Impossible PulmonicConsonant(Places.Velar, Manners.SibilantFricative),
    Impossible PulmonicConsonant(Places.Uvular, Manners.SibilantFricative),
    Impossible PulmonicConsonant(Places.Pharyngeal, Manners.SibilantFricative),
    Impossible PulmonicConsonant(Places.Glottal, Manners.SibilantFricative),
    Impossible PulmonicConsonant(Places.Velar, Manners.Trill),
    Impossible PulmonicConsonant(Places.Glottal, Manners.Trill),
    Impossible PulmonicConsonant(Places.Velar, Manners.TapFlap),
    Impossible PulmonicConsonant(Places.Glottal, Manners.TapFlap),
    Impossible PulmonicConsonant(Places.Bilabial, Manners.LateralFricative),
    Impossible PulmonicConsonant(Places.LabioDental, Manners.LateralFricative),
    Impossible PulmonicConsonant(Places.Pharyngeal, Manners.LateralFricative),
    Impossible PulmonicConsonant(Places.Glottal, Manners.LateralFricative),
    Impossible PulmonicConsonant(Places.Bilabial, Manners.LateralApproximant),
    Impossible PulmonicConsonant(Places.LabioDental, Manners.LateralApproximant),
    Impossible PulmonicConsonant(Places.Pharyngeal, Manners.LateralApproximant),
    Impossible PulmonicConsonant(Places.Glottal, Manners.LateralApproximant),
    Impossible PulmonicConsonant(Places.Bilabial, Manners.LateralTapFlap),
    Impossible PulmonicConsonant(Places.LabioDental, Manners.LateralTapFlap),
    Impossible PulmonicConsonant(Places.Pharyngeal, Manners.LateralTapFlap),
    Impossible PulmonicConsonant(Places.Glottal, Manners.LateralTapFlap),
    Impossible EjectiveAffricate(Places.Bilabial, Manners.LateralFricative) Ejective,
    Impossible EjectiveAffricate(Places.LabioDental, Manners.LateralFricative) Ejective,
    Impossible EjectiveAffricate(Places.Pharyngeal, Manners.LateralFricative) Ejective,
    Impossible EjectiveAffricate(Places.Velar, Manners.Tenuis) Click,
    Impossible EjectiveAffricate(Places.Uvular, Manners.Tenuis) Click,
    Impossible EjectiveAffricate(Places.Pharyngeal, Manners.Tenuis) Click,
    Impossible EjectiveAffricate(Places.Velar, Manners.Nasal) Click,
    Impossible EjectiveAffricate(Places.Uvular, Manners.Nasal) Click,
    Impossible EjectiveAffricate(Places.Pharyngeal, Manners.Nasal) Click,
    Impossible EjectiveAffricate(Places.Bilabial, Manners.TenuisLateral) Click,
    Impossible EjectiveAffricate(Places.LabioDental, Manners.TenuisLateral) Click,
    Impossible EjectiveAffricate(Places.Velar, Manners.TenuisLateral) Click,
    Impossible EjectiveAffricate(Places.Uvular, Manners.TenuisLateral) Click,
    Impossible EjectiveAffricate(Places.Pharyngeal, Manners.TenuisLateral) Click,

    Impossible PulmonicAffricate(Places.Bilabial, Manners.Sibilant),
    Impossible PulmonicAffricate(Places.LabioDental, Manners.Sibilant),
    Impossible PulmonicAffricate(Places.Velar, Manners.Sibilant),
    Impossible PulmonicAffricate(Places.Uvular, Manners.Sibilant),
    Impossible PulmonicAffricate(Places.Pharyngeal, Manners.Sibilant),
    Impossible PulmonicAffricate(Places.Glottal, Manners.Sibilant),
    Impossible PulmonicAffricate(Places.Bilabial, Manners.Lateral),
    Impossible PulmonicAffricate(Places.LabioDental, Manners.Lateral),
    Impossible PulmonicAffricate(Places.Pharyngeal, Manners.Lateral),
    Impossible PulmonicAffricate(Places.Glottal, Manners.Lateral),

    Impossible EjectiveAffricate(Places.Glottal, Manners.Central),
    Impossible EjectiveAffricate(Places.Bilabial, Manners.Lateral),
    Impossible EjectiveAffricate(Places.LabioDental, Manners.Lateral),
    Impossible EjectiveAffricate(Places.Pharyngeal, Manners.Lateral),
    Impossible EjectiveAffricate(Places.Glottal, Manners.Lateral),
  ]                       									

  let AllSounds = Sounds + ImpossibleSounds

  with Diacritics
    let Centralized                  = Encode("\u0308", "_\"")
    let Advanced                     = Encode("\u031F", "_+")
    let Retracted                    = Encode("\u0320", "_-")
    let RisingTone                   = Encode("\u030C", "_R", "_/")
    let Voiceless                    = Encode("\u0325", "_0")
    let Implosive                    = Encode(null, "_<")
    let Syllabic                     = Encode("\u0329", "_=", "=")
    let Ejective                     = Encode("\u02BC", "_>")
    let Pharyngealized               = Encode("\u02E4", "_?\\")
    let FallingTone                  = Encode("\u0302", "_\\", "_F")
    let NonSyllabic                  = Encode("\u032F", "_^")
    let NoAudibleRelease             = Encode("\u031A", "_}")
    let RhoticHook                   = Encode("\u02DE", "`")
    let Nasalized                    = Encode("\u0303", "_~", "~")
    let AdvancedTongueRoot           = Encode("\u0318", "_A")
    let Apical                       = Encode("\u033A", "_a")
    let ExtraLowTone                 = Encode("\u030F", "_B")
    let LowRisingTone                = Encode("\u1DC5", "_B_L")
    let LessRounded                  = Encode("\u031C", "_c")
    let Dental                       = Encode("\u032A", "_d")
    let VelarizedOrPharyngealized    = Encode("\u0334", "_e")
    let GlobalFall                   = Encode("↘", "<F>")
    let Velarized                    = Encode("\u02E0", "_G")
    let HighTone                     = Encode("\u0301", "_H")
    let HighRisingTone               = Encode("\u1DC4", "_H_T")
    let Aspirated                    = Encode("\u02B0", "_h")
    let Palatalized                  = Encode("\u02B2", "_j", "'")
    let CreakyVoiced                 = Encode("\u0330", "_k")
    let LowTone                      = Encode("\u0300", "_L")
    let LateralRelease               = Encode("\u02E1", "_l")
    let MidTone                      = Encode("\u0304", "_M")
    let Laminal                      = Encode("\u033B", "_m")
    let LinguoLabial                 = Encode("\u033C", "_N")
    let NasalRelease                 = Encode("\u207F", "_n")
    let MoreRounded                  = Encode("\u0339", "_O")
    let Lowered                      = Encode("\u031E", "_o")
    let RetractedTongueRoot          = Encode("\u0319", "_q")
    let GlobalRise                   = Encode("↗", "<R>")
    let RisingFallingTone            = Encode("\u1DC8", "_R_F")
    let Raised                       = Encode("\u031D", "_r")
    let ExtraHighTone                = Encode("\u030B", "_T")
    let BreathyVoiced                = Encode("\u0324", "_t")
    let Voiced                       = Encode("\u032C", "_v")
    let Labialized                   = Encode("\u02B7", "_W")
    let ExtraShort                   = Encode("\u02D8", "_X")
    let MidCentralized               = Encode("\u033D", "_x")
    let Downstep                     = Encode("↓", "!")
    let Upstep                       = Encode("↑", "^")

    let SylableBreak                 = Encode(".", ".")
    let PrimaryStress                = Encode("ˈ", "\"")
    let SecondaryStress              = Encode("ˌ", "%")

    let Long                         = Encode("ː", ":")
    let HalfLong                     = Encode("ˑ", ":\\")
    let Separator                    = Encode("", "-")

    let UndefinedEscapeCharacter     = Encode(null, "*")
    let IndeterminacyinFrenchVowels  = Encode(null, "/")
    let BeginNonsegmentalNotation    = Encode(null, "<")

    let Voicedepiglottalfricative    = Encode("ʢ", "<\\")
    let Endnonsegmentalnotation      = Encode("", ">")
    let Postalveolarclick            = Encode("ǃ", "!\\")
    let MinorGroup                   = Encode("|", "|")
    let Dentalclick                  = Encode("ǀ", "|\\")
    let MajorGroup                   = Encode("‖", "||")
    let Alveolarlateralclick         = Encode("ǁ", "|\\|\\")
    let Palatalclick                 = Encode("ǂ", "#NAME?")
    let Linkingmark                  = Encode("‿", "-\\")

  /*
      let RhotacizedOpenMidCentral     = Set("ɝ", "", Places.None, Manners.None, Props.None)
      let VelarizedVdAlveolarLateral   = Set("ɫ", "", Places.None, Manners.None, Props.None)
  */


    let VoicelessDescender           = Encode("\u030A", "")
    let CombiningMacron              = Encode("\u0331", "")
    let TieBarBelow                  = Encode("\u035C", "")
    let TieBarAbove                  = Encode("\u0361", "")
    let ReadyMadeCombination         = Encode("\u026B", "")
    let Becomes                      = Encode("→", "")
  end

  //======================================================================

  let ShowSound(ref sound) = Span {
    Style.IPAFamily,
    sound.Text
  }

  let SoundText(ref sound) = ShowSound(sound) {
    Popup: SoundPopup.Call(sound),
    Link: EachSymbol.FullSymbolName,
  }

  let SoundName(sound) = Span {
    if (sound.Name)
      sound.Name
    elseif (sound.Category == Categories.Vowel)
      Lang.OpenNames[sound.Open],
      Space,
      Lang.BacknessNames[sound.Backness],
      Space,
      if (sound.IsRounded)
        Lang.Rounded
      else
        Lang.Unrounded
      end,
    else
      if (sound.IsVoiced)
        Lang.Voiced
      else
        Lang.Voiceless
      end,
      Space,
      Lang.PlaceNames[sound.Place],
      Space,
      Lang.MannerNames[sound.Manner]
    end,
    if (sound.IsPulmonic)
      Space,
      Lang.Pulmonic,
    end,
    Space,
    if (sound.Category != Categories.Other)
      Lang.CategoryNames[sound.Category],
    end
  }

  let ShowCodePoint(c) = {TextFamily: TextFamilies.Consolas, TextRadix: 16, TextDigits: 4} Type.Integer(c)

  let CodePoints(text) = Span {
    Separator: Lang.Separator,
    if (text)
      ShowCodePoint(each text)
    end
  }

  let SAMPA(sound) = Span {
    TextFamily: TextFamilies.Consolas,
    sound.Sampa,
    if (sound.Alt)
      "Alt: ",
      sound.Alt
    end
  }
  //======================================================================

  let BoxSize  = Type.Size(20 pts, 20 pts)
  let CellSize = Type.Size(BoxSize.Width * 2, BoxSize.Height)

  let SoundBox(sound) = Canvas {
    HAlign: HAligns.Center,
    Size: BoxSize,
    if (sound.Text)
      TextHeight: BoxSize.Height - 4 pts,
      SoundText(sound)
    else
      Style.ImpossibleBackground
    end
  }

  let ShowBox(sound) = SoundBox(sound) {
    if (sound.IsVoiced)
      X: BoxSize.Width
    end
  }

  let SoundBlock(matches) = Cell {
    Style.SoundBottom,
    if (matches.Length > 0)
      if (matches.Length == 1 and matches[0].IsImpossible)
        Style.ImpossibleBackground
      else
        TextHeight: 1 pts,
        Span {
          Canvas {
            Size: CellSize,
            ShowBox(each matches)
          }
        }
      end
    end
  }

  let PulmonicCell(place, manner) = SoundBlock(AllSounds.FindSlice(MatchPulmonicManner {Place: place, Manner: manner}))

  let PlaceHeader(place) = Style.HeaderCell(Lang.PlaceNames[place])

  let FindPulmonicManner(sound, data) = sound.IsPulmonic and sound.Category == Categories.Consonant && sound.Manner == data.Manner
  let FindManner(manner) = Sounds.Contains(FindPulmonicManner {Manner: manner})
  let PulmonicManners    = Manners.FindSlice(FindManner)

  let PulmonicRow(manner) = Row {
    Cell {
      VAlign: VAligns.Center,
      EdgeR: 0.5 pts,
      Style.TitleBackground,
      PaddingLR: 2 pts,
      TextHeight: 7 pts,
      Lang.MannerNames[manner]
    },
    PulmonicCell(each PulmonicPlaces, manner)
  }

  let PulmonicTable = Block {
    Table {
      Style.TableEdge,
      Columns: [(45 pts) {EdgeR: 0.5 pts}] +
               [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * PulmonicPlaces.Length,

      Style.TitleBar(Lang.PConsonants, PulmonicPlaces.Length+1),
      Row {
        TextHeight: 10 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(Lang.Labial) {ColumnSpan: 3},
        Style.HeaderCell(Lang.Coronal) {ColumnSpan: 4},
        Style.HeaderCell(Lang.Dorsal) {ColumnSpan: 3},
        Style.HeaderCell(Lang.Laryngeal) {ColumnSpan: 2},
      },
      Row {
        TextHeight: 6 pts,
        Style.HeaderCell(Bold Lang.Manner) {HAlign: HAligns.Left},
        PlaceHeader(each PulmonicPlaces)
      },
      PulmonicRow(each PulmonicManners),
    },
    Style.TableNotes {
//      Lang.PulmonicSymbols(SoundText(Sounds.VdGlottalFricative)),
      Space,
      Lang.Impossible,
    },
  }
  //======================================================================

  let MatchNonPulmonic(sound)  = sound.IsClick or sound.IsEjective or sound.Manner == Manners.Implosive
  let MatchPlace(sound, data)  = MatchNonPulmonic(sound) and sound.Place == data.Place
  let ContainsNonPlaces(place) = Sounds.Contains(MatchPlace {Place: place})
  let NonPulmonicPlaces        = Places.FindSlice(ContainsNonPlaces)

  let MatchConsonant(sound, data)  = MatchNonPulmonic(sound) and sound.Place == data.Place and sound.Manner == data.Manner
  let MatchClick(sound, data)      = sound.IsClick and MatchConsonant(sound, data)
  let MatchEjective(sound, data)   = sound.IsEjective and MatchConsonant(sound, data)
  let MatchImplosive(sound, data)  = sound.Manner == Manners.Implosive and MatchConsonant(sound, data)
  let NPCell(match, manner, place) = SoundBlock(AllSounds.FindSlice(match {Manner: manner, Place: place}))

  let NPRow(name, match, manner, namerow) = Row {
    Cell {
      EdgeR: 0.5 pts,
      VAlign: VAligns.Center,
      if (namerow == EachIndex)
        name
      end
    },
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.MannerNames[manner]
    },
    NPCell(match, manner, each NonPulmonicPlaces)
  }

  let NonPulmonicTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [50 pts, (75 pts) {EdgeR: 0.5 pts}] +
               [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * NonPulmonicPlaces.Length,

      Style.TitleBar(Lang.NPConsonants, NonPulmonicPlaces.Length+2),
      Row {
        TextHeight: 6 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(Empty),
        PlaceHeader(each NonPulmonicPlaces)
      },
      NPRow(Lang.Ejective, MatchEjective, each [Manners.Stop, Manners.Fricative, Manners.LateralFricative], 1),
      NPRow(Lang.Click, MatchClick, each [Manners.Tenuis, Manners.Nasal, Manners.TenuisLateral], 1),
      NPRow(Lang.Implosive, MatchImplosive, each [Manners.Implosive], 0),
    },
    Style.TableNotes {
      Lang.ConsonantSymbols,
      Space,
      Lang.Impossible,
    },
  }
  //======================================================================

  let MatchAffricate(sound, data)            = sound.Category == data.Category and sound.Place == data.Place and sound.Manner == data.Manner
  let AffricateCell(category, manner, place) = SoundBlock(AllSounds.FindSlice(MatchAffricate {Category: category, Place: place, Manner: manner}))

  let AffricateRow(category, places, manner) = Row {
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.MannerNames[manner]
    },
    AffricateCell(category, manner, each places)
  }

  let MatchAffricatePlace(sound, data) = sound.Category == data.Category and sound.Place == data.Place and sound.IsPulmonic != true
  let ContainsPlaces(place, data)      = Sounds.Contains(MatchAffricatePlace {Place: place, Category: data.Category})
  let FindPlaceCategory(category)      = Places.FindSlice(ContainsPlaces {Category: category})

  let AffricateTable(category, manners, notes) begin
    var places = FindPlaceCategory(category);
    return Block {
      Table {
        HAlign: HAligns.Center,
        Style.TableEdge,
        Columns: [(40 pts) {EdgeR: 0.5 pts}] +
                 [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * places.Length,

        Style.TitleBar(Lang.CategoryNames[category], places.Length+1),
        Row {
          TextHeight: 6 pts,
          Style.HeaderCell(Empty),
          PlaceHeader(each places)
        },
        AffricateRow(category, places, each manners),
      },
      Style.TableNotes {
        notes,
      },
    }
  end
  //======================================================================

  let MatchVowelPair(sound, data) = sound.Category == Categories.Vowel and sound.Open == data.Open and sound.Backness == data.Backness

  let ShowVowel(sound) = SoundBox(sound) {
    if (sound.IsRounded)
      X: BoxSize.Width
    end
  }

  let VowelBlock(matches) = Cell {
    Style.SoundBottom,
    HAlign: HAligns.Center,
    TextHeight: BoxSize.Height,
    if (matches.Length == 2)
      Span {
        SoundText(matches[0]),
        " • " {TextColor: Colors.LightGray},
        SoundText(matches[1]),
      }
    else
      SoundText(matches[0]),
    end
  }

  let VowelCell(open, backness) = VowelBlock(Sounds.FindSlice(MatchVowelPair {Open: open, Backness: backness}))

  let VowelRow(open) = Row {
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.OpenNames[open]
    },
    VowelCell(open, each Backnesses)
  }

  let VowelTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [(1 inch){EdgeR: 0.5 pts}] + [BoxSize.Width*3 {EdgeR: 0.25 pts}] * Backnesses.Length,
      Style.TitleBar(Lang.Vowels, Backnesses.Length+1),
      Row {
        TextHeight: 10 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(each Lang.BacknessNames)
      },
      VowelRow(each Opens)
    },
    Style.TableNotes {
      Lang.VowelSymbols,
    },
  }
  //======================================================================

  let MatchOther(sound) = sound.Category == Categories.Other

  let OtherColumns = 2

  let OtherCell(sound) = {
    Cell {
      VAlign: VAligns.Center,
      HAlign: HAligns.Center,
      TextHeight: 20 pts,
      SoundText(sound),
    },
    Cell {
      VAlign: VAligns.Center,
      SoundName(sound)
    }
  }

  let OtherRow(sounds) = Row {
    OtherCell(each sounds)
  }

  let OtherTable = Block {
    Table {
      Style.TableEdge,
      Columns: [BoxSize.Width, Metrics.Content.Width * 0.5 - BoxSize.Width] * OtherColumns,
      Style.TitleBar(Lang.OtherSymbols, OtherColumns*2),
      OtherRow(each (Sounds.FindSlice(MatchOther) / OtherColumns)),
    },
    Style.TableNotes {
    }
  }
  //======================================================================

  let SoundColumns = 4
  let SoundSize    = 40 pts

  let SoundCell(sound) = Cell {
    Edge: 0.25 pts {Color: Colors.LightGray},
    Padding: 2 pts,
    ParAlignment: ParAlignments.Center,
    Paragraph {
      LocationMark: EachSymbol.FullSymbolName,
      SpaceBefore: 8 pts,
      SpaceAfter: 8 pts,
      TextHeight: SoundSize,
      ShowSound(sound),
      SpaceAfter: SoundSize * 0.125
    },
    Paragraph {
      TextHeight: 10 pts,
      SoundName(sound),
    },
    Paragraph {
      TextHeight: 8 pts,
      ParBackground: 95%,
      CodePoints(sound.Text),
    },
    Paragraph {
      TextHeight: 8 pts,
      if (sound.Sampa and sound.Sampa.Length > 0)
        ParBackground: 90%,
        SAMPA(sound),
      elseif (sound.Text.Length == 1)
        ParBackground: Colors.Red,
      end
    },
  }

  let SoundRow(sounds) = Row {
    SoundCell(each sounds)
  }

  let SoundTable = Block {
    Table {
      Columns: [Metrics.Content.Width / SoundColumns] * SoundColumns,
      Style.TitleBar(Lang.IPAListing, SoundColumns),
      SoundRow(each (Sounds / SoundColumns))
    },
    Style.TableNotes {
    }
  }

  let SoundPopup(sound) = Table {
    Columns: [2 inches],
    Row {
      SoundCell(sound)
    }
  }
  //======================================================================

  let ShowGroups = Block {
    PulmonicTable,
    AffricateTable(Categories.PulmonicAffricate, [Manners.Sibilant, Manners.NonSibilant, Manners.Lateral], Lang.Impossible),
    AffricateTable(Categories.EjectiveAffricate, [Manners.Central, Manners.Lateral], null),
    PageBreak,
    NonPulmonicTable,
    OtherTable,
    VowelTable,
  }
  //======================================================================
end
