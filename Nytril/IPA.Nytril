using Format, Units, FeatureSet, Math;
//======================================================================

enum Opens {
  Close     {Name: Lang.Close},
  NearClose {Name: Lang.NearClose},
  CloseMid  {Name: Lang.CloseMid},
  Mid       {Name: Lang.Mid},
  OpenMid   {Name: Lang.OpenMid},
  NearOpen  {Name: Lang.NearOpen},
  Open      {Name: Lang.Open},
}

enum Backnesses {
  Front     {Name: Lang.Front},
  NearFront {Name: Lang.NearFront},
  Central   {Name: Lang.Central},
  NearBack  {Name: Lang.NearBack},
  Back      {Name: Lang.Back},
}

enum Places {
  Bilabial       {Name: Lang.Bilabial},
  Labial         {Name: Lang.Labial},
  LabialVelar    {Name: Lang.LabialVelar},
  LabialPalatal  {Name: Lang.LabialPalatal},
  LabioDental    {Name: Lang.LabioDental},
  LinguoLabial   {Name: Lang.LinguoLabial},
  Dental         {Name: Lang.Dental},
  Alveolar       {Name: Lang.Alveolar},
  AlveoloPalatal {Name: Lang.AlveoloPalatal},
  PostAlveolar   {Name: Lang.PostAlveolar},
  Retroflex      {Name: Lang.Retroflex},
  Palatal        {Name: Lang.Palatal},
  PalatoAlveolar {Name: Lang.PalatoAlveolar},
  Velar          {Name: Lang.Velar},
  Uvular         {Name: Lang.Uvular},
  Pharyngeal     {Name: Lang.Pharyngeal},
  Glottal        {Name: Lang.Glottal},
}

flags FeatureSet {
  NoFeature   {Name: Lang.NoFeatures},
  Rounded     {Name: Lang.Rounded},
  Vocoid      {Name: Lang.Vocoid},
  Semivowel   {Name: Lang.SemiVowel},
  LongVowel   {Name: Lang.LongVowel},
  Voiced      {Name: Lang.Voiced},
  Velarized   {Name: Lang.Velarized},
  Ejective    {Name: Lang.Ejective},
  Pulmonic    {Name: Lang.Pulmonic},
  Nasal       {Name: Lang.Nasal},
  Tenuis      {Name: Lang.Tenuis},
  Lateral     {Name: Lang.Lateral},
  Sibilant    {Name: Lang.Sibilant},
  Fricative   {Name: Lang.Fricative},
  Approximant {Name: Lang.Approximant},
  Implosive   {Name: Lang.Implosive},
  Central     {Name: Lang.Central},
  TapFlap     {Name: Lang.TapFlap},
  Trill       {Name: Lang.Trill},
  Stop        {Name: Lang.Stop},
  Click       {Name: Lang.Click},
  Affricate   {Name: Lang.Affricate},
  Vowel       {Name: Lang.Vowel},
  Rhotic      {Name: Lang.Rhotic},
  Occlusive   {Name: Lang.Occlusive},
  Strident    {Name: Lang.Strident},
  Obstruent   {Name: Lang.Obstruent},
  Continuant  {Name: Lang.Continuant},
  Vibrant     {Name: Lang.Vibrant},
  Liquid      {Name: Lang.Liquid},
}
//======================================================================

class CharacterClass {
  var Character,
      Segment;

  Constructor(character, segment) {
    Character = character;
    Segment   = segment;
  }

  ShowLetter = Span {
    Popup: this;
    Link: Segment.GlobalVariablePath;
    Character;
  };

  override GetPopup = Segment.GetPopup;
}
//======================================================================

class SegmentClass {
  var Ipa,
      Sampa,
      Impossible,
      Punctuation,
      Gap,
      Description,
      Features,
      Diacritic,
      Open,
      Backness,
      Place;

  Constructor(ipa, sampa, impossible=false) = {
    Ipa         = ipa;
    Sampa       = sampa;
    Impossible  = impossible;
    Punctuation = false;
    Diacritic   = false;
    Gap         = false;
    Features    = NoFeature;
  };

  MatchVowelAny(feature, open) = Features.HasFlagMask(Vowel LongVowel Nasal, feature | Vowel) and Open == open;

  MatchVowelPair(feature, open, backness) = MatchVowelAny(feature, open) and Backness == backness;

  SegmentName = Span {
    if (Features.HasFlag(Vowel)) {
      Open;
      Space;
      Backness;
    }
    else
      Place;
    Space;
    Span {
      Separator: Space;
      if (Diacritic)
        Description;
      else
        each Features;
    }
  };

  GetBlock = Canvas {
    Width: 10 pts;
    Height: 8 pts;
    ShowSegment;
  };

  Display(location) = Block {
    ParAlignment: ParAlignments.Center;
    Paragraph {
      LocationMark: location;
      SpaceBefore: 8 pts;
      SpaceAfter: 8 pts;
      TextHeight: DocMetrics.SegmentSize;
      Style.IPAFamily;
      SpaceAfter: DocMetrics.SegmentSize * 0.125;
      Ipa;
    };
    Paragraph {
      TextHeight: 8 pts;
      ParBackground: 95%;
      Style.MonoFamily;
      TextRadix: 16;
      TextDigits: 4;
      Span {
        Separator: ", ";
        if (exists Ipa)
          Integer(each Ipa);
      }
    };
/*
    Paragraph {
      ParBackground: Colors.AliceBlue;
      ParAlignment: ParAlignments.Center;
      Separator: ", ";
      (each FindSlice(SegmentGroups, r => r.Matches(this))).Name;
    };
*/
    Paragraph {
      TextHeight: 10 pts;
      if (Gap)
        Lang.Gap;
      else
        SegmentName;
    };
  };

  SegmentToCharacter {
    if (Punctuation)
      return new CharacterClass(Ipa, this);

    var f = Math.FindIndex(Results.UniqueSegments, s => s == this);
    if (f.Length >= 1)
      return new CharacterClass(Nexus.CharacterList[f[0]], this);
    else
      return new CharacterClass('?', IPA.NoSegment);
  }

  ShowSegment() = Span {
    Style.IPAFamily;
    Popup: this;
    Link: GlobalVariablePath;
    if (Impossible) {
      System.Assert(false, Lang.Impossible);
      TextColor: Colors.Red;
    }
    else if (Gap)
      TextColor: Colors.LightGray;
    if (Diacritic)
      "  ";
    Ipa;
  };

  override GetPopup = Frame {
    if (exists Features) {
      Width: 2 inches;
      Display(null);
    }
    else
      "Separator";
  };
}
//======================================================================

class PunctuationClass: SegmentClass {
  Constructor(ipa, sampa=null) {
    super.Constructor(ipa, sampa ?? ipa);
    Punctuation = true;
  }
}
//======================================================================

class ImpossibleClass: SegmentClass {
  Constructor(features, place) {
    super.Constructor(Empty, null);
    Features   = features;
    Place      = place;
    Impossible = true;
  }
}
//======================================================================

class DiacriticClass: SegmentClass {
  Constructor(description, ipa, sampa) {
    super.Constructor(ipa, sampa);
    Diacritic   = true;
    Description = description;
  }
}
//======================================================================

class ConsonantClass: SegmentClass {
  Constructor(features, place, ipa, sampa) {
    super.Constructor(ipa, sampa);
    Features = features;
    Place    = place;
  }
}
//======================================================================

class VowelClass: SegmentClass {
  Constructor(features, open, backness, ipa, sampa) {
    super.Constructor(ipa, sampa);
    Features = features | Vowel;
    Open     = open;
    Backness = backness;
  }
}
//======================================================================

with IPA {
  NoSegment       = new SegmentClass(Chars.bigotimes, "!?", true);
  SpaceSegment    = new PunctuationClass(" ");

  with Segments {
    GapSegment      = new PunctuationClass("-") {Gap: true};

    SylableBreak     = new PunctuationClass(".");
    PrimaryStressAlt = new PunctuationClass("'", "'");
    PrimaryStress    = new PunctuationClass("ˈ", "'");
    SecondaryStress  = new PunctuationClass("ˌ", "%");

    //==================================
    // Extra segments found in word list
    //==================================


    rn        = new ConsonantClass(Nasal Voiced Pulmonic Fricative, Places.Uvular, "r̃", "r~");

// French Cold "Froid"  Same as SAMPA "R"?
//    r_nasal = new ConsonantClass(Nasal Voiced Pulmonic Fricative, Places.Uvular, "ʁ", "r~");

    //==================================
    // Pulmonic Consonants
    //==================================

    // Nasal					
    VlBilabialNasal              = new ConsonantClass(Pulmonic Nasal, Places.Bilabial, "m̥", "m_0");
    m                            = new ConsonantClass(Voiced Pulmonic Nasal Occlusive, Places.Bilabial, "m", "m");
    VdLabioDentalNasal           = new ConsonantClass(Voiced Pulmonic Nasal Occlusive, Places.LabioDental, "ɱ", "F");
    VdLinguoLabioNasal           = new ConsonantClass(Voiced Pulmonic Nasal, Places.LinguoLabial, "n̼", "m_d");
    VlAlveolarNasal              = new ConsonantClass(Pulmonic Nasal, Places.Alveolar, "n̥", "n_0");
    VdApicalDentalNasalStop      = new ConsonantClass(Pulmonic Nasal Stop, Places.Dental, "n̪", "");  // Check properties

    n                            = new ConsonantClass(Voiced Pulmonic Nasal Occlusive, Places.Alveolar, "n", "n");
    VlRetroFlexNasal             = new ConsonantClass(Pulmonic Nasal, Places.Retroflex, "ɳ̊", "n`_0");
    VdRetroFlexNasal             = new ConsonantClass(Voiced Pulmonic Nasal Occlusive, Places.Retroflex, "ɳ", "n`");
    VlPalatalNasal               = new ConsonantClass(Pulmonic Nasal, Places.Palatal, "ɲ̊", "J_0");
    VdPalatalNasal               = new ConsonantClass(Voiced Pulmonic Nasal Occlusive, Places.Palatal, "ɲ", "J");
    VlVelarNasal                 = new ConsonantClass(Pulmonic Nasal, Places.Velar, "ŋ̊", "N_0");
    nya                          = new ConsonantClass(Voiced Pulmonic Nasal Occlusive, Places.Velar, "ŋ", "N");

    nywa                         = new ConsonantClass(Voiced Pulmonic Nasal Stop, Places.Labial, "ŋʷ", "");  // Check properties


    VdUvularNasal                = new ConsonantClass(Voiced Pulmonic Nasal Occlusive, Places.Uvular, "ɴ", "N\\");
														
    // Stop
    p                            = new ConsonantClass(Pulmonic Stop Occlusive, Places.Bilabial, "p", "p");
    b                            = new ConsonantClass(Voiced Pulmonic Stop Occlusive, Places.Bilabial, "b", "b");
    VlLabioDentalStop            = new ConsonantClass(Pulmonic Stop, Places.LabioDental, "p̪", "p_d");
    VdLabioDentalStop            = new ConsonantClass(Voiced Pulmonic Stop, Places.LabioDental, "b̪", "b_d");
    VlLinguoLabialStop           = new ConsonantClass(Pulmonic Stop, Places.LinguoLabial, "t̼", "");
    VdLinguoLabialStop           = new ConsonantClass(Voiced Pulmonic Stop, Places.LinguoLabial, "d̼", "");
    VdAlveolarStop               = new ConsonantClass(Voiced Stop, Places.Alveolar, "dː", "");  // Check


    t                            = new ConsonantClass(Pulmonic Stop Occlusive, Places.Alveolar, "t", "t");

    VlDentalAlveolar             = new ConsonantClass(Pulmonic, Places.Dental, "tː", "t:");  // Check properties



    d                            = new ConsonantClass(Voiced Pulmonic Stop Occlusive, Places.Alveolar, "d", "d");
    VlRetroflexStop              = new ConsonantClass(Pulmonic Stop Occlusive, Places.Retroflex, "ʈ", "t`");
    VdRetroflexStop              = new ConsonantClass(Voiced Pulmonic Stop Occlusive, Places.Retroflex, "ɖ", "d`");
    tya                          = new ConsonantClass(Pulmonic Stop Occlusive, Places.Palatal, "c", "c");
    VdPalatalStop                = new ConsonantClass(Voiced Pulmonic Stop Occlusive, Places.Palatal, "ɟ", "J\\");
    k                            = new ConsonantClass(Pulmonic Stop Occlusive, Places.Velar, "k", "k");

    kk                           = new ConsonantClass(Velarized Pulmonic, Places.Velar, "kː", "k:");


    kw                           = new ConsonantClass(Pulmonic Stop Occlusive, Places.Labial, "kʷ", "k_W");
    kh                           = new ConsonantClass(Pulmonic Stop, Places.Velar, "kʰ", "k_h");  // Check properties


    tt                           = new ConsonantClass(Pulmonic Stop, Places.Alveolar, "tʰ", "t_h");  // Check properties



    g                            = new ConsonantClass(Voiced Pulmonic Stop Occlusive, Places.Velar, "ɡ", "g");
    j                            = new ConsonantClass(Voiced Pulmonic Stop Occlusive, Places.Velar, "g", "g");
    gw                           = new ConsonantClass(Voiced Pulmonic Stop Occlusive, Places.Labial, "ɡʷ", "g_W");

    VlUvularStop                 = new ConsonantClass(Pulmonic Stop Occlusive, Places.Uvular, "q", "q");
    VdUvularStop                 = new ConsonantClass(Voiced Pulmonic Stop Occlusive, Places.Uvular, "ɢ", "G\\");
    VdEpiglottalStop             = new ConsonantClass(Pulmonic Stop, Places.Pharyngeal, "ʡ", ">\\");
    GlottalStop                  = new ConsonantClass(Pulmonic Stop, Places.Glottal, "ʔ", "?");
		
    // Sibilant Fricative										
    s                            = new ConsonantClass(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Alveolar, "s", "s");
    zz                           = new ConsonantClass(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Alveolar, "z", "z");
    shh                          = new ConsonantClass(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.PostAlveolar, "ʃ", "S");
    gzah                         = new ConsonantClass(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.PostAlveolar, "ʒ", "Z");
    VlRetroflexSibFricative      = new ConsonantClass(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Retroflex, "ʂ", "s`");
    VdRetroflexSibFricative      = new ConsonantClass(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Retroflex, "ʐ", "z`");
    VlPalatalSibFricative        = new ConsonantClass(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Palatal, "ɕ", "s\\");
    VdPalatalSibFricative        = new ConsonantClass(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Palatal, "ʑ", "z\\");

    // Fricative										
    VlBilabialFricative          = new ConsonantClass(Pulmonic Fricative Obstruent Continuant, Places.Bilabial, "ɸ", "p\\");
    bb                           = new ConsonantClass(Voiced Pulmonic Fricative Obstruent Continuant, Places.Bilabial, "β", "B");
    f                            = new ConsonantClass(Pulmonic Fricative Obstruent Continuant Strident, Places.LabioDental, "f", "f");
    v                            = new ConsonantClass(Voiced Pulmonic Fricative Obstruent Continuant Strident, Places.LabioDental, "v", "v");
    VlLinguoLabialFricative      = new ConsonantClass(Pulmonic Fricative, Places.LinguoLabial, "θ̼", "");
    VdLinguoLabialFricative      = new ConsonantClass(Voiced Pulmonic Fricative, Places.LinguoLabial, "ð̼", "");
    th                           = new ConsonantClass(Pulmonic Fricative Obstruent Continuant, Places.Dental, "θ", "T");
    dd                           = new ConsonantClass(Voiced Pulmonic Fricative Obstruent Continuant, Places.Dental, "ð", "D");
    VlAlveolarFricative          = new ConsonantClass(Pulmonic Fricative, Places.Alveolar, "θ̠", "");
    VdAlveolarFricative          = new ConsonantClass(Voiced Pulmonic Fricative, Places.Alveolar, "ð̠", "");
    VlPostaveolarFricative       = new ConsonantClass(Pulmonic Fricative, Places.PostAlveolar, "ɹ̠̊", "");
    VdPostalveolarFricative      = new ConsonantClass(Voiced Pulmonic Fricative, Places.PostAlveolar, "ɹ̝̊", "");
    VdRetroflexFricative         = new ConsonantClass(Voiced Pulmonic Fricative, Places.Retroflex, "ɻ˔","");
    sh                           = new ConsonantClass(Pulmonic Fricative Obstruent Continuant, Places.Palatal, "ç", "C");
    VdPalatalFricative           = new ConsonantClass(Voiced Pulmonic Fricative Obstruent Continuant, Places.Palatal, "ʝ", "j\\");
    xha                          = new ConsonantClass(Pulmonic Fricative Obstruent Continuant, Places.Velar, "x", "x");
    juh                          = new ConsonantClass(Voiced Pulmonic Fricative Obstruent Continuant, Places.Velar, "ɣ", "G");
    VlUvularFricative            = new ConsonantClass(Pulmonic Fricative Obstruent Continuant Strident, Places.Uvular, "χ", "X");
    rr                           = new ConsonantClass(Voiced Pulmonic Fricative Obstruent Continuant Strident Rhotic Liquid, Places.Uvular, "ʁ", "R");
    VlPharyngealFricative        = new ConsonantClass(Pulmonic Fricative, Places.Pharyngeal, "ħ", "X\\");
    VdPharyngealFricative        = new ConsonantClass(Voiced Pulmonic Fricative, Places.Pharyngeal, "ʕ", "?\\");
    h                            = new ConsonantClass(Pulmonic Fricative, Places.Glottal, "h", "h");
    VdGlottalFricative           = new ConsonantClass(Voiced Pulmonic Fricative, Places.Glottal, "ɦ", "h\\");
														
    // Approximant										
    VlLabioDentalApproximant     = new ConsonantClass(Pulmonic Approximant, Places.LabioDental, "ʋ̥", "");
    VdLabioDentalApproximant     = new ConsonantClass(Voiced Pulmonic Approximant Vocoid Approximant, Places.LabioDental, "ʋ", "v\\");
    VlPostalveolarApproximant    = new ConsonantClass(Pulmonic Approximant, Places.Alveolar, "ɹ̥", "");
    VdPostalveolarApproximant    = new ConsonantClass(Voiced Pulmonic Approximant Vocoid Rhotic Liquid, Places.Alveolar, "ɹ", "r\\");
    VlRetroflexApproximant       = new ConsonantClass(Pulmonic Approximant, Places.Retroflex, "ɻ̊", "");
    VdRetroflexApproximant       = new ConsonantClass(Voiced Pulmonic Approximant Vocoid Rhotic Liquid, Places.Retroflex, "ɻ", "r\\`");
    VlPalatalApproximant         = new ConsonantClass(Pulmonic Approximant, Places.Palatal, "j̊", "");
    jg                           = new ConsonantClass(Voiced Pulmonic Approximant Vocoid Semivowel Continuant, Places.Palatal, "j", "j");

    jn                           = new ConsonantClass(Nasal Approximant, Places.Palatal, "j̃", "j~");  // Check properties


    VlVelarApproximant           = new ConsonantClass(Pulmonic Approximant, Places.Velar, "ɰ̊", "");
    VdVelarApproximant           = new ConsonantClass(Voiced Pulmonic Approximant Vocoid Semivowel Continuant, Places.Velar, "ɰ", "M\\");
    VdGlottalApproximant         = new ConsonantClass(Voiced Pulmonic Approximant, Places.Glottal, "ʔ̞", "");
														
    // Tap or Flap										
    VdBilabialDentalFlap         = new ConsonantClass(Voiced Pulmonic TapFlap, Places.Bilabial, "ⱱ̟", "");
    VdLabioDentalFlap            = new ConsonantClass(Voiced Pulmonic TapFlap Vibrant, Places.LabioDental, "ⱱ", "");
    VdLingualLabialStop          = new ConsonantClass(Voiced Pulmonic TapFlap, Places.LinguoLabial, "ɾ̼", "");
    VlAlveolarFlap               = new ConsonantClass(Pulmonic TapFlap, Places.Alveolar, "ɾ̥", "");
    er                           = new ConsonantClass(Voiced Pulmonic TapFlap Rhotic Liquid Vibrant, Places.Alveolar, "ɾ", "4");
    VlRetroflexFlap              = new ConsonantClass(Pulmonic TapFlap, Places.Retroflex, "ɽ̊", "");
    VdRetroflexFlap              = new ConsonantClass(Voiced Pulmonic TapFlap Rhotic Liquid Vibrant, Places.Retroflex, "ɽ", "r`");
    VdUvularFlap                 = new ConsonantClass(Voiced Pulmonic TapFlap, Places.Uvular, "ɢ̆", "");
    VdPharyngealFlap             = new ConsonantClass(Voiced Pulmonic TapFlap, Places.Pharyngeal, "ʡ̆", "");
														
    // Trill		


    buh                          = new ConsonantClass(Voiced Pulmonic, Places.Bilabial, "bː", "");
    									
    VlBilabialTrill              = new ConsonantClass(Pulmonic Trill, Places.Bilabial, "ʙ̥", "");
    VdBilabialTrill              = new ConsonantClass(Voiced Pulmonic Trill Vibrant, Places.Bilabial, "ʙ", "B\\");
    VlAlveolarTrill              = new ConsonantClass(Pulmonic Trill, Places.Alveolar, "r̥", "");
    r                            = new ConsonantClass(Voiced Pulmonic Trill Rhotic Liquid Vibrant, Places.Alveolar, "r", "r");
    VlRetroflexTrill             = new ConsonantClass(Pulmonic Trill, Places.Retroflex, "ɽ̊r̥", "");
    VdRetroflexTrill             = new ConsonantClass(Voiced Pulmonic Trill, Places.Retroflex, "ɽr", "");
    VlUvularTrill                = new ConsonantClass(Pulmonic Trill Rhotic Liquid Vibrant, Places.Uvular, "ʀ", "R\\");
    VlPharyngealTrill            = new ConsonantClass(Pulmonic Trill, Places.Pharyngeal, "ʜ", "H\\");
    VdPharyngealTrill            = new ConsonantClass(Voiced Pulmonic Trill, Places.Pharyngeal, "ʢ", "<\\");
														
    // Lateral Fricative								
    VlAlveolarLateralFricative   = new ConsonantClass(Pulmonic Lateral Fricative Obstruent Continuant Strident Lateral Liquid, Places.Alveolar, "ɬ", "K");
    VdAlveolarLateralFricative   = new ConsonantClass(Voiced Pulmonic Lateral Fricative Obstruent Continuant Strident Lateral Liquid, Places.Alveolar, "ɮ", "K\\");
    VlRetroflexLateralFricative  = new ConsonantClass(Pulmonic Lateral Fricative, Places.Retroflex, "ɭ̊˔", "");
    VdRetroflexLateralFricative  = new ConsonantClass(Voiced Pulmonic Lateral Fricative, Places.Retroflex, "ɭ˔", "");
    VlAlveolarPalatalFricative   = new ConsonantClass(Pulmonic Lateral Fricative, Places.Palatal, "ʎ̝̊", "");
    VdAlveolarPalatalFricative   = new ConsonantClass(Voiced Pulmonic Lateral Fricative, Places.Palatal, "ʎ̝", "");
    VlVelarPalatalFricative      = new ConsonantClass(Pulmonic Lateral Fricative, Places.Velar, "ʟ̝̊", "");
    VdVelarPalatalFricative      = new ConsonantClass(Voiced Pulmonic Lateral Fricative, Places.Velar, "ʟ̝", "");
														
    // LateralApproximant								
    VlAlveolarLateralApproximant = new ConsonantClass(Pulmonic Lateral Approximant, Places.Alveolar, "l̥", "");
    l                            = new ConsonantClass(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Alveolar, "l", "l");
    ssha                         = new ConsonantClass(Voiced Velarized Pulmonic Lateral Approximant, Places.Alveolar, "ɫ", "5");
    VlRetroflexLateral           = new ConsonantClass(Pulmonic Lateral Approximant, Places.Retroflex, "ɭ̊", "");
    VdRetroflexLateral           = new ConsonantClass(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Retroflex, "ɭ", "n`");
    VlPalatalLateral             = new ConsonantClass(Pulmonic Lateral Approximant, Places.Palatal, "ʎ̥", "");
    yuh                          = new ConsonantClass(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Palatal, "ʎ", "L");
    VlVelarLateral               = new ConsonantClass(Pulmonic Lateral Approximant, Places.Velar, "ʟ̥", "");
    VdVelarLateral               = new ConsonantClass(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Velar, "ʟ", "L\\");
    VdUvularLateral              = new ConsonantClass(Voiced Pulmonic Lateral Approximant, Places.Uvular, "ʟ̠", "");

    // Lateral tap/flap
    VdAlveolarLateralFlap        = new ConsonantClass(Voiced Pulmonic Lateral TapFlap Vibrant Rhotic Liquid, Places.Alveolar, "ɺ", "l\\");
    VdRetroflexLateralFlap       = new ConsonantClass(Voiced Pulmonic Lateral TapFlap, Places.Retroflex, "ɭ̆", "");
    VdPalatalLateralFlap         = new ConsonantClass(Voiced Pulmonic Lateral TapFlap, Places.Palatal, "ʎ̆", "");
    VdVelarLateralTap            = new ConsonantClass(Voiced Pulmonic Lateral TapFlap, Places.Velar, "L̆", "");


    //==================================
    // Non-Pulmonic Consonants
    //==================================

    // Clicks
    VlBilabialTenuisClick        = new ConsonantClass(Ejective Tenuis Click Affricate, Places.Bilabial, "ʘ", "O\\");
    VdBilabialTenuisClick        = new ConsonantClass(Voiced Ejective Tenuis Click Affricate, Places.Bilabial, "ʘ̬", "");
    VlDentalTenuisClick          = new ConsonantClass(Ejective Tenuis Click Affricate, Places.Dental, "ǀ", "|");
    VdDentalTenuisClick          = new ConsonantClass(Voiced Ejective Tenuis Click Affricate, Places.Dental, "ǀ̬", "");
    VlAlveolarTenuisClick        = new ConsonantClass(Ejective Tenuis Click Affricate, Places.Alveolar, "ǃ", "!\\");
    VdAlveolarTenuisClick        = new ConsonantClass(Voiced Ejective Tenuis Click Affricate, Places.Alveolar, "ǃ̬", "");
    VlPalatalTenuisClick         = new ConsonantClass(Ejective Tenuis Click Affricate, Places.Palatal, "ǂ", "=\\");
    VdPalatalTenuisClick         = new ConsonantClass(Voiced Ejective Tenuis Click Affricate, Places.Palatal, "ǂ̬", "");

    VlBilabialNasalClick         = new ConsonantClass(Ejective Nasal Click Affricate, Places.Bilabial, "ʘ̃", "");
    VlDentalNasalClick           = new ConsonantClass(Ejective Nasal Click Affricate, Places.Dental, "ǀ̃", "");
    VlAlveolarNasalClick         = new ConsonantClass(Ejective Nasal Click Affricate, Places.Alveolar, "ǃ̃", "");
    VlPalatalNasalClick          = new ConsonantClass(Ejective Nasal Click Affricate, Places.Palatal, "ǂ̃", "");

    VlAlveolarTenuisLateralClick = new ConsonantClass(Ejective Tenuis Lateral Click Affricate, Places.Alveolar, "ǁ", " | \\ | \\");
    VdAlveolarTenuisLateralClick = new ConsonantClass(Voiced Ejective Tenuis Lateral Click Affricate, Places.Alveolar, "ǁ̬", "");

    VlBilabialImplosiveClick     = new ConsonantClass(Ejective Implosive Click Affricate, Places.Bilabial, "ɓ̥", "");
    VdBilabialImplosiveClick     = new ConsonantClass(Voiced Ejective Implosive Click Affricate, Places.Bilabial, "ɓ", "b_<");
    VlAlveolarImplosiveClick     = new ConsonantClass(Ejective Implosive Click Affricate, Places.Alveolar, "ɗ̥", "");
    VdAlveolarImplosiveClick     = new ConsonantClass(Voiced Ejective Implosive Click Affricate, Places.Alveolar, "ɗ", "d_<");
    VlRetroflexImplosiveClick    = new ConsonantClass(Ejective Implosive Click Affricate, Places.Retroflex, "ᶑ̊", "");
    VdRetroflexImplosiveClick    = new ConsonantClass(Voiced Ejective Implosive Click Affricate, Places.Retroflex, "ᶑ", "");
    VlPalatalImplosiveClick      = new ConsonantClass(Ejective Implosive Click Affricate, Places.Palatal, "ʄ̊", "");
    VdPalatalImplosiveClick      = new ConsonantClass(Voiced Ejective Implosive Click Affricate, Places.Palatal, "ʄ", "J\\_<");
    VlVelarImplosiveClick        = new ConsonantClass(Ejective Implosive Click Affricate, Places.Velar, "ɠ̊", "");
    VdVelarImplosiveClick        = new ConsonantClass(Voiced Ejective Implosive Click Affricate, Places.Velar, "ɠ", "g_<");
    VlUvularImplosiveClick       = new ConsonantClass(Ejective Implosive Click Affricate, Places.Uvular, "ʛ̥", "");
    VdUvularImplosiveClick       = new ConsonantClass(Voiced Ejective Implosive Click Affricate, Places.Uvular, "ʛ", "G\\_<");

    VdPalatoAlveolarSibilant     = new ConsonantClass(Voiced Sibilant Affricate, Places.PalatoAlveolar, "ʤ", "");



    //==================================
    // Pulmonic Affricates
    //==================================

    // Sibilants
    VlAlveolarSibilantAffricate  = new ConsonantClass(Pulmonic Sibilant Affricate Occlusive Strident, Places.Alveolar, "ʦ", "");
    VlAlveolarAffricate          = new ConsonantClass(Affricate, Places.Alveolar, "t͡s", "");  // Check properties

    VdAlveolarAffricate          = new ConsonantClass(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.Alveolar, "dz", "");
    VlPostalveolarAffricate      = new ConsonantClass(Pulmonic Sibilant Affricate Occlusive Strident, Places.PalatoAlveolar, "t̠ʃ", "");
    ts                           = new ConsonantClass(Pulmonic Sibilant Affricate, Places.PalatoAlveolar, "ʧ", "");
    dz                           = new ConsonantClass(Voiced Affricate, Places.PostAlveolar, "d͡ʒ", "");
    VdPostalveolarAffricate      = new ConsonantClass(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.PalatoAlveolar, "d̠ʒ", "");
    VlRetroflexAffricate         = new ConsonantClass(Pulmonic Sibilant Affricate Occlusive Strident, Places.Retroflex, "ʈʂ", "");
    VdRetroflexAffricate         = new ConsonantClass(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.Retroflex, "ɖʐ", "");
    VlAlveoloPalatalAffricate    = new ConsonantClass(Pulmonic Sibilant Affricate Occlusive Strident, Places.AlveoloPalatal, "tɕ", "");
    VdAlveoloPalatalAffricate    = new ConsonantClass(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.AlveoloPalatal, "dʑ", "");

    VlAlveoloPalatalSibilantAffricate = new ConsonantClass(Pulmonic Sibilant Affricate, Places.AlveoloPalatal, "t͡ʃ", "");
    Mystery4                          = new ConsonantClass(Pulmonic Sibilant Affricate, Places.AlveoloPalatal, "t͡ʃː", "");  // Check properties




    Mystery1                          = new ConsonantClass(Pulmonic Sibilant Affricate, Places.AlveoloPalatal, "t͡ʃʲ", ""); // ??????


    // Non-Sibilants
    VlBilabialNSAffricate        = new ConsonantClass(Pulmonic Affricate Occlusive, Places.Bilabial, "pɸ", "");
    VdBilabialNSAffricate        = new ConsonantClass(Voiced Pulmonic Affricate Occlusive, Places.Bilabial, "bβ", "");
    VlLabioDentalNSAffricate     = new ConsonantClass(Pulmonic Affricate Occlusive Strident, Places.LabioDental, "p̪f", "");
    VdLabioDentalNSAffricate     = new ConsonantClass(Voiced Pulmonic Affricate Occlusive Strident, Places.LabioDental, "b̪v", "");
    VlDentalNSAffricate          = new ConsonantClass(Pulmonic Affricate Occlusive, Places.Dental, "t̪θ", "");
    VdDentalNSAffricate          = new ConsonantClass(Voiced Pulmonic Affricate Occlusive, Places.Dental, "d̪ð", "");
    VlAlveolarNSAffricate        = new ConsonantClass(Pulmonic Affricate, Places.Alveolar, "tɹ̝̊", "");
    VdAlveolarNSAffricate        = new ConsonantClass(Voiced Pulmonic Affricate, Places.Alveolar, "dɹ̝", "");
    VlPalatoAlveolarNSAffricate  = new ConsonantClass(Pulmonic Affricate, Places.PalatoAlveolar, "t̠ɹ̠̊˔", "");
    VdPalatoAlveolarNSAffricate  = new ConsonantClass(Voiced Pulmonic Affricate, Places.PalatoAlveolar, "d̠ɹ̠˔", "");
    VlPalatalNSAffricate         = new ConsonantClass(Pulmonic Affricate Occlusive, Places.Palatal, "cç", "");
    VdPalatalNSAffricate         = new ConsonantClass(Voiced Pulmonic Affricate Occlusive, Places.Palatal, "ɟʝ", "");
    VlVelarNSAffricate           = new ConsonantClass(Pulmonic Affricate Occlusive, Places.Velar, "kx", "");
    VdVelarNSAffricate           = new ConsonantClass(Voiced Pulmonic Affricate Occlusive, Places.Velar, "ɡɣ", "");
    VlUvularNSAffricate          = new ConsonantClass(Pulmonic Affricate, Places.Uvular, "qχ", "");
    VdEpiglottalNSAffricate      = new ConsonantClass(Voiced Pulmonic Affricate, Places.Pharyngeal, "ʡʢ", "");
    VlGlottalNSAffricate         = new ConsonantClass(Pulmonic Affricate, Places.Glottal, "ʔh", "");

    // Lateral
    VlAlveolarLateralAffricate   = new ConsonantClass(Pulmonic Lateral Affricate, Places.Alveolar, "tɬ̝̊", "");
    VdAlveolarLateralAffricate   = new ConsonantClass(Voiced Pulmonic Lateral Affricate, Places.Alveolar, "dɮ", "");
    VlRetroflexLateralAffricate  = new ConsonantClass(Pulmonic Lateral Affricate, Places.Retroflex, "ʈɭ̊˔", "");
    VdPalatalLateralAffricate    = new ConsonantClass(Voiced Pulmonic Lateral Affricate, Places.Palatal, "cʎ̝̊", "");
    VlVelarLateralAffricate      = new ConsonantClass(Pulmonic Lateral Affricate, Places.Velar, "kʟ̝̊", "");
    VdVelarLateralAffricate      = new ConsonantClass(Voiced Pulmonic Lateral Affricate, Places.Velar, "ɡʟ̝", "");


    //==================================
    // Ejective | Affricates
    //==================================

    // Central
    VlAlveolarEjectiveAffricate       = new ConsonantClass(Ejective Central Affricate, Places.Alveolar, "tsʼ", "");
    VlPalatoAlveolarEjectiveAffricate = new ConsonantClass(Ejective Central Affricate, Places.PalatoAlveolar, "t̠ʃʼ", "");
    VlRetroflexEjectiveAffricate      = new ConsonantClass(Ejective Central Affricate, Places.Retroflex, "ʈʂʼ", "");
    VlVelarEjectiveAffricate          = new ConsonantClass(Ejective Central Affricate, Places.Velar, "kxʼ", "");
    VlUvularEjectiveAffricate         = new ConsonantClass(Ejective Central Affricate, Places.Uvular, "qχʼ", "");

    // Lateral
    VlAlveolarLateralEjective         = new ConsonantClass(Ejective Lateral Affricate, Places.Alveolar, "tɬʼ", "");
    VlPalatalLateralEjective          = new ConsonantClass(Ejective Lateral Affricate, Places.Palatal, "cʎ̝̊ʼ", "");
    VlVelarLateralEjective            = new ConsonantClass(Ejective Lateral Affricate, Places.Velar, "kʟ̝̊ʼ", "");

    VlLabialVelarApproximant          = new ConsonantClass(Approximant Vocoid Semivowel Continuant, Places.LabialVelar, "ʍ", "W");

// Pre-existing
//    VlAlveoloPalatalFricative1      = new ConsonantClass(CPM(Categories.Other, Places.AlveoloPalatal) Fricative, "ɕ", "");
//    VlAlveoloPalatalFricative       = new ConsonantClass(CPM(Categories.Other, Places.AlveoloPalatal) Fricative, "ʑ", "");


    wh                                = new ConsonantClass(Nasal Voiced Approximant Nasal, Places.LabialVelar, "w̃", "w~");
    w                                 = new ConsonantClass(Voiced Approximant Vocoid Semivowel Continuant, Places.LabialVelar, "w", "w");

// This conflicts with another segment (VlPharyngealTrill)

//    VlEpiglottalFricative             = new ConsonantClass(Fricative, Places.Pharyngeal, "ʜ", "H\\");


    eu                                = new ConsonantClass(Voiced Approximant Vocoid Semivowel Continuant, Places.LabialPalatal, "ɥ", "H");

    SimultaneousSx                    = new ConsonantClass(Sibilant Fricative, Places.PostAlveolar, "ɧ", "x\\");
    VdEpiglottalFricative             = new ConsonantClass(Voiced Fricative, Places.Pharyngeal, "ʢ", "?\\");
    VlEpiglottalPlosive               = new ConsonantClass(Ejective, Places.Pharyngeal, "ʡ", "<\\");

    // Ejectives
    VlBilabialStopEjective            = new ConsonantClass(Ejective Pulmonic Stop, Places.Bilabial, "pʼ", "p_>");
    VlAveolarStopEjective             = new ConsonantClass(Ejective Stop, Places.Alveolar, "tʼ", "t_>");
    VlRetroflexStopEjective           = new ConsonantClass(Ejective Stop, Places.Retroflex, "ʈʼ", "t`_>");
    VlPalatalStopEjective             = new ConsonantClass(Ejective Stop, Places.Palatal, "cʼ", "c_>");
    VlVelarStopEjective               = new ConsonantClass(Ejective Stop, Places.Velar, "kʼ", "k_>");
    VlUvularStopEjective              = new ConsonantClass(Ejective Stop, Places.Uvular, "qʼ", "q_>");
    VlEpiglottalStopEjective          = new ConsonantClass(Ejective Stop, Places.Pharyngeal, "ʡʼ", ">\\_>");
    VlBilabialFricativeEjective       = new ConsonantClass(Ejective Fricative, Places.Bilabial, "ɸʼ", "p\\_>");
    VlLabiodentalFricativeEjective    = new ConsonantClass(Ejective Fricative, Places.LabioDental, "fʼ", "f_>");
    VlDentalFricativeEjective         = new ConsonantClass(Ejective Fricative, Places.Dental, "θʼ", "T_>");
    VlAlveolarFricativeEjective       = new ConsonantClass(Ejective Fricative, Places.Alveolar, "sʼ", "s_>");
    VlPostalveolarFricativeEjective   = new ConsonantClass(Ejective Fricative, Places.PostAlveolar, "ʃʼ", "S_>");
    VlRetroflexFricativeEjective      = new ConsonantClass(Ejective Fricative, Places.Retroflex, "ʂʼ", "s`_>");
    VlPalatalFricativeEjective        = new ConsonantClass(Ejective Fricative, Places.Palatal, "ɕʼ", "s\\_>");
    VlVelarFricativeEjective          = new ConsonantClass(Ejective Fricative, Places.Velar, "xʼ" , "x_>");
    VlUvularFricativeEjective         = new ConsonantClass(Ejective Fricative, Places.Uvular, "χʼ", "X_>");
    VlPostalveolarLatFricEjective     = new ConsonantClass(Ejective Lateral Fricative, Places.Alveolar, "ɬʼ", "K_>");

    //==================================
    // Vowels
    //==================================

    e                         = new VowelClass(Vocoid Continuant, Opens.Close, Backnesses.Front, "i", "i");
    E                         = new VowelClass(LongVowel Vocoid Continuant, Opens.Close, Backnesses.Front, "iː", "i:");
    eeh                       = new VowelClass(Rounded Vocoid Continuant, Opens.Close, Backnesses.Front, "y", "y");

    eee                       = new VowelClass(NoFeature, Opens.Close, Backnesses.Central, "ɨ", "1");
    CloseCentralRounded       = new VowelClass(Rounded, Opens.Close, Backnesses.Central, "ʉ", "}");
    CloseBackUnrounded        = new VowelClass(Vocoid Continuant, Opens.Close, Backnesses.Back, "ɯ", "M");
    u                         = new VowelClass(Rounded Vocoid Continuant, Opens.Close, Backnesses.Back, "u", "u");

    NearCloseCentralUnrounded = new VowelClass(NoFeature, Opens.NearClose, Backnesses.Central, "ᵻ", "I\\");
    NearCloseFrontUnrounded   = new VowelClass(NoFeature, Opens.NearClose, Backnesses.NearFront, "ɪ", "I");
    Mystery3                  = new VowelClass(NoFeature, Opens.NearClose, Backnesses.NearFront, "ɪ̯", ""); // Check properties

    NearCloseFrontRounded     = new VowelClass(Rounded, Opens.NearClose, Backnesses.NearFront, "ʏ", "Y");
    NearCloseCentralRounded   = new VowelClass(Rounded, Opens.NearClose, Backnesses.Central, "ᵿ", "U\\");

    NearCloseBackRounded      = new VowelClass(Rounded, Opens.NearClose, Backnesses.NearBack, "ʊ", "U");
    U                         = new VowelClass(LongVowel Rounded, Opens.Close, Backnesses.Back, "uː", "u:");
    ohh                       = new VowelClass(Rounded, Opens.Close, Backnesses.Back, "u̯", "<u>");  // SAMPA encoding ???
    eah                       = new VowelClass(NoFeature, Opens.CloseMid, Backnesses.Front, "e̯", "<e>");  // SAMPA encoding ???



    // David, these need review

    midfront_diphthong_romanian   = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "e̯a", "");
    midback_diphthong_romanian    = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "o̯a", "");
    aj_diphthong                  = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "aj", "");
    oj_diphthong                  = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "oj", "");
    diphthong_portuguese          = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "ɐj", "");
    nasal_diphthong_portuguese1          = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "ẽj̃", "");
    nasal_diphthong_portuguese2          = new VowelClass(NoFeature, "ɐ̃j̃", "");
    au_diphthong                  = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "au̯", "");
    eh_diphthong                  = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "ɛj", "");
    ej_diphthong                  = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "ej", "");
    eu_nasalized_diphthong        = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "ẽu̯", "");
    ooo                       = new VowelClass(Nasal, Opens.Open, Backnesses.Back, "ũ", "u*");
    ehn                       = new VowelClass(Nasal, Opens.Close, Backnesses.Back, "ẽ", "e*");

    LongNasalE                = new VowelClass(LongVowel Nasal, Opens.Close, Backnesses.Back, "ẽː", "e*:");  // Check properties


    NasalI                    = new VowelClass(Nasal, Opens.OpenMid, Backnesses.Back, "ĩ", "i*");
    NasalY                    = new VowelClass(Nasal, Opens.CloseMid, Backnesses.Back, "ỹ", "y*");
    LongY                    = new VowelClass(LongVowel Nasal, Opens.CloseMid, Backnesses.Back, "yː", "y:");



    NasalA                    = new VowelClass(Nasal, Opens.NearClose, Backnesses.Back, "ɑ̃", "a*");
    OtherA                    = new VowelClass(Nasal, Opens.Close, Backnesses.Back, "a.", "a.");
    aj                        = new VowelClass(Nasal, Opens.Close, Backnesses.Back, "aj", "aj");  // Check
    // ==


    ay                        = new VowelClass(Vocoid Continuant, Opens.CloseMid, Backnesses.Front, "e", "e");
    uu                        = new VowelClass(Rounded Vocoid Continuant, Opens.CloseMid, Backnesses.Front, "ø", "2");

    o                         = new VowelClass(LongVowel Rounded Vocoid, Opens.Open, Backnesses.Front, "øː", "");  // Check properties




    MidCentralUnrounded       = new VowelClass(NoFeature, Opens.Mid, Backnesses.Central, "ɘ", "@\\");
    aah                       = new VowelClass(NoFeature, Opens.CloseMid, Backnesses.Central, "ə", "@");
    ooh                       = new VowelClass(Rounded, Opens.CloseMid, Backnesses.Central, "ɵ", "8");
    CloseMidBackUnrounded     = new VowelClass(Vocoid Continuant, Opens.CloseMid, Backnesses.Back, "ɤ", "7");
    oh                        = new VowelClass(Rounded Vocoid Continuant, Opens.CloseMid, Backnesses.Back, "o", "o");

    ooow                      = new VowelClass(Rounded, Opens.CloseMid, Backnesses.Back, "o(w)", "");  // Not sure what the IPA for this is

    MidFrontUnrounded         = new VowelClass(NoFeature, Opens.Mid, Backnesses.Front, "ø̞", "");
    MidBackUnrounded          = new VowelClass(NoFeature, Opens.Mid, Backnesses.Back, "o̞", "");

    eh                        = new VowelClass(Vocoid Continuant, Opens.OpenMid, Backnesses.NearFront, "ɛ", "E");
    Eh                        = new VowelClass(LongVowel Vocoid Continuant, Opens.OpenMid, Backnesses.NearFront, "ɛː", "E:");  // Check properties
    ai                        = new VowelClass(LongVowel Vocoid Continuant, Opens.Mid, Backnesses.Front, "eː", "e:");

    OpenMidNearFrontRounded   = new VowelClass(Rounded Vocoid Continuant, Opens.OpenMid, Backnesses.NearFront, "œ", "9");
    OpenMidCentralRounded     = new VowelClass(Rounded, Opens.OpenMid, Backnesses.Central, "ɞ", "3\\");
    aeh                       = new VowelClass(NoFeature, Opens.OpenMid, Backnesses.Central, "ɜ", "3");
    OpenMidBackUnrounded      = new VowelClass(Vocoid Continuant, Opens.OpenMid, Backnesses.Back, "ʌ", "V");
    euh                       = new VowelClass(Rounded Vocoid Continuant, Opens.OpenMid, Backnesses.Back, "ɔ", "O");
    LongOpenMidBackRounded    = new VowelClass(LongVowel Rounded Vocoid Continuant, Opens.OpenMid, Backnesses.Back, "ɔː", ""); // Check properties


    O                         = new VowelClass(LongVowel Rounded Vocoid Continuant, Opens.Mid, Backnesses.Back, "oː", "o:");

    on                            = new VowelClass(Nasal Rounded, Opens.CloseMid, Backnesses.Back, "õ", "O~");  // Check properties
    LongCloseMidBackRoundedNasal  = new VowelClass(LongVowel Nasal Rounded, Opens.CloseMid, Backnesses.Back, "õː", "O~:"); // Check properties
    oa                         = new VowelClass(Rounded, Opens.CloseMid, Backnesses.Back, "o̯", ""); // Check properties

    NearFrontUnrounded        = new VowelClass(NoFeature, Opens.NearOpen, Backnesses.NearFront, "æ", "{");
    FrontOpenRounded          = new VowelClass(Rounded, Opens.NearOpen, Backnesses.NearFront, "ɶ", "&");
    ahh                       = new VowelClass(Rounded, Opens.NearOpen, Backnesses.Central, "ɐ", "6");

    OpenCentralUnrounded      = new VowelClass(NoFeature, Opens.Open, Backnesses.Central, "ä", "a_\"");
    ah                        = new VowelClass(Vocoid Continuant, Opens.Open, Backnesses.NearFront, "a", "a");

    an                        = new VowelClass(Nasal, Opens.NearOpen, Backnesses.Central, "ã", ""); // Check properties

    A                         = new VowelClass(LongVowel Vocoid Continuant, Opens.Open, Backnesses.Central, "aː", "a:");

    OpenNearFrontRounded      = new VowelClass(Rounded Vocoid Continuant, Opens.Open, Backnesses.NearFront, "ɶ", "&");
    a                         = new VowelClass(Vocoid Continuant, Opens.Open, Backnesses.Back, "ɑ", "A");
    OpenBackRounded           = new VowelClass(Rounded Vocoid Continuant, Opens.Open, Backnesses.Back, "ɒ", "Q");

    uuh                       = new VowelClass(Nasal Rounded, Opens.OpenMid, Backnesses.NearFront, "œ̃", "oe*"); // French One "un"
    ey                        = new VowelClass(Rounded Nasal, Opens.Close, Backnesses.Front, "ỹ", "y~");
    aa                        = new VowelClass(Nasal, Opens.Open, Backnesses.NearFront, "ã", "~a");
    ahn                       = new VowelClass(Nasal Rounded, Opens.NearOpen, Backnesses.Central, "ɐ̃", "a*");   // Supposed to be "ɛ̃" as in French Dog "chien"?
    oon                       = new VowelClass(Nasal Rounded, Opens.OpenMid, Backnesses.Back, "ɔ̃", "o*");       // French Fish "poisson"
    aehn                      = new VowelClass(Nasal, Opens.OpenMid, Backnesses.NearFront, "ɜ̃", "3*");
    ehnn                      = new VowelClass(Nasal, Opens.OpenMid, Backnesses.NearFront, "ɛ̃", "E*");
    uh                        = new VowelClass(Nasal Rounded, Opens.Close, Backnesses.Back, "ũ", "u*");         // Portuguese One "um"
    en                        = new VowelClass(Nasal, Opens.CloseMid, Backnesses.Front, "ẽ", "e*");             // Portuguese Trail "se*da
    een                       = new VowelClass(Nasal, Opens.Close, Backnesses.Front, "ĩ", "i*");                // Portuguese Tongue


// How to show rhotic vowels?
//    OpenMidCentralRhotic       = VowelClass(Rhotic, Opens.OpenMid, Backnesses.Central, "ɝ", "");
//    RhoticSchwa                = VowelClass(Rhotic, Opens.Open, Backnesses.NearFront, "ɚ", "@`");
  }

  with ImpossibleSegments {
    I10 = new ImpossibleClass(Pulmonic Nasal, Places.Pharyngeal);
    I11 = new ImpossibleClass(Pulmonic Nasal, Places.Glottal);
    I12 = new ImpossibleClass(Pulmonic Stop Voiced, Places.Pharyngeal);
    I13 = new ImpossibleClass(Pulmonic Stop Voiced, Places.Glottal);
    I14 = new ImpossibleClass(Pulmonic Sibilant Fricative, Places.Bilabial);
    I15 = new ImpossibleClass(Pulmonic Sibilant Fricative, Places.LabioDental);
    I16 = new ImpossibleClass(Pulmonic Sibilant Fricative, Places.LinguoLabial);
    I17 = new ImpossibleClass(Pulmonic Sibilant Fricative, Places.Velar);
    I18 = new ImpossibleClass(Pulmonic Sibilant Fricative, Places.Uvular);
    I19 = new ImpossibleClass(Pulmonic Sibilant Fricative, Places.Pharyngeal);
    I20 = new ImpossibleClass(Pulmonic Sibilant Fricative, Places.Glottal);
    I21 = new ImpossibleClass(Pulmonic Trill, Places.Velar);
    I22 = new ImpossibleClass(Pulmonic Trill, Places.Glottal);
    I23 = new ImpossibleClass(Pulmonic TapFlap, Places.Velar);
    I24 = new ImpossibleClass(Pulmonic TapFlap, Places.Glottal);
    I25 = new ImpossibleClass(Pulmonic Lateral Fricative, Places.Bilabial);
    I26 = new ImpossibleClass(Pulmonic Lateral Fricative, Places.LabioDental);
    I27 = new ImpossibleClass(Pulmonic Lateral Fricative, Places.Pharyngeal);
    I28 = new ImpossibleClass(Pulmonic Lateral Fricative, Places.Glottal);
    I29 = new ImpossibleClass(Pulmonic Lateral Approximant, Places.Bilabial);
    I30 = new ImpossibleClass(Pulmonic Lateral Approximant, Places.LabioDental);
    I31 = new ImpossibleClass(Pulmonic Lateral Approximant, Places.Pharyngeal);
    I32 = new ImpossibleClass(Pulmonic Lateral Approximant, Places.Glottal);
    I33 = new ImpossibleClass(Pulmonic Lateral TapFlap, Places.Bilabial);
    I34 = new ImpossibleClass(Pulmonic Lateral TapFlap, Places.LabioDental);
    I35 = new ImpossibleClass(Pulmonic Lateral TapFlap, Places.Pharyngeal);
    I36 = new ImpossibleClass(Pulmonic Lateral TapFlap, Places.Glottal);
    I37 = new ImpossibleClass(Pulmonic Sibilant Affricate, Places.Bilabial);
    I38 = new ImpossibleClass(Pulmonic Sibilant Affricate, Places.LabioDental);
    I39 = new ImpossibleClass(Pulmonic Sibilant Affricate, Places.Velar);
    I40 = new ImpossibleClass(Pulmonic Sibilant Affricate, Places.Uvular);
    I41 = new ImpossibleClass(Pulmonic Sibilant Affricate, Places.Pharyngeal);
    I42 = new ImpossibleClass(Pulmonic Sibilant Affricate, Places.Glottal);
    I43 = new ImpossibleClass(Pulmonic Lateral Affricate, Places.Bilabial);
    I44 = new ImpossibleClass(Pulmonic Lateral Affricate, Places.LabioDental);
    I45 = new ImpossibleClass(Pulmonic Lateral Affricate, Places.Pharyngeal);
    I46 = new ImpossibleClass(Pulmonic Lateral Affricate, Places.Glottal);
    I47 = new ImpossibleClass(Ejective Lateral Fricative Affricate, Places.Bilabial);
    I48 = new ImpossibleClass(Ejective Lateral Fricative Affricate, Places.LabioDental);
    I49 = new ImpossibleClass(Ejective Lateral Fricative Affricate, Places.Pharyngeal);
    I50 = new ImpossibleClass(Ejective Central Affricate, Places.Glottal);
    I51 = new ImpossibleClass(Ejective Lateral Affricate, Places.Bilabial);
    I52 = new ImpossibleClass(Ejective Lateral Affricate, Places.LabioDental);
    I53 = new ImpossibleClass(Ejective Lateral Affricate, Places.Pharyngeal);
    I54 = new ImpossibleClass(Ejective Lateral Affricate, Places.Glottal);
    I55 = new ImpossibleClass(Ejective Tenuis Click Affricate, Places.Velar);
    I56 = new ImpossibleClass(Ejective Tenuis Click Affricate, Places.Uvular);
    I57 = new ImpossibleClass(Ejective Tenuis Click Affricate, Places.Pharyngeal);
    I58 = new ImpossibleClass(Ejective Nasal Click Affricate, Places.Velar);
    I59 = new ImpossibleClass(Ejective Nasal Click Affricate, Places.Uvular);
    I60 = new ImpossibleClass(Ejective Nasal Click Affricate, Places.Pharyngeal);
    I61 = new ImpossibleClass(Ejective Tenuis Lateral Click Affricate, Places.Bilabial);
    I62 = new ImpossibleClass(Ejective Tenuis Lateral Click Affricate, Places.LabioDental);
    I63 = new ImpossibleClass(Ejective Tenuis Lateral Click Affricate, Places.Velar);
    I64 = new ImpossibleClass(Ejective Tenuis Lateral Click Affricate, Places.Uvular);
    I65 = new ImpossibleClass(Ejective Tenuis Lateral Click Affricate, Places.Pharyngeal);
  }                 									

  AllSegments = Results.UsedSegments + ImpossibleSegments;

  with DiacriticModifiers {
    UndefinedEscapeCharacter     = new DiacriticClass("Undefined escape character", null, "*");
    Nasalized                    = new DiacriticClass("Nasalized", "\u0303", "_~");
    Centralized                  = new DiacriticClass("Centralized", "\u0308", "_\"");
    Advanced                     = new DiacriticClass("Advanced", "\u031F", "_+");
    Retracted                    = new DiacriticClass("Retracted", "\u0320", "_-");
    RisingTone                   = new DiacriticClass("RisingTone ", "\u030C", "_R");
    Voiceless                    = new DiacriticClass("Voiceless", "\u0325", "_0");
    Implosive                    = new DiacriticClass("Implosive", null, "_<");
    Syllabic                     = new DiacriticClass("Syllabic", "\u0329", "_=");
    Ejective                     = new DiacriticClass("Ejective", "\u02BC", "_>");
    Pharyngealized               = new DiacriticClass("Pharyngealized ", "\u02E4", "_?\\");
    FallingTone                  = new DiacriticClass("Falling tone", "\u0302", "_F");
    NonSyllabic                  = new DiacriticClass("Non-syllabic", "\u032F", "_^");
    NoAudibleRelease             = new DiacriticClass("No audible release", "\u031A", "_}");
    RhoticHook                   = new DiacriticClass("Rhotic hook", "\u02DE", "`");
    AdvancedTongueRoot           = new DiacriticClass("Advanced tongue root ", "\u0318", "_A");
    Apical                       = new DiacriticClass("Apical", "\u033A", "_a");
    ExtraLowTone                 = new DiacriticClass("Extra low tone", "\u030F", "_B");
    LowRisingTone                = new DiacriticClass("Low rising tone", "\u1DC5", "_B_L");
    LessRounded                  = new DiacriticClass("Less rounded", "\u031C", "_c");
    Dental                       = new DiacriticClass("Dental", "\u032A", "_d");
    VelarizedOrPharyngealized    = new DiacriticClass("Velarized or Pharyngealized", "\u0334", "_e");
    GlobalFall                   = new DiacriticClass("Global fall", "\u2198", "<F>");
    Velarized                    = new DiacriticClass("Velarized", "\u02E0", "_G");
    HighTone                     = new DiacriticClass("High tone", "\u0301", "_H");
    HighRisingTone               = new DiacriticClass("High rising tone", "\u1DC4", "_H_T");
    Aspirated                    = new DiacriticClass("Aspirated", "\u02B0", "_h");
    Palatalized                  = new DiacriticClass("Palatalized", "\u02B2", "_j");
    CreakyVoiced                 = new DiacriticClass("Creaky voiced", "\u0330", "_k");
    LowTone                      = new DiacriticClass("Low tone", "\u0300", "_L");
    LateralRelease               = new DiacriticClass("Lateral release", "\u02E1", "_l");
    MidTone                      = new DiacriticClass("Mid tone", "\u0304", "_M");
    Laminal                      = new DiacriticClass("Laminal", "\u033B", "_m");
    LinguoLabial                 = new DiacriticClass("Linguo-Labial", "\u033C", "_N");
    NasalRelease                 = new DiacriticClass("Nasal release", "\u207F", "_n");
    MoreRounded                  = new DiacriticClass("More rounded", "\u0339", "_O");
    Lowered                      = new DiacriticClass("Lowered", "\u031E", "_o");
    RetractedTongueRoot          = new DiacriticClass("Retracted tongue root", "\u0319", "_q");
    GlobalRise                   = new DiacriticClass("Global rise", "\u2197", "<R>");
    RisingFallingTone            = new DiacriticClass("Rising falling tone", "\u1DC8", "_R_F");
    Raised                       = new DiacriticClass("Raised", "\u031D", "_r");
    ExtraHighTone                = new DiacriticClass("Extra high tone", "\u030B", "_T");
    BreathyVoiced                = new DiacriticClass("Breathy voiced", "\u0324", "_t");
    Voiced                       = new DiacriticClass("Voiced", "\u032C", "_v");
    Labialized                   = new DiacriticClass("Labialized", "\u02B7", "_W");
    ExtraShort                   = new DiacriticClass("Extra short", "\u02D8", "_X");
    MidCentralized               = new DiacriticClass("Mid-centralized", "\u033D", "_x");
    Downstep                     = new DiacriticClass("Down-step", "↓", "!");
    Upstep                       = new DiacriticClass("Up-step", "↑", "^");
    Long                         = new DiacriticClass("Long", "ː", ":");
    HalfLong                     = new DiacriticClass("Half-long", "ˑ", ":\\");
    IndeterminacyinFrenchVowels  = new DiacriticClass("Indeterminacy in french vowels", null, "/");
    BeginNonsegmentalNotation    = new DiacriticClass("Begin Non-segmental notation", null, "<");
    Endnonsegmentalnotation      = new DiacriticClass("End non-segmental notation", "", ">");
    Voicedepiglottalfricative    = new DiacriticClass("Voiced epiglottal fricative", "ʢ", "<\\");
    Postalveolarclick            = new DiacriticClass("Post-alveolar click", "ǃ", "!\\");
    MinorGroup                   = new DiacriticClass("Minor group", " | ", " | ");
    Dentalclick                  = new DiacriticClass("Dental click", "ǀ", " | \\");
    MajorGroup                   = new DiacriticClass("Major group", "‖", " |  | ");
    Alveolarlateralclick         = new DiacriticClass("Alveolar lateral click", "ǁ", " | \\ | \\");
    Palatalclick                 = new DiacriticClass("Palatal click", "ǂ", "");
//    Linkingmark                = new DiacriticClass("Linking Mark", "\u203f", "-\\");
    VoicelessDescender           = new DiacriticClass("Voiceless descender", "\u030A", "");
    CombiningMacron              = new DiacriticClass("Combining macron", "\u0331", "");
    TieBarBelow                  = new DiacriticClass("Tie-bar below", "\u035C", "");
    TieBarAbove                  = new DiacriticClass("Tie-bar above", "\u0361", "");
    ReadyMadeCombination         = new DiacriticClass("Ready made combination", "\u026B", "");
    Becomes                      = new DiacriticClass("Becomes", "→", "");
    Separator                    = new DiacriticClass("Separator", "", "-");
  }
  //======================================================================

  AlphaOrder(x, y) {
    var cl = x.Ipa.Length.Compare(y.Ipa.Length);
    if (cl == 0)
      cl = -x.Ipa.Compare(y.Ipa);
    return cl;
  }

  SegmentCell(segment) = Cell {
    Edge: 0.25 pts {Color: Colors.LightGray};
    Padding: 2 pts;
    segment.Display(segment.GlobalVariablePath)
  };

  SegmentTable = Block {
    var c      = DocMetrics.SegmentColumns;
    var sorted = Math.Sort(Results.UsedSegments, false, ref AlphaOrder);

    Table {
      Columns: [DocMetrics.PageContent.Width / c] * c;
      Style.TitleBar(Lang.IPAListing, c);
      foreach (var segments in (sorted / c)) {
        Row {
          SegmentCell(each segments);
        }
      }
    };
    Style.TableNotes;
  };

  SegmentSound(segment) {
    if (segment == SpaceSegment)
      return Space;
    return segment.GlobalVariableName
  }

  //======================================================================
  // Build a dictionary with IPA text as the key
  //======================================================================

  SegmentDictionary {
    var set = new DictionaryClass(128);
    foreach (var segment in Segments) {
      if (segment.Ipa.Length > 0)
        set.Add(segment, segment.Ipa);
    }
    set.Add(SpaceSegment, Space);
    return set;
  }

  //======================================================================
  // Code for Euler segment diagram
  //======================================================================

  TitleStyle = {TextColor: 70%};
  ChartSize  = 6 inches;
  EX(x)      = ChartSize * x * 0.01;
  EY(y)      = ChartSize * y * 0.01;

  Enclosure(x, y, w, h, color) = Canvas {
    BorderStroke: 1 pts;
    Corner: 6 pts;
    Background: color;
    X: EX(x);
    Y: EY(y);
    Size: Size(EX(w), EY(h));
  };

  NameBox(name, angle=0) = Paragraph {
    TitleStyle;
    Transform: Rotate(angle);
    TransformFit: true;
    Space;
    name;
    Space;
  };

  VNameFrame(name, x, y, width, height, color) = Enclosure(x, y, width, height, color) {
    VAlign: VAligns.Center;
    NameBox(name, 90 degrees)
  };

  FeatureMask = Vowel Nasal Vocoid LongVowel Semivowel Approximant Vibrant Lateral Affricate Occlusive Strident Sibilant Obstruent Continuant Fricative Rhotic Liquid Trill TapFlap;

  FeatureSegments(features) = Math.FindSlice(Results.UsedSegments, segment => segment.Features.HasFlagMask(FeatureMask, features));

  FeatureFrame(x, y, width, name, features) = Canvas {
    X: EX(x);
    Y: EY(y);
    Frame {
      Width: EX(width);
      ParAlignment: ParAlignments.Center;
      if (exists name)
        Span {TitleStyle; name};
      Paragraph {
        Bold;
        Separator: Space;
        (each FeatureSegments(features)).ShowSegment;
      }
    }
  };

  FeatureChart = Canvas {
    TextHeight: 16 pts;

    VNameFrame(Lang.Occlusive, 10, 0, 90, 34, Color(255, 238, 238)) {
      HAlign: HAligns.Right;
    };
    VNameFrame(Lang.Continuant, 10, 35, 90, 37, Color(229, 255, 255)) {
      HAlign: HAligns.Right;
    };
    VNameFrame(Lang.Obstruent, 0, 11, 94, 40, Color(238, 238, 255, 50%));
    VNameFrame(Lang.Vocoid, 0, 52, 78, 21, Color(238, 255, 238, 50%));
    VNameFrame(Lang.Vibrant, 20, 74, 65, 17, Color(238, 238, 255));

    Enclosure(11, 1, 83, 9, Color(255, 246, 246));   // Nasals
    Enclosure(31, 12, 62, 21, Color(246, 242, 250));  // Affricates
    Enclosure(11, 12, 19, 21, Color(246, 243, 250));  // Plosives
    Enclosure(11, 36, 80, 14, Color(240, 247, 255));  // Fricatives

    Enclosure(25, 75, 59, 7, Color(247, 247, 255)) {
      HAlign: HAligns.Left;
      VAlign: VAligns.Center;
      NameBox(Lang.TapFlap);
    };
    Enclosure(25, 83, 53, 7, Color(247, 247, 255)) {
      HAlign: HAligns.Left;
      VAlign: VAligns.Center;
      NameBox(Lang.Trill);
    };

    Enclosure(53, 13, 39, 36, Color(233, 248, 235, 50%)) {
      HAlign: HAligns.Center;
      NameBox(Lang.Strident);
    };

    Enclosure(62, 18, 25, 24, Color(245, 252, 220, 50%)); // Sibilants
    Enclosure(11, 53, 21, 18, Color(240, 255, 247));      // Vowels
    Enclosure(33, 53, 61, 18, Color(240, 255, 247, 50%)) {
      HAlign: HAligns.Left;
      NameBox(Lang.Approximant);
    };

    Enclosure(35, 59, 21, 11, Color(248, 255, 225)); // Semivowels

    Enclosure(64, 43, 26, 59, Color(255, 238, 238, 50%)) {
      HAlign: HAligns.Center;
      VAlign: VAligns.Bottom;
      NameBox(Lang.Liquid);
    };

    Enclosure(65, 44, 14, 52, Color(255, 247, 221, 50%)) {
      HAlign: HAligns.Center;
      VAlign: VAligns.Bottom;
      NameBox(Lang.Rhotic);
    };

    Enclosure(80, 44, 9, 44, Color(238, 247, 230, 70%)) {
      HAlign: HAligns.Right;
      VAlign: VAligns.Bottom;
      NameBox(Lang.Lateral, 90 degrees);
    };

    FeatureFrame(11, 1, 84, Lang.Nasal, Nasal Occlusive);
    FeatureFrame(12, 14, 17, Lang.Plosive, Stop Occlusive);
    FeatureFrame(32, 14, 20, Lang.Affricate, Affricate Occlusive);
    FeatureFrame(54, 20, 7, null, Affricate Occlusive Strident);
    FeatureFrame(65, 18, 18, Lang.Sibilant, Affricate Occlusive Strident Sibilant);
    FeatureFrame(14, 38, 22, Lang.Fricative, Fricative Obstruent Continuant);
    FeatureFrame(54, 38, 6, null, Fricative Obstruent Continuant Strident);
    FeatureFrame(64, 36, 20, null, Fricative Obstruent Continuant Strident Sibilant);
    FeatureFrame(66, 44, 10, null, Fricative Obstruent Continuant Strident Rhotic Liquid);
    FeatureFrame(80, 44, 10, null, Fricative Obstruent Continuant Strident Lateral Liquid);
    FeatureFrame(12, 53, 19, Lang.Vowel, Vowel Vocoid Continuant);
    FeatureFrame(36, 60, 19, Lang.SemiVowel, Vocoid Semivowel Approximant Continuant);
    FeatureFrame(57, 62, 5, null, Vocoid Approximant);
    FeatureFrame(66, 60, 10, null, Vocoid Approximant Rhotic Liquid);
    FeatureFrame(82, 58, 5, null, Vocoid Approximant Rhotic Liquid Lateral);
    FeatureFrame(54, 76, 10, null, Vibrant TapFlap);
    FeatureFrame(66, 76, 10, null, Vibrant TapFlap Rhotic Liquid);
    FeatureFrame(77, 77, 10, null, Vibrant TapFlap Rhotic Liquid Lateral);
    FeatureFrame(54, 84, 10, null, Vibrant Trill);
    FeatureFrame(66, 84, 10, null, Vibrant Trill Rhotic Liquid);
  };
  //======================================================================
  // Code for drift diagram
  //======================================================================

  RowText     = 8 pts;
  RowHeight   = 9 pts;
  BoxWidth    = 6 pts;
  BorderSize  = 0.33 pts;
  FeatureList = FeatureSet[1..];

  RowBox = Canvas {
    Height: RowHeight;
    Width: BoxWidth;
    HAlign: HAligns.Center;
    VAlign: VAligns.Center;
  };

  ShowFeature(feature) = Canvas {
    Height: RowHeight;
    VAlign: VAligns.Center;
    feature.Name
  };

  FeatureBox(feature, features0, features1) = RowBox {
    if (features0.HasFlag(feature)) {
      if (not features1.HasFlag(feature))
        Background: Colors.Red;
    }
    else if (features1.HasFlag(feature))
      Background: Colors.Green;
  };

  FeatureSegment(segment0, segment1) = VBox {
    VAlign: VAligns.Center;
    FeatureBox(each FeatureList, segment0.Features, segment1.Features);
  };

  DriftFeatures(word0, word) = VBox {
    if (word0.Segments.Length > 0 and word.Segments.Length > 0) {
      VBox {
        RowBox {
          if (EachIndex == 0)
            word0.Segments[0].ShowSegment;
        };
        RowBox {
          word.Segments[0].ShowSegment;
        };
        BorderB: BorderSize;
      };
      HBox {
        FeatureSegment(word0.Segments[0], word.Segments[0]);
      }
    }
  };

  DriftChart(cells) = HBox {
    TextHeight: RowText;
    VAlign: VAligns.Top;
    Border: BorderSize;
    VBox {
      BorderR: BorderSize;
      VBox {
        VAlign: VAligns.Center;
        RowBox;
        RowBox;
      };
      VBox {
        PaddingR: 3 pts;
        BorderT: BorderSize;
        ShowFeature(each FeatureList)
      };
    };
    HBox {
      DriftFeatures(cells[0], each cells[1..])
    };
  };

  ConceptDrift(concept) = VBox {
    MarginB: 8 pts;
    Paragraph {
      Lang.Concept; ": ";
      concept.Concept Bold;
    };
    DriftChart(concept.Cells);
  };

  DriftSection = Block {
    Paragraph {
      Separator: "  ";
      ConceptDrift(each Results.WordConceptArray);
    }
  };
}
//======================================================================

