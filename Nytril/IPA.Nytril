using Format, Units, Type, IPA.FeatureSet;
//======================================================================

with IPA
  with Opens
    let Close     = enum {Name: Lang.Close}
    let NearClose = enum {Name: Lang.NearClose}
    let CloseMid  = enum {Name: Lang.CloseMid}
    let Mid       = enum {Name: Lang.Mid}
    let OpenMid   = enum {Name: Lang.OpenMid}
    let NearOpen  = enum {Name: Lang.NearOpen}
    let Open      = enum {Name: Lang.Open}
  end

  with Backnesses
    let Front     = enum {Name: Lang.Front}
    let NearFront = enum {Name: Lang.NearFront}
    let Central   = enum {Name: Lang.Central}
    let NearBack  = enum {Name: Lang.NearBack}
    let Back      = enum {Name: Lang.Back}
  end

  with Places
    let Bilabial       = enum {Name: Lang.Bilabial}
    let Labial         = enum {Name: Lang.Labial}
    let LabialVelar    = enum {Name: Lang.LabialVelar}
    let LabialPalatal  = enum {Name: Lang.LabialPalatal}
    let LabioDental    = enum {Name: Lang.LabioDental}
    let LinguoLabial   = enum {Name: Lang.LinguoLabial}
    let Dental         = enum {Name: Lang.Dental}
    let Alveolar       = enum {Name: Lang.Alveolar}
    let AlveoloPalatal = enum {Name: Lang.AlveoloPalatal}
    let PostAlveolar   = enum {Name: Lang.PostAlveolar}
    let Retroflex      = enum {Name: Lang.Retroflex}
    let Palatal        = enum {Name: Lang.Palatal}
    let PalatoAlveolar = enum {Name: Lang.PalatoAlveolar}
    let Velar          = enum {Name: Lang.Velar}
    let Uvular         = enum {Name: Lang.Uvular}
    let Pharyngeal     = enum {Name: Lang.Pharyngeal}
    let Glottal        = enum {Name: Lang.Glottal}
  end

  with FeatureSet
    let NoFeature   = flag {Name: Lang.NoFeatures}
    let Rounded     = flag {Name: Lang.Rounded}
    let Vocoid      = flag {Name: Lang.Vocoid}
    let Semivowel   = flag {Name: Lang.SemiVowel}
    let LongVowel   = flag {Name: Lang.LongVowel}
    let Voiced      = flag {Name: Lang.Voiced}
    let Velarized   = flag {Name: Lang.Velarized}
    let Ejective    = flag {Name: Lang.Ejective}
    let Pulmonic    = flag {Name: Lang.Pulmonic}
    let Nasal       = flag {Name: Lang.Nasal}
    let Tenuis      = flag {Name: Lang.Tenuis}
    let Lateral     = flag {Name: Lang.Lateral}
    let Sibilant    = flag {Name: Lang.Sibilant}
    let Fricative   = flag {Name: Lang.Fricative}
    let Approximant = flag {Name: Lang.Approximant}
    let Implosive   = flag {Name: Lang.Implosive}
    let Central     = flag {Name: Lang.Central}
    let TapFlap     = flag {Name: Lang.TapFlap}
    let Trill       = flag {Name: Lang.Trill}
    let Stop        = flag {Name: Lang.Stop}
    let Click       = flag {Name: Lang.Click}
    let Affricate   = flag {Name: Lang.Affricate}
    let Vowel       = flag {Name: Lang.Vowel}
    let Rhotic      = flag {Name: Lang.Rhotic}
    let Occlusive   = flag {Name: Lang.Occlusive}
    let Strident    = flag {Name: Lang.Strident}
    let Obstruent   = flag {Name: Lang.Obstruent}
    let Continuant  = flag {Name: Lang.Continuant}
    let Vibrant     = flag {Name: Lang.Vibrant}
    let Liquid      = flag {Name: Lang.Liquid}
  end

  let Encode(ipa, sampa) = {
    Popup: SegmentPopup,
    Ipa: ipa,
    Sampa: sampa,
    Impossible: false,
    Punctuation: false,
    Diacritic: false,
  }

  let Diac(description, ipa, sampa) = Encode(ipa, sampa) {
    Diacritic: true,
    Description: description,
  }

  let Con(features, place, ipa, sampa) = Encode(ipa, sampa) {
    Features: features,
    Place: place,
  }

  let Vow(features, open, backness, ipa, sampa) = Encode(ipa, sampa) {
    Features: features | Vowel,
    Open: open,
    Backness: backness,
  }

  let Dia(ipa, sampa) = Encode(ipa, sampa) {
    Diacritic: true
  }

  let Punct(ipa) = Encode(ipa, ipa) {
    Punctuation: true,
  }

  let Imp(features, place) = {
    Features: features,
    Place: place,
    Diacritic: false,
    Punctuation: false,
    Impossible: true,
  }

  let NoSegment     = Encode("?", "!?") {Impossible: true}
  let GapSegment    = Punct("-")
  let LeftSegment   = Punct("(")
  let RightSegment  = Punct(")")
  let SpaceSegment  = Punct(" ")

  with Segments
    //==================================
    // Extra segments found in word list
    //==================================


    let rn        = Con(Nasal Voiced Pulmonic Fricative, Places.Uvular, "r\u0303", "r~")

// French Cold "Froid"  Same as SAMPA "R"?
//    let r_nasal = Con(Nasal Voiced Pulmonic Fricative, Places.Uvular, "ʁ", "r~")

    //==================================
    // Pulmonic Consonants
    //==================================

    // Nasal					
    let VlBilabialNasal              = Con(Pulmonic Nasal, Places.Bilabial, "m̥", "m_0")
    let m                            = Con(Voiced Pulmonic Nasal Occlusive, Places.Bilabial, "m", "m")
    let VdLabioDentalNasal           = Con(Voiced Pulmonic Nasal Occlusive, Places.LabioDental, "ɱ", "F")
    let VdLinguoLabioNasal           = Con(Voiced Pulmonic Nasal, Places.LinguoLabial, "n̼", "m_d")
    let VlAlveolarNasal              = Con(Pulmonic Nasal, Places.Alveolar, "n̥", "n_0")
    let n                            = Con(Voiced Pulmonic Nasal Occlusive, Places.Alveolar, "n", "n")
    let VlRetroFlexNasal             = Con(Pulmonic Nasal, Places.Retroflex, "ɳ̊", "n`_0")
    let VdRetroFlexNasal             = Con(Voiced Pulmonic Nasal Occlusive, Places.Retroflex, "ɳ", "n`")
    let VlPalatalNasal               = Con(Pulmonic Nasal, Places.Palatal, "ɲ̊", "J_0")
    let VdPalatalNasal               = Con(Voiced Pulmonic Nasal Occlusive, Places.Palatal, "ɲ", "J")
    let VlVelarNasal                 = Con(Pulmonic Nasal, Places.Velar, "ŋ̊", "N_0")
    let nya                          = Con(Voiced Pulmonic Nasal Occlusive, Places.Velar, "ŋ", "N")
    let VdUvularNasal                = Con(Voiced Pulmonic Nasal Occlusive, Places.Uvular, "ɴ", "N\\")
														
    // Stop
    let p                            = Con(Pulmonic Stop Occlusive, Places.Bilabial, "p", "p")
    let b                            = Con(Voiced Pulmonic Stop Occlusive, Places.Bilabial, "b", "b")
    let VlLabioDentalStop            = Con(Pulmonic Stop, Places.LabioDental, "p̪", "p_d")
    let VdLabioDentalStop            = Con(Voiced Pulmonic Stop, Places.LabioDental, "b̪", "b_d")
    let VlLinguoLabialStop           = Con(Pulmonic Stop, Places.LinguoLabial, "t̼", "")
    let VdLinguoLabialStop           = Con(Voiced Pulmonic Stop, Places.LinguoLabial, "d̼", "")
    let t                            = Con(Pulmonic Stop Occlusive, Places.Alveolar, "t", "t")
    let d                            = Con(Voiced Pulmonic Stop Occlusive, Places.Alveolar, "d", "d")
    let VlRetroflexStop              = Con(Pulmonic Stop Occlusive, Places.Retroflex, "ʈ", "t`")
    let VdRetroflexStop              = Con(Voiced Pulmonic Stop Occlusive, Places.Retroflex, "ɖ", "d`")
    let tya                          = Con(Pulmonic Stop Occlusive, Places.Palatal, "c", "c")
    let VdPalatalStop                = Con(Voiced Pulmonic Stop Occlusive, Places.Palatal, "ɟ", "J\\")
    let k                            = Con(Pulmonic Stop Occlusive, Places.Velar, "k", "k")
    let kw                           = Con(Pulmonic Stop Occlusive, Places.Labial, "kʷ", "k_W")

    let g                            = Con(Voiced Pulmonic Stop Occlusive, Places.Velar, "ɡ", "g")
    let gw                           = Con(Voiced Pulmonic Stop Occlusive, Places.Labial, "ɡʷ", "g_W")

    let VlUvularStop                 = Con(Pulmonic Stop Occlusive, Places.Uvular, "q", "q")
    let VdUvularStop                 = Con(Voiced Pulmonic Stop Occlusive, Places.Uvular, "ɢ", "G\\")
    let VdEpiglottalStop             = Con(Pulmonic Stop, Places.Pharyngeal, "ʡ", ">\\")
    let GlottalStop                  = Con(Pulmonic Stop, Places.Glottal, "ʔ", "?")
		
    // Sibilant Fricative										
    let s                            = Con(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Alveolar, "s", "s")
    let zz                           = Con(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Alveolar, "z", "z")
    let shh                          = Con(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.PostAlveolar, "ʃ", "S")
    let gzah                         = Con(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.PostAlveolar, "ʒ", "Z")
    let VlRetroflexSibFricative      = Con(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Retroflex, "ʂ", "s`")
    let VdRetroflexSibFricative      = Con(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Retroflex, "ʐ", "z`")
    let VlPalatalSibFricative        = Con(Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Palatal, "ɕ", "s\\")
    let VdPalatalSibFricative        = Con(Voiced Pulmonic Sibilant Fricative Strident Obstruent Continuant, Places.Palatal, "ʑ", "z\\")

    // Fricative										
    let VlBilabialFricative          = Con(Pulmonic Fricative Obstruent Continuant, Places.Bilabial, "ɸ", "p\\")
    let VdBilabialFricative          = Con(Voiced Pulmonic Fricative Obstruent Continuant, Places.Bilabial, "β", "B")
    let f                            = Con(Pulmonic Fricative Obstruent Continuant Strident, Places.LabioDental, "f", "f")
    let v                            = Con(Voiced Pulmonic Fricative Obstruent Continuant Strident, Places.LabioDental, "v", "v")
    let VlLinguoLabialFricative      = Con(Pulmonic Fricative, Places.LinguoLabial, "θ̼", "")
    let VdLinguoLabialFricative      = Con(Voiced Pulmonic Fricative, Places.LinguoLabial, "ð̼", "")
    let th                           = Con(Pulmonic Fricative Obstruent Continuant, Places.Dental, "θ", "T")
    let VdDentalFricative            = Con(Voiced Pulmonic Fricative Obstruent Continuant, Places.Dental, "ð", "D")
    let VlAlveolarFricative          = Con(Pulmonic Fricative, Places.Alveolar, "θ̠", "")
    let VdAlveolarFricative          = Con(Voiced Pulmonic Fricative, Places.Alveolar, "ð̠", "")
    let VlPostaveolarFricative       = Con(Pulmonic Fricative, Places.PostAlveolar, "ɹ̠̊", "")
    let VdPostalveolarFricative      = Con(Voiced Pulmonic Fricative, Places.PostAlveolar, "ɹ̝̊", "")
    let VdRetroflexFricative         = Con(Voiced Pulmonic Fricative, Places.Retroflex, "ɻ˔","")
    let sh                           = Con(Pulmonic Fricative Obstruent Continuant, Places.Palatal, "ç", "C")
    let VdPalatalFricative           = Con(Voiced Pulmonic Fricative Obstruent Continuant, Places.Palatal, "ʝ", "j\\")
    let xha                          = Con(Pulmonic Fricative Obstruent Continuant, Places.Velar, "x", "x")
    let VdVelarFricative             = Con(Voiced Pulmonic Fricative Obstruent Continuant, Places.Velar, "ɣ", "G")
    let VlUvularFricative            = Con(Pulmonic Fricative Obstruent Continuant Strident, Places.Uvular, "χ", "X")
    let VdUvularFricative            = Con(Voiced Pulmonic Fricative Obstruent Continuant Strident Rhotic Liquid, Places.Uvular, "ʁ", "R")
    let VlPharyngealFricative        = Con(Pulmonic Fricative, Places.Pharyngeal, "ħ", "X\\")
    let VdPharyngealFricative        = Con(Voiced Pulmonic Fricative, Places.Pharyngeal, "ʕ", "?\\")
    let h                            = Con(Pulmonic Fricative, Places.Glottal, "h", "h")
    let VdGlottalFricative           = Con(Voiced Pulmonic Fricative, Places.Glottal, "ɦ", "h\\")
														
    // Approximant										
    let VlLabioDentalApproximant     = Con(Pulmonic Approximant, Places.LabioDental, "ʋ̥", "")
    let VdLabioDentalApproximant     = Con(Voiced Pulmonic Approximant Vocoid Approximant, Places.LabioDental, "ʋ", "v\\")
    let VlPostalveolarApproximant    = Con(Pulmonic Approximant, Places.Alveolar, "ɹ̥", "")
    let VdPostalveolarApproximant    = Con(Voiced Pulmonic Approximant Vocoid Rhotic Liquid, Places.Alveolar, "ɹ", "r\\")
    let VlRetroflexApproximant       = Con(Pulmonic Approximant, Places.Retroflex, "ɻ̊", "")
    let VdRetroflexApproximant       = Con(Voiced Pulmonic Approximant Vocoid Rhotic Liquid, Places.Retroflex, "ɻ", "r\\`")
    let VlPalatalApproximant         = Con(Pulmonic Approximant, Places.Palatal, "j̊", "")
    let jg                           = Con(Voiced Pulmonic Approximant Vocoid Semivowel Continuant, Places.Palatal, "j", "j")
    let VlVelarApproximant           = Con(Pulmonic Approximant, Places.Velar, "ɰ̊", "")
    let VdVelarApproximant           = Con(Voiced Pulmonic Approximant Vocoid Semivowel Continuant, Places.Velar, "ɰ", "M\\")
    let VdGlottalApproximant         = Con(Voiced Pulmonic Approximant, Places.Glottal, "ʔ̞", "")
														
    // Tap or Flap										
    let VdBilabialDentalFlap         = Con(Voiced Pulmonic TapFlap, Places.Bilabial, "ⱱ̟", "")
    let VdLabioDentalFlap            = Con(Voiced Pulmonic TapFlap Vibrant, Places.LabioDental, "ⱱ", "")
    let VdLingualLabialStop          = Con(Voiced Pulmonic TapFlap, Places.LinguoLabial, "ɾ̼", "")
    let VlAlveolarFlap               = Con(Pulmonic TapFlap, Places.Alveolar, "ɾ̥", "")
    let VdAlveolarTap                = Con(Voiced Pulmonic TapFlap Rhotic Liquid Vibrant, Places.Alveolar, "ɾ", "4")
    let VlRetroflexFlap              = Con(Pulmonic TapFlap, Places.Retroflex, "ɽ̊", "")
    let VdRetroflexFlap              = Con(Voiced Pulmonic TapFlap Rhotic Liquid Vibrant, Places.Retroflex, "ɽ", "r`")
    let VdUvularFlap                 = Con(Voiced Pulmonic TapFlap, Places.Uvular, "ɢ̆", "")
    let VdPharyngealFlap             = Con(Voiced Pulmonic TapFlap, Places.Pharyngeal, "ʡ̆", "")
														
    // Trill											
    let VlBilabialTrill              = Con(Pulmonic Trill, Places.Bilabial, "ʙ̥", "")
    let VdBilabialTrill              = Con(Voiced Pulmonic Trill Vibrant, Places.Bilabial, "ʙ", "B\\")
    let VlAlveolarTrill              = Con(Pulmonic Trill, Places.Alveolar, "r̥", "")
    let r                            = Con(Voiced Pulmonic Trill Rhotic Liquid Vibrant, Places.Alveolar, "r", "r")
    let VlRetroflexTrill             = Con(Pulmonic Trill, Places.Retroflex, "ɽ̊r̥", "")
    let VdRetroflexTrill             = Con(Voiced Pulmonic Trill, Places.Retroflex, "ɽr", "")
    let VlUvularTrill                = Con(Pulmonic Trill Rhotic Liquid Vibrant, Places.Uvular, "ʀ", "R\\")
    let VlPharyngealTrill            = Con(Pulmonic Trill, Places.Pharyngeal, "ʜ", "H\\")
    let VdPharyngealTrill            = Con(Voiced Pulmonic Trill, Places.Pharyngeal, "ʢ", "<\\")
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = Con(Pulmonic Lateral Fricative Obstruent Continuant Strident Lateral Liquid, Places.Alveolar, "ɬ", "K")
    let VdAlveolarLateralFricative   = Con(Voiced Pulmonic Lateral Fricative Obstruent Continuant Strident Lateral Liquid, Places.Alveolar, "ɮ", "K\\")
    let VlRetroflexLateralFricative  = Con(Pulmonic Lateral Fricative, Places.Retroflex, "ɭ̊˔", "")
    let VdRetroflexLateralFricative  = Con(Voiced Pulmonic Lateral Fricative, Places.Retroflex, "ɭ˔", "")
    let VlAlveolarPalatalFricative   = Con(Pulmonic Lateral Fricative, Places.Palatal, "ʎ̝̊", "")
    let VdAlveolarPalatalFricative   = Con(Voiced Pulmonic Lateral Fricative, Places.Palatal, "ʎ̝", "")
    let VlVelarPalatalFricative      = Con(Pulmonic Lateral Fricative, Places.Velar, "ʟ̝̊", "")
    let VdVelarPalatalFricative      = Con(Voiced Pulmonic Lateral Fricative, Places.Velar, "ʟ̝", "")
														
    // LateralApproximant								
    let VlAlveolarLateralApproximant = Con(Pulmonic Lateral Approximant, Places.Alveolar, "l̥", "")
    let l                            = Con(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Alveolar, "l", "l")
    let ssha                         = Con(Voiced Velarized Pulmonic Lateral Approximant, Places.Alveolar, "ɫ", "5")
    let VlRetroflexLateral           = Con(Pulmonic Lateral Approximant, Places.Retroflex, "ɭ̊", "")
    let VdRetroflexLateral           = Con(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Retroflex, "ɭ", "n`")
    let VlPalatalLateral             = Con(Pulmonic Lateral Approximant, Places.Palatal, "ʎ̥", "")
    let yuh                          = Con(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Palatal, "ʎ", "L")
    let VlVelarLateral               = Con(Pulmonic Lateral Approximant, Places.Velar, "ʟ̥", "")
    let VdVelarLateral               = Con(Voiced Pulmonic Lateral Approximant Vocoid Rhotic Liquid Lateral, Places.Velar, "ʟ", "L\\")
    let VdUvularLateral              = Con(Voiced Pulmonic Lateral Approximant, Places.Uvular, "ʟ̠", "")

    // Lateral tap/flap
    let VdAlveolarLateralFlap        = Con(Voiced Pulmonic Lateral TapFlap Vibrant Rhotic Liquid, Places.Alveolar, "ɺ", "l\\")
    let VdRetroflexLateralFlap       = Con(Voiced Pulmonic Lateral TapFlap, Places.Retroflex, "ɭ̆", "")
    let VdPalatalLateralFlap         = Con(Voiced Pulmonic Lateral TapFlap, Places.Palatal, "ʎ̆", "")
    let VdVelarLateralTap            = Con(Voiced Pulmonic Lateral TapFlap, Places.Velar, "L̆", "")


    //==================================
    // Non-Pulmonic Consonants
    //==================================

    // Clicks
    let VlBilabialTenuisClick        = Con(Ejective Tenuis Click Affricate, Places.Bilabial, "ʘ", "O\\")
    let VdBilabialTenuisClick        = Con(Voiced Ejective Tenuis Click Affricate, Places.Bilabial, "ʘ̬", "")
    let VlDentalTenuisClick          = Con(Ejective Tenuis Click Affricate, Places.Dental, "ǀ", "|")
    let VdDentalTenuisClick          = Con(Voiced Ejective Tenuis Click Affricate, Places.Dental, "ǀ̬", "")
    let VlAlveolarTenuisClick        = Con(Ejective Tenuis Click Affricate, Places.Alveolar, "ǃ", "!\\")
    let VdAlveolarTenuisClick        = Con(Voiced Ejective Tenuis Click Affricate, Places.Alveolar, "ǃ̬", "")
    let VlPalatalTenuisClick         = Con(Ejective Tenuis Click Affricate, Places.Palatal, "ǂ", "=\\")
    let VdPalatalTenuisClick         = Con(Voiced Ejective Tenuis Click Affricate, Places.Palatal, "ǂ̬", "")

    let VlBilabialNasalClick         = Con(Ejective Nasal Click Affricate, Places.Bilabial, "ʘ̃", "")
    let VlDentalNasalClick           = Con(Ejective Nasal Click Affricate, Places.Dental, "ǀ̃", "")
    let VlAlveolarNasalClick         = Con(Ejective Nasal Click Affricate, Places.Alveolar, "ǃ̃", "")
    let VlPalatalNasalClick          = Con(Ejective Nasal Click Affricate, Places.Palatal, "ǂ̃", "")

    let VlAlveolarTenuisLateralClick = Con(Ejective Tenuis Lateral Click Affricate, Places.Alveolar, "ǁ", " | \\ | \\")
    let VdAlveolarTenuisLateralClick = Con(Voiced Ejective Tenuis Lateral Click Affricate, Places.Alveolar, "ǁ̬", "")

    let VlBilabialImplosiveClick     = Con(Ejective Implosive Click Affricate, Places.Bilabial, "ɓ̥", "")
    let VdBilabialImplosiveClick     = Con(Voiced Ejective Implosive Click Affricate, Places.Bilabial, "ɓ", "b_<")
    let VlAlveolarImplosiveClick     = Con(Ejective Implosive Click Affricate, Places.Alveolar, "ɗ̥", "")
    let VdAlveolarImplosiveClick     = Con(Voiced Ejective Implosive Click Affricate, Places.Alveolar, "ɗ", "d_<")
    let VlRetroflexImplosiveClick    = Con(Ejective Implosive Click Affricate, Places.Retroflex, "ᶑ̊", "")
    let VdRetroflexImplosiveClick    = Con(Voiced Ejective Implosive Click Affricate, Places.Retroflex, "ᶑ", "")
    let VlPalatalImplosiveClick      = Con(Ejective Implosive Click Affricate, Places.Palatal, "ʄ̊", "")
    let VdPalatalImplosiveClick      = Con(Voiced Ejective Implosive Click Affricate, Places.Palatal, "ʄ", "J\\_<")
    let VlVelarImplosiveClick        = Con(Ejective Implosive Click Affricate, Places.Velar, "ɠ̊", "")
    let VdVelarImplosiveClick        = Con(Voiced Ejective Implosive Click Affricate, Places.Velar, "ɠ", "g_<")
    let VlUvularImplosiveClick       = Con(Ejective Implosive Click Affricate, Places.Uvular, "ʛ̥", "")
    let VdUvularImplosiveClick       = Con(Voiced Ejective Implosive Click Affricate, Places.Uvular, "ʛ", "G\\_<")

    //==================================
    // Pulmonic Affricates
    //==================================

    // Sibilants
    let VlAlveolarAffricate          = Con(Pulmonic Sibilant Affricate Occlusive Strident, Places.Alveolar, "ts", "")
    let VdAlveolarAffricate          = Con(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.Alveolar, "dz", "")
    let VlPostalveolarAffricate      = Con(Pulmonic Sibilant Affricate Occlusive Strident, Places.PalatoAlveolar, "t̠ʃ", "")
    let VdPostalveolarAffricate      = Con(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.PalatoAlveolar, "d̠ʒ", "")
    let VlRetroflexAffricate         = Con(Pulmonic Sibilant Affricate Occlusive Strident, Places.Retroflex, "ʈʂ", "")
    let VdRetroflexAffricate         = Con(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.Retroflex, "ɖʐ", "")
    let VlAlveoloPalatalAffricate    = Con(Pulmonic Sibilant Affricate Occlusive Strident, Places.AlveoloPalatal, "tɕ", "")
    let VdAlveoloPalatalAffricate    = Con(Voiced Pulmonic Sibilant Affricate Occlusive Strident, Places.AlveoloPalatal, "dʑ", "")

    // Non-Sibilants
    let VlBilabialNSAffricate        = Con(Pulmonic Affricate Occlusive, Places.Bilabial, "pɸ", "")
    let VdBilabialNSAffricate        = Con(Voiced Pulmonic Affricate Occlusive, Places.Bilabial, "bβ", "")
    let VlLabioDentalNSAffricate     = Con(Pulmonic Affricate Occlusive Strident, Places.LabioDental, "p̪f", "")
    let VdLabioDentalNSAffricate     = Con(Voiced Pulmonic Affricate Occlusive Strident, Places.LabioDental, "b̪v", "")
    let VlDentalNSAffricate          = Con(Pulmonic Affricate Occlusive, Places.Dental, "t̪θ", "")
    let VdDentalNSAffricate          = Con(Voiced Pulmonic Affricate Occlusive, Places.Dental, "d̪ð", "")
    let VlAlveolarNSAffricate        = Con(Pulmonic Affricate, Places.Alveolar, "tɹ̝̊", "")
    let VdAlveolarNSAffricate        = Con(Voiced Pulmonic Affricate, Places.Alveolar, "dɹ̝", "")
    let VlPalatoAlveolarNSAffricate  = Con(Pulmonic Affricate, Places.PalatoAlveolar, "t̠ɹ̠̊˔", "")
    let VdPalatoAlveolarNSAffricate  = Con(Voiced Pulmonic Affricate, Places.PalatoAlveolar, "d̠ɹ̠˔", "")
    let VlPalatalNSAffricate         = Con(Pulmonic Affricate Occlusive, Places.Palatal, "cç", "")
    let VdPalatalNSAffricate         = Con(Voiced Pulmonic Affricate Occlusive, Places.Palatal, "ɟʝ", "")
    let VlVelarNSAffricate           = Con(Pulmonic Affricate Occlusive, Places.Velar, "kx", "")
    let VdVelarNSAffricate           = Con(Voiced Pulmonic Affricate Occlusive, Places.Velar, "ɡɣ", "")
    let VlUvularNSAffricate          = Con(Pulmonic Affricate, Places.Uvular, "qχ", "")
    let VdEpiglottalNSAffricate      = Con(Voiced Pulmonic Affricate, Places.Pharyngeal, "ʡʢ", "")
    let VlGlottalNSAffricate         = Con(Pulmonic Affricate, Places.Glottal, "ʔh", "")

    // Lateral
    let VlAlveolarLateralAffricate   = Con(Pulmonic Lateral Affricate, Places.Alveolar, "tɬ̝̊", "")
    let VdAlveolarLateralAffricate   = Con(Voiced Pulmonic Lateral Affricate, Places.Alveolar, "dɮ", "")
    let VlRetroflexLateralAffricate  = Con(Pulmonic Lateral Affricate, Places.Retroflex, "ʈɭ̊˔", "")
    let VdPalatalLateralAffricate    = Con(Voiced Pulmonic Lateral Affricate, Places.Palatal, "cʎ̝̊", "")
    let VlVelarLateralAffricate      = Con(Pulmonic Lateral Affricate, Places.Velar, "kʟ̝̊", "")
    let VdVelarLateralAffricate      = Con(Voiced Pulmonic Lateral Affricate, Places.Velar, "ɡʟ̝", "")

    //==================================
    // Ejective | Affricates
    //==================================

    // Central
    let VlAlveolarEjectiveAffricate       = Con(Ejective Central Affricate, Places.Alveolar, "tsʼ", "")
    let VlPalatoAlveolarEjectiveAffricate = Con(Ejective Central Affricate, Places.PalatoAlveolar, "t̠ʃʼ", "")
    let VlRetroflexEjectiveAffricate      = Con(Ejective Central Affricate, Places.Retroflex, "ʈʂʼ", "")
    let VlVelarEjectiveAffricate          = Con(Ejective Central Affricate, Places.Velar, "kxʼ", "")
    let VlUvularEjectiveAffricate         = Con(Ejective Central Affricate, Places.Uvular, "qχʼ", "")

    // Lateral
    let VlAlveolarLateralEjective         = Con(Ejective Lateral Affricate, Places.Alveolar, "tɬʼ", "")
    let VlPalatalLateralEjective          = Con(Ejective Lateral Affricate, Places.Palatal, "cʎ̝̊ʼ", "")
    let VlVelarLateralEjective            = Con(Ejective Lateral Affricate, Places.Velar, "kʟ̝̊ʼ", "")

    let VlLabialVelarApproximant          = Con(Approximant Vocoid Semivowel Continuant, Places.LabialVelar, "ʍ", "W")

// Pre-existing
//    let VlAlveoloPalatalFricative1      = NewConsonant(CPM(Categories.Other, Places.AlveoloPalatal) Fricative, "ɕ", "")
//    let VlAlveoloPalatalFricative       = NewConsonant(CPM(Categories.Other, Places.AlveoloPalatal) Fricative, "ʑ", "")


    let wh                                = Con(Nasal Voiced Approximant Nasal, Places.LabialVelar, "w\u0303", "w~")
    let w                                 = Con(Voiced Approximant Vocoid Semivowel Continuant, Places.LabialVelar, "w", "w")

// This conflicts with another segment (VlPharyngealTrill)

//    let VlEpiglottalFricative             = Con(Fricative, Places.Pharyngeal, "ʜ", "H\\")


    let VdLabialPalatalApproximant        = Con(Voiced Approximant Vocoid Semivowel Continuant, Places.LabialPalatal, "ɥ", "H")

    let SimultaneousSx                    = Con(Sibilant Fricative, Places.PostAlveolar, "ɧ", "x\\")
    let VdEpiglottalFricative             = Con(Voiced Fricative, Places.Pharyngeal, "ʢ", "?\\")
    let VlEpiglottalPlosive               = Con(Ejective, Places.Pharyngeal, "ʡ", "<\\")

    // Ejectives
    let VlBilabialStopEjective            = Con(Ejective Pulmonic Stop, Places.Bilabial, "p\u02BC", "p_>")
    let VlAveolarStopEjective             = Con(Ejective Stop, Places.Alveolar, "t\u02BC", "t_>")
    let VlRetroflexStopEjective           = Con(Ejective Stop, Places.Retroflex, "ʈ\u02BC", "t`_>")
    let VlPalatalStopEjective             = Con(Ejective Stop, Places.Palatal, "c\u02BC", "c_>")
    let VlVelarStopEjective               = Con(Ejective Stop, Places.Velar, "k\u02BC", "k_>")
    let VlUvularStopEjective              = Con(Ejective Stop, Places.Uvular, "q\u02BC", "q_>")
    let VlEpiglottalStopEjective          = Con(Ejective Stop, Places.Pharyngeal, "ʡ\u02BC", ">\\_>")
    let VlBilabialFricativeEjective       = Con(Ejective Fricative, Places.Bilabial, "ɸ\u02BC", "p\\_>")
    let VlLabiodentalFricativeEjective    = Con(Ejective Fricative, Places.LabioDental, "f\u02BC", "f_>")
    let VlDentalFricativeEjective         = Con(Ejective Fricative, Places.Dental, "θ\u02BC", "T_>")
    let VlAlveolarFricativeEjective       = Con(Ejective Fricative, Places.Alveolar, "s\u02BC", "s_>")
    let VlPostalveolarFricativeEjective   = Con(Ejective Fricative, Places.PostAlveolar, "ʃ\u02BC", "S_>")
    let VlRetroflexFricativeEjective      = Con(Ejective Fricative, Places.Retroflex, "ʂ\u02BC", "s`_>")
    let VlPalatalFricativeEjective        = Con(Ejective Fricative, Places.Palatal, "ɕ\u02BC", "s\\_>")
    let VlVelarFricativeEjective          = Con(Ejective Fricative, Places.Velar, "x\u02BC" , "x_>")
    let VlUvularFricativeEjective         = Con(Ejective Fricative, Places.Uvular, "χ\u02BC", "X_>")
    let VlPostalveolarLatFricEjective     = Con(Ejective Lateral Fricative, Places.Alveolar, "ɬ\u02BC", "K_>")

    //==================================
    // Vowels
    //==================================

    let e                         = Vow(Vocoid Continuant, Opens.Close, Backnesses.Front, "i", "i")
    let E                         = Vow(LongVowel Vocoid Continuant, Opens.Close, Backnesses.Front, "iː", "i:")
    let eeh                       = Vow(Rounded Vocoid Continuant, Opens.Close, Backnesses.Front, "y", "y")

    let CloseCentralUnrounded     = Vow(NoFeature, Opens.Close, Backnesses.Central, "ɨ", "1")
    let CloseCentralRounded       = Vow(Rounded, Opens.Close, Backnesses.Central, "ʉ", "}")
    let CloseBackUnrounded        = Vow(Vocoid Continuant, Opens.Close, Backnesses.Back, "ɯ", "M")
    let u                         = Vow(Rounded Vocoid Continuant, Opens.Close, Backnesses.Back, "u", "u")

    let NearCloseCentralUnrounded = Vow(NoFeature, Opens.NearClose, Backnesses.Central, "ᵻ", "I\\")
    let NearCloseFrontUnrounded   = Vow(NoFeature, Opens.NearClose, Backnesses.NearFront, "ɪ", "I")
    let NearCloseFrontRounded     = Vow(Rounded, Opens.NearClose, Backnesses.NearFront, "ʏ", "Y")
    let NearCloseCentralRounded   = Vow(Rounded, Opens.NearClose, Backnesses.Central, "ᵿ", "U\\")

    let NearCloseBackRounded      = Vow(Rounded, Opens.NearClose, Backnesses.NearBack, "ʊ", "U")
    let U                         = Vow(LongVowel Rounded, Opens.Close, Backnesses.Back, "uː", "u:")

    let ay                        = Vow(Vocoid Continuant, Opens.CloseMid, Backnesses.Front, "e", "e")
    let CloseMidFrontRounded      = Vow(Rounded Vocoid Continuant, Opens.CloseMid, Backnesses.Front, "ø", "2")
    let MidCentralUnrounded       = Vow(NoFeature, Opens.Mid, Backnesses.Central, "ɘ", "@\\")
    let Schwa                     = Vow(NoFeature, Opens.CloseMid, Backnesses.Central, "ə", "@")
    let ooh                       = Vow(Rounded, Opens.CloseMid, Backnesses.Central, "ɵ", "8")
    let CloseMidBackUnrounded     = Vow(Vocoid Continuant, Opens.CloseMid, Backnesses.Back, "ɤ", "7")
    let oh                        = Vow(Rounded Vocoid Continuant, Opens.CloseMid, Backnesses.Back, "o", "o")

    let MidFrontUnrounded         = Vow(NoFeature, Opens.Mid, Backnesses.Front, "ø̞", "")
    let MidBackUnrounded          = Vow(NoFeature, Opens.Mid, Backnesses.Back, "o̞", "")

    let eh                        = Vow(Vocoid Continuant, Opens.OpenMid, Backnesses.NearFront, "ɛ", "E")
    let ai                        = Vow(LongVowel Vocoid Continuant, Opens.Mid, Backnesses.Front, "eː", "e:")

    let OpenMidNearFrontRounded   = Vow(Rounded Vocoid Continuant, Opens.OpenMid, Backnesses.NearFront, "œ", "9")
    let OpenMidCentralRounded     = Vow(Rounded, Opens.OpenMid, Backnesses.Central, "ɞ", "3\\")
    let aeh                       = Vow(NoFeature, Opens.OpenMid, Backnesses.Central, "ɜ", "3")
    let OpenMidBackUnrounded      = Vow(Vocoid Continuant, Opens.OpenMid, Backnesses.Back, "ʌ", "V")
    let OpenMidBackRounded        = Vow(Rounded Vocoid Continuant, Opens.OpenMid, Backnesses.Back, "ɔ", "O")
    let O                         = Vow(LongVowel Rounded Vocoid Continuant, Opens.Mid, Backnesses.Back, "oː", "o:")

    let NearFrontUnrounded        = Vow(NoFeature, Opens.NearOpen, Backnesses.NearFront, "æ", "{")
    let FrontOpenRounded          = Vow(Rounded, Opens.NearOpen, Backnesses.NearFront, "ɶ", "&")
    let OpenMidSchwa              = Vow(Rounded, Opens.NearOpen, Backnesses.Central, "ɐ", "6")

    let OpenCentralUnrounded      = Vow(NoFeature, Opens.Open, Backnesses.Central, "ä", "a_\"")
    let ah                        = Vow(Vocoid Continuant, Opens.Open, Backnesses.NearFront, "a", "a")
    let A                         = Vow(LongVowel Vocoid Continuant, Opens.Open, Backnesses.Central, "aː", "a:")

    let OpenNearFrontRounded      = Vow(Rounded Vocoid Continuant, Opens.Open, Backnesses.NearFront, "ɶ", "&")
    let OpenBackUnrounded         = Vow(Vocoid Continuant, Opens.Open, Backnesses.Back, "ɑ", "A")
    let OpenBackRounded           = Vow(Rounded Vocoid Continuant, Opens.Open, Backnesses.Back, "ɒ", "Q")

    let uuh                       = Vow(Nasal Rounded, Opens.OpenMid, Backnesses.NearFront, "œ\u0303", "oe*") // French One "un"
    let ey                        = Vow(Rounded Nasal, Opens.Close, Backnesses.Front, "y\u0303", "y~")
    let aa                        = Vow(Nasal, Opens.Open, Backnesses.NearFront, "a\u0303", "~a")
    let ahn                       = Vow(Nasal Rounded, Opens.NearOpen, Backnesses.Central, "ɐ\u0303", "a*")   // Supposed to be "ɛ̃" as in French Dog "chien"?
    let oon                       = Vow(Nasal Rounded, Opens.OpenMid, Backnesses.Back, "ɔ\u0303", "o*")       // French Fish "poisson"
    let aehn                      = Vow(Nasal, Opens.OpenMid, Backnesses.NearFront, "ɜ\u0303", "3*")
    let ehnn                      = Vow(Nasal, Opens.OpenMid, Backnesses.NearFront, "ɛ\u0303", "E*")
    let uh                        = Vow(Nasal Rounded, Opens.Close, Backnesses.Back, "u\u0303", "u*")         // Portuguese One "um"
    let en                        = Vow(Nasal, Opens.CloseMid, Backnesses.Front, "e\u0303", "e*")             // Portuguese Trail "se*da
    let een                       = Vow(Nasal, Opens.Close, Backnesses.Front, "i\u0303", "i*")                // Portuguese Tongue


// How to show rhotic vowels?
//    let OpenMidCentralRhotic       = Vow(Rhotic, Opens.OpenMid, Backnesses.Central, "ɝ", "")
//    let RhoticSchwa                = Vow(Rhotic, Opens.Open, Backnesses.NearFront, "ɚ", "@`")
  end

  with ImpossibleSegments
    let I10 = Imp(Pulmonic Nasal, Places.Pharyngeal)
    let I11 = Imp(Pulmonic Nasal, Places.Glottal)
    let I12 = Imp(Pulmonic Stop Voiced, Places.Pharyngeal)
    let I13 = Imp(Pulmonic Stop Voiced, Places.Glottal)
    let I14 = Imp(Pulmonic Sibilant Fricative, Places.Bilabial)
    let I15 = Imp(Pulmonic Sibilant Fricative, Places.LabioDental)
    let I16 = Imp(Pulmonic Sibilant Fricative, Places.LinguoLabial)
    let I17 = Imp(Pulmonic Sibilant Fricative, Places.Velar)
    let I18 = Imp(Pulmonic Sibilant Fricative, Places.Uvular)
    let I19 = Imp(Pulmonic Sibilant Fricative, Places.Pharyngeal)
    let I20 = Imp(Pulmonic Sibilant Fricative, Places.Glottal)
    let I21 = Imp(Pulmonic Trill, Places.Velar)
    let I22 = Imp(Pulmonic Trill, Places.Glottal)
    let I23 = Imp(Pulmonic TapFlap, Places.Velar)
    let I24 = Imp(Pulmonic TapFlap, Places.Glottal)
    let I25 = Imp(Pulmonic Lateral Fricative, Places.Bilabial)
    let I26 = Imp(Pulmonic Lateral Fricative, Places.LabioDental)
    let I27 = Imp(Pulmonic Lateral Fricative, Places.Pharyngeal)
    let I28 = Imp(Pulmonic Lateral Fricative, Places.Glottal)
    let I29 = Imp(Pulmonic Lateral Approximant, Places.Bilabial)
    let I30 = Imp(Pulmonic Lateral Approximant, Places.LabioDental)
    let I31 = Imp(Pulmonic Lateral Approximant, Places.Pharyngeal)
    let I32 = Imp(Pulmonic Lateral Approximant, Places.Glottal)
    let I33 = Imp(Pulmonic Lateral TapFlap, Places.Bilabial)
    let I34 = Imp(Pulmonic Lateral TapFlap, Places.LabioDental)
    let I35 = Imp(Pulmonic Lateral TapFlap, Places.Pharyngeal)
    let I36 = Imp(Pulmonic Lateral TapFlap, Places.Glottal)
    let I37 = Imp(Pulmonic Sibilant Affricate, Places.Bilabial)
    let I38 = Imp(Pulmonic Sibilant Affricate, Places.LabioDental)
    let I39 = Imp(Pulmonic Sibilant Affricate, Places.Velar)
    let I40 = Imp(Pulmonic Sibilant Affricate, Places.Uvular)
    let I41 = Imp(Pulmonic Sibilant Affricate, Places.Pharyngeal)
    let I42 = Imp(Pulmonic Sibilant Affricate, Places.Glottal)
    let I43 = Imp(Pulmonic Lateral Affricate, Places.Bilabial)
    let I44 = Imp(Pulmonic Lateral Affricate, Places.LabioDental)
    let I45 = Imp(Pulmonic Lateral Affricate, Places.Pharyngeal)
    let I46 = Imp(Pulmonic Lateral Affricate, Places.Glottal)
    let I47 = Imp(Ejective Lateral Fricative Affricate, Places.Bilabial)
    let I48 = Imp(Ejective Lateral Fricative Affricate, Places.LabioDental)
    let I49 = Imp(Ejective Lateral Fricative Affricate, Places.Pharyngeal)
    let I50 = Imp(Ejective Central Affricate, Places.Glottal)
    let I51 = Imp(Ejective Lateral Affricate, Places.Bilabial)
    let I52 = Imp(Ejective Lateral Affricate, Places.LabioDental)
    let I53 = Imp(Ejective Lateral Affricate, Places.Pharyngeal)
    let I54 = Imp(Ejective Lateral Affricate, Places.Glottal)
    let I55 = Imp(Ejective Tenuis Click Affricate, Places.Velar)
    let I56 = Imp(Ejective Tenuis Click Affricate, Places.Uvular)
    let I57 = Imp(Ejective Tenuis Click Affricate, Places.Pharyngeal)
    let I58 = Imp(Ejective Nasal Click Affricate, Places.Velar)
    let I59 = Imp(Ejective Nasal Click Affricate, Places.Uvular)
    let I60 = Imp(Ejective Nasal Click Affricate, Places.Pharyngeal)
    let I61 = Imp(Ejective Tenuis Lateral Click Affricate, Places.Bilabial)
    let I62 = Imp(Ejective Tenuis Lateral Click Affricate, Places.LabioDental)
    let I63 = Imp(Ejective Tenuis Lateral Click Affricate, Places.Velar)
    let I64 = Imp(Ejective Tenuis Lateral Click Affricate, Places.Uvular)
    let I65 = Imp(Ejective Tenuis Lateral Click Affricate, Places.Pharyngeal)
  end                       									

  let AllSegments = Results.UsedSegments + ImpossibleSegments

  with DiacriticModifiers
    let UndefinedEscapeCharacter     = Diac("Undefined escape character", null, "*")
    let Nasalized                    = Diac("Nasalized", "\u0303", "_~")
    let Centralized                  = Diac("Centralized", "\u0308", "_\"")
    let Advanced                     = Diac("Advanced", "\u031F", "_+")
    let Retracted                    = Diac("Retracted", "\u0320", "_-")
    let RisingTone                   = Diac("RisingTone ", "\u030C", "_R")
    let Voiceless                    = Diac("Voiceless", "\u0325", "_0")
    let Implosive                    = Diac("Implosive", null, "_<")
    let Syllabic                     = Diac("Syllabic", "\u0329", "_=")
    let Ejective                     = Diac("Ejective", "\u02BC", "_>")
    let Pharyngealized               = Diac("Pharyngealized ", "\u02E4", "_?\\")
    let FallingTone                  = Diac("Falling tone", "\u0302", "_F")
    let NonSyllabic                  = Diac("Non-syllabic", "\u032F", "_^")
    let NoAudibleRelease             = Diac("No audible release", "\u031A", "_}")
    let RhoticHook                   = Diac("Rhotic hook", "\u02DE", "`")
    let AdvancedTongueRoot           = Diac("Advanced tongue root ", "\u0318", "_A")
    let Apical                       = Diac("Apical", "\u033A", "_a")
    let ExtraLowTone                 = Diac("Extra low tone", "\u030F", "_B")
    let LowRisingTone                = Diac("Low rising tone", "\u1DC5", "_B_L")
    let LessRounded                  = Diac("Less rounded", "\u031C", "_c")
    let Dental                       = Diac("Dental", "\u032A", "_d")
    let VelarizedOrPharyngealized    = Diac("Velarized or Pharyngealized", "\u0334", "_e")
    let GlobalFall                   = Diac("Global fall", "\u2198", "<F>")
    let Velarized                    = Diac("Velarized", "\u02E0", "_G")
    let HighTone                     = Diac("High tone", "\u0301", "_H")
    let HighRisingTone               = Diac("High rising tone", "\u1DC4", "_H_T")
    let Aspirated                    = Diac("Aspirated", "\u02B0", "_h")
    let Palatalized                  = Diac("Palatalized", "\u02B2", "_j")
    let CreakyVoiced                 = Diac("Creaky voiced", "\u0330", "_k")
    let LowTone                      = Diac("Low tone", "\u0300", "_L")
    let LateralRelease               = Diac("Lateral release", "\u02E1", "_l")
    let MidTone                      = Diac("Mid tone", "\u0304", "_M")
    let Laminal                      = Diac("Laminal", "\u033B", "_m")
    let LinguoLabial                 = Diac("Linguo-Labial", "\u033C", "_N")
    let NasalRelease                 = Diac("Nasal release", "\u207F", "_n")
    let MoreRounded                  = Diac("More rounded", "\u0339", "_O")
    let Lowered                      = Diac("Lowered", "\u031E", "_o")
    let RetractedTongueRoot          = Diac("Retracted tongue root", "\u0319", "_q")
    let GlobalRise                   = Diac("Global rise", "\u2197", "<R>")
    let RisingFallingTone            = Diac("Rising falling tone", "\u1DC8", "_R_F")
    let Raised                       = Diac("Raised", "\u031D", "_r")
    let ExtraHighTone                = Diac("Extra high tone", "\u030B", "_T")
    let BreathyVoiced                = Diac("Breathy voiced", "\u0324", "_t")
    let Voiced                       = Diac("Voiced", "\u032C", "_v")
    let Labialized                   = Diac("Labialized", "\u02B7", "_W")
    let ExtraShort                   = Diac("Extra short", "\u02D8", "_X")
    let MidCentralized               = Diac("Mid-centralized", "\u033D", "_x")
    let Downstep                     = Diac("Down-step", "↓", "!")
    let Upstep                       = Diac("Up-step", "↑", "^")
    let SylableBreak                 = Diac("Sylable break", ".", ".")
    let PrimaryStress                = Diac("Primary stress", "ˈ", "\"")
    let SecondaryStress              = Diac("Secondary stress", "ˌ", "%")
    let Long                         = Diac("Long", "ː", ":")
    let HalfLong                     = Diac("Half-long", "ˑ", ":\\")
    let IndeterminacyinFrenchVowels  = Diac("Indeterminacy in french vowels", null, "/")
    let BeginNonsegmentalNotation    = Diac("Begin Non-segmental notation", null, "<")
    let Endnonsegmentalnotation      = Diac("End non-segmental notation", "", ">")
    let Voicedepiglottalfricative    = Diac("Voiced epiglottal fricative", "ʢ", "<\\")
    let Postalveolarclick            = Diac("Post-alveolar click", "ǃ", "!\\")
    let MinorGroup                   = Diac("Minor group", " | ", " | ")
    let Dentalclick                  = Diac("Dental click", "ǀ", " | \\")
    let MajorGroup                   = Diac("Major group", "‖", " |  | ")
    let Alveolarlateralclick         = Diac("Alveolar lateral click", "ǁ", " | \\ | \\")
    let Palatalclick                 = Diac("Palatal click", "ǂ", "")
//    let Linkingmark                  = Diac("Linking Mark", "\u203f", "-\\")
    let VoicelessDescender           = Diac("Voiceless descender", "\u030A", "")
    let CombiningMacron              = Diac("Combining macron", "\u0331", "")
    let TieBarBelow                  = Diac("Tie-bar below", "\u035C", "")
    let TieBarAbove                  = Diac("Tie-bar above", "\u0361", "")
    let ReadyMadeCombination         = Diac("Ready made combination", "\u026B", "")
    let Becomes                      = Diac("Becomes", "→", "")
    let Separator                    = Diac("Separator", "", "-")
  end

  //======================================================================

  let HasFeature(feature, f)    = (feature & f) != NoFeature
  let NotFeature(feature, f)    = (feature & f) == NoFeature
  let HasMask(feature, mask, f) = (feature & mask) == (f & mask)

  //======================================================================

  let SegmentColumns = 4
  let SegmentSize    = 40 pts

  let ShowSampa(sampa) = Span {
    Style.MonoFamily,
    sampa,
  }

  let SegmentName(segment) = Span {
    if (segment.Features.HasFeature(Vowel))
      segment.Open,
      Space,
      segment.Backness,
    else
      segment.Place,
    end,
    Space,
    Span {
      Separator: Space,
      if (segment.Diacritic)
        segment.Description
      else
        each segment.Features,
      end
    }
  }

  let SegmentDisplay(segment, location) = Block {
    ParAlignment: ParAlignments.Center,
    Paragraph {
      LocationMark: location,
      SpaceBefore: 8 pts,
      SpaceAfter: 8 pts,
      TextHeight: SegmentSize,
      Style.IPAFamily,
      SpaceAfter: SegmentSize * 0.125,
      segment.Ipa,
    },
    Paragraph {
      TextHeight: 10 pts,
      SegmentName(segment),
    },
    Paragraph {
      TextHeight: 8 pts,
      ParBackground: 95%,
      Style.MonoFamily,
      TextRadix: 16,
      TextDigits: 4,
      Span {
        Separator: Lang.Separator,
        if (segment.Ipa)
          Type.Integer(each segment.Ipa)
        end
      }
    },
    Paragraph {
      TextHeight: 8 pts,
      if (segment.Sampa and segment.Sampa.Length > 0)
        ParBackground: 90%,
        ShowSampa(segment.Sampa)
      else
        if (segment.Ipa.Length > 0)
          "No Sampa" {TextColor: Colors.White},
          ParBackground: Colors.Red,
        end
      end
    },
  }

  let SegmentPopup(segment) = Frame {
    Width: 2 inches,
    SegmentDisplay(segment, null)
  }

  let SegmentCell(segment) = Cell {
    Edge: 0.25 pts {Color: Colors.LightGray},
    Padding: 2 pts,
    SegmentDisplay(segment, segment.Key)
  }

  let SegmentRow(segments) = Row {
    SegmentCell(each segments)
  }

  let AlphaOrder(x, y) begin
    var cl = Math.Compare(x.Ipa.Length, y.Ipa.Length);
    if (cl == 0)
      cl = -Math.Compare(x.Ipa, y.Ipa)
    end
    return cl;
  end

  let SortedSegments = Results.UsedSegments.Sort(false, AlphaOrder)

  let SegmentTable = Block {
    Table {
      Columns: [Metrics.Content.Width / SegmentColumns] * SegmentColumns,
      Style.TitleBar(Lang.IPAListing, SegmentColumns),
      SegmentRow(each (SortedSegments / SegmentColumns))
    },
    Style.TableNotes
  }

  let ShowIPA(word) = Span {
    (each word.Segments).Ipa
  }

  let ShowCharacter(c) = Span {
    Popup: SegmentPopup.Call(c.Segment),
//    Link: c.Segment.Key,
    c.Character
  }

  let ShowSegment(segment) = Span {
    Style.IPAFamily,
    Popup: SegmentPopup.Call(segment),
//    Link: segment.Key,
    if (segment.Impossible)
      Assert(false, Lang.Impossible),
      TextColor: Colors.Red,
    end,
    if (segment.Diacritic)
      "  ",
    end,
    segment.Ipa
  }

  let SegmentSound(segment) begin
    if (segment == SpaceSegment)
      return Space;
    end
    return segment.Name
  end

  let LangHasMeaning(word, meaning) = word.Meaning == meaning
  let FindWordsWithMeaning(language, meaning) = language.Words.FindSlice(LangHasMeaning, meaning)

  //======================================================================
  // Build a dictionary with SAMPA text as the key
  //======================================================================

  let GatherText(set, segment) begin
    if (segment.Sampa.Length > 0)
      set.AddElement(segment, segment.Sampa)
    end
  end

  let SampaSet begin
    var set = Type.Dictionary(128);
    GatherText(set, each Segments);
    set.AddElement(SpaceSegment, " ");
    return set;
  end

  //======================================================================
  // Code for Euler segment diagram
  //======================================================================

  let ChartSize = 6 inches
  let EX(x)     = ChartSize * x * 0.01
  let EY(y)     = ChartSize * y * 0.01

  let Enclosure(x, y, w, h, color) begin
    var size = Size(EX(w), EY(h));
    return Canvas {
      X: EX(x),
      Y: EY(y),
      Size: size,
      Figure {
        Stroke: 1 pts,
        Fill: color,
        Rectangle(Rect(0, size), Size(6 pts))
      }
    }
  end

  let NameBox(name, angle=0) = Paragraph {
    Transform: Rotate(angle),
    TransformFit: true,
    Space,
    name Bold,
    Space,
  }

  let FeatureMask = Vowel Nasal Vocoid LongVowel Semivowel Approximant Vibrant Lateral Affricate Occlusive Strident Sibilant Obstruent Continuant Fricative Rhotic Liquid Trill TapFlap
  let MatchFeature(segment, data) = HasMask(segment.Features, FeatureMask, data)
  let FeatureSegments(features)   = Results.UsedSegments.FindSlice(MatchFeature, features)

  let FeatureFrame(x, y, width, name, features) = Canvas {
    X: EX(x),
    Y: EY(y),
    Frame {
      Width: EX(width),
      ParAlignment: ParAlignments.Center,
      if (name)
        name Bold,
      end,
      Paragraph {
        Separator: Space,
        IPA.ShowSegment(each FeatureSegments(features))
      }
    }
  }

  let VNameFrame(name, x, y, width, height, color) = Enclosure(x, y, width, height, color) {
    VAlign: VAligns.Center,
    NameBox(name, 90 degrees)
  }

  let FeatureChart = Canvas {
    TextHeight: 16 pts,

    VNameFrame(Lang.Occlusive, 10, 0, 90, 34, Color(255, 238, 238)) {
      HAlign: HAligns.Right,
    },
    VNameFrame(Lang.Continuant, 10, 35, 90, 37, Color(229, 255, 255)) {
      HAlign: HAligns.Right,
    },
    VNameFrame(Lang.Obstruent, 0, 11, 94, 40, Color(238, 238, 255, 50%)),
    VNameFrame(Lang.Vocoid, 0, 52, 78, 21, Color(238, 255, 238, 50%)),
    VNameFrame(Lang.Vibrant, 20, 74, 65, 17, Color(238, 238, 255)),

    Enclosure(11, 1, 83, 9, Color(255, 246, 246)),    // Nasals
    Enclosure(31, 12, 62, 21, Color(246, 242, 250)),  // Affricates
    Enclosure(11, 12, 19, 21, Color(246, 243, 250)),  // Plosives
    Enclosure(11, 36, 80, 14, Color(240, 247, 255)),  // Fricatives

    Enclosure(25, 75, 59, 7, Color(247, 247, 255)) {
      HAlign: HAligns.Left,
      VAlign: VAligns.Center,
      NameBox(Lang.TapFlap),
    },
    Enclosure(25, 83, 53, 7, Color(247, 247, 255)) {
      HAlign: HAligns.Left,
      VAlign: VAligns.Center,
      NameBox(Lang.Trill),
    },

    Enclosure(53, 13, 39, 36, Color(233, 248, 235, 50%)) {
      HAlign: HAligns.Center,
      NameBox(Lang.Strident),
    },

    Enclosure(62, 18, 25, 24, Color(245, 252, 220, 50%)), // Sibilants
    Enclosure(11, 53, 21, 18, Color(240, 255, 247)),      // Vowels
    Enclosure(33, 53, 61, 18, Color(240, 255, 247, 50%)) {
      HAlign: HAligns.Left,
      NameBox(Lang.Approximant),
    },

    Enclosure(35, 59, 21, 11, Color(248, 255, 225)), // Semivowels

    Enclosure(64, 43, 26, 59, Color(255, 238, 238, 50%)) {
      HAlign: HAligns.Center,
      VAlign: VAligns.Bottom,
      NameBox(Lang.Liquid),
    },

    Enclosure(65, 44, 14, 52, Color(255, 247, 221, 50%)) {
      HAlign: HAligns.Center,
      VAlign: VAligns.Bottom,
      NameBox(Lang.Rhotic),
    },

    Enclosure(80, 44, 9, 44, Color(238, 247, 230, 70%)) {
      HAlign: HAligns.Right,
      VAlign: VAligns.Bottom,
      NameBox(Lang.Lateral, 90 degrees),
    },

    FeatureFrame(11, 1, 84, Lang.Nasal, Nasal Occlusive),
    FeatureFrame(12, 14, 17, Lang.Plosive, Stop Occlusive),
    FeatureFrame(32, 14, 20, Lang.Affricate, Affricate Occlusive),
    FeatureFrame(54, 20, 7, null, Affricate Occlusive Strident),
    FeatureFrame(65, 18, 18, Lang.Sibilant, Affricate Occlusive Strident Sibilant),
    FeatureFrame(14, 38, 22, Lang.Fricative, Fricative Obstruent Continuant),
    FeatureFrame(54, 38, 6, null, Fricative Obstruent Continuant Strident),
    FeatureFrame(64, 36, 20, null, Fricative Obstruent Continuant Strident Sibilant),
    FeatureFrame(66, 44, 10, null, Fricative Obstruent Continuant Strident Rhotic Liquid),
    FeatureFrame(80, 44, 10, null, Fricative Obstruent Continuant Strident Lateral Liquid),
    FeatureFrame(12, 53, 19, Lang.Vowel, Vowel Vocoid Continuant),
    FeatureFrame(36, 60, 19, Lang.SemiVowel, Vocoid Semivowel Approximant Continuant),
    FeatureFrame(57, 62, 5, null, Vocoid Approximant),
    FeatureFrame(66, 60, 10, null, Vocoid Approximant Rhotic Liquid),
    FeatureFrame(82, 58, 5, null, Vocoid Approximant Rhotic Liquid Lateral),
    FeatureFrame(54, 76, 10, null, Vibrant TapFlap),
    FeatureFrame(66, 76, 10, null, Vibrant TapFlap Rhotic Liquid),
    FeatureFrame(77, 77, 10, null, Vibrant TapFlap Rhotic Liquid Lateral),
    FeatureFrame(54, 84, 10, null, Vibrant Trill),
    FeatureFrame(66, 84, 10, null, Vibrant Trill Rhotic Liquid),
  }
  //======================================================================
  // Code for drift diagram
  //======================================================================

  let RowText     = 8 pts
  let RowHeight   = 9 pts
  let BoxWidth    = 6 pts
  let BorderSize  = 0.33 pts
  let FeatureList = FeatureSet[1..]

  let FeaturePopup(feature) = Frame {
    Width: 2 inches,
    Paragraph {
      feature.Name
    }
  }

  let RowBox = Canvas {
    Height: RowHeight,
    Width: BoxWidth,
    HAlign: HAligns.Center,
    VAlign: VAligns.Center,
  }

  let ShowFeature(feature) = Canvas {
    Height: RowHeight,
    VAlign: VAligns.Center,
    feature.Name
  }

  let FeatureBox(feature, features0, features1) = RowBox {
    if (features0.HasFeature(feature))
      if (not features1.HasFeature(feature))
        Background: Colors.Red,
      end
    else
      if (features1.HasFeature(feature))
        Background: Colors.Green,
      end
    end
  }

  let FeatureSegment(segment0, segment1) = Group {
    Vertical: true,
    VAlign: VAligns.Center,
    FeatureBox(each FeatureList, segment0.Features, segment1.Features),
  }

  let DriftFeatures(line0, line, index) = Group {
    Vertical: true,
    Group {
      Vertical: true,
      RowBox {
        if (EachIndex == 0)
          ShowSegment(line0.Segments[index]),
        end,
      },
      RowBox {
        ShowSegment(line.Segments[index]),
      },
      BorderB: BorderSize,
    },
    Group {
      FeatureSegment(line0.Segments[index], line.Segments[index]),
    }
  }

  let SegmentLength(line) = line.Segments.Length
  let MinLength(lines)    = Math.Min(SegmentLength(each lines))

  let DriftMatrix(lines, index) = Group {
    if (index != 0)
      BorderL: BorderSize,
    end,
    DriftFeatures(lines[0], each lines[1..], index)
  }

  let DriftChart(lines) = Group {
    TextHeight: RowText,
    VAlign: VAligns.Top,
    Border: BorderSize,
    Group {
      Vertical: true,
      BorderR: BorderSize,
      Group {
        Vertical: true,
        VAlign: VAligns.Center,
        RowBox,
        RowBox,
      },
      Group {
        Vertical: true,
        PaddingR: 3 pts,
        BorderT: BorderSize,
        ShowFeature(each FeatureList)
      },
    },
    DriftMatrix(lines, each 0..<MinLength(lines))
  }

  let DriftMeaning(meaning) = Group {
    MarginB: 8 pts,
    Vertical: true,
    Paragraph {
      Lang.Meaning, ": ",
      meaning Bold,
    },
    DriftChart(Results.GetGeneText(meaning, each Results.UsedLanguages)),
  }

  let DriftGroup(meanings) = Group {
    DriftMeaning(each meanings)
  }

  let DriftSection = Block {
    Paragraph {
      Separator: "  ",
      DriftGroup(each Results.UsedMeanings)
    }
  }
end

