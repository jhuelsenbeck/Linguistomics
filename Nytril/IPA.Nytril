using Format, Units
//======================================================================

with IPA
  let Voiced    = {IsVoiced: true}
  let NonIPA    = {IsNotIPA: true}
  let Rounded   = {IsRounded: true}
  let Velarized = {IsVelarized: true}
  let Click     = {IsClick: true}
  let Ejective  = {IsEjective: true}

  enum Categories
    Vowel,
    PulmonicConsonant,
    Consonant,
    PulmonicAffricate,
    EjectiveAffricate,
    Other
  end

  enum Opens
    Close,
    NearClose,
    CloseMid,
    Mid,
    OpenMid,
    NearOpen,
    Open
  end

  enum Backnesses
    Front,
    NearFront,
    Central,
    NearBack,
    Back,
  end

  enum Places
    Bilabial,
    Labial,
    LabialVelar,
    LabialPalatal,
    LabioDental,
    LinguoLabial,
    Dental,
    Alveolar,
    AlveoloPalatal,
    PostAlveolar,
    Retroflex,
    Palatal,
    PalatoAlveolar,
    Velar,
    Uvular,
    Pharyngeal,
    Glottal,
  end

  enum Manners
    Stop,
    Nasal,
    SibilantFricative,
    Fricative,
    Approximant,
    TapFlap,
    Trill,
    LateralFricative,
    LateralApproximant,
    LateralTapFlap,
    Tenuis,
    TenuisLateral,
    Plosive,
    Implosive,
    Affricate,
    Sibilant,
    NonSibilant,
    Central,
    Lateral
  end

  let Encode(text, sampa, alt=null) = {
    Popup: SoundPopup,
    Text: text,
    Sampa: sampa,
    Alt: alt
  }

  let Consonant(category, place, manner) = {
    Category: category,
    Place: place,
    Manner: manner,
  }

  let Vowel(open, backness) = {
    Category: Categories.Vowel,
    Open: open,
    Backness: backness,
  }

  let Impossible(category, place, manner) = Consonant(category, place, manner) {IsImpossible: true}
  let NPEjective(sound, manner)           = Encode(sound.Text Diacritics.Ejective.Text, sound.Sampa Diacritics.Ejective.Sampa) Consonant(Categories.Consonant, sound.Place, manner) Ejective

  let MatchSound(sound, data)     = sound.Category == data.Category and sound.Place == data.Place and sound.Manner == data.Manner
  let MatchConsonant(sound, data) = sound.Category == Categories.Consonant and sound.Place == data.Place and sound.Manner == data.Manner
  let MatchClick(sound, data)     = sound.IsClick and MatchConsonant(sound, data)
  let MatchEjective(sound, data)  = sound.IsEjective and MatchConsonant(sound, data)
  let MatchImplosive(sound, data) = sound.Manner == Manners.Implosive and MatchConsonant(sound, data)
  let VowelPair(sound, data)      = sound.Category == Categories.Vowel and sound.Open == data.Open and sound.Backness == data.Backness
  let MatchOther(sound)           = sound.Category == Categories.Other

  let MatchPulmonic(sound, data) = sound.Category == Categories.PulmonicConsonant and sound.Place == data.Place
  let MatchPulmonicPlace(place)  = Sounds.Contains(MatchPulmonic{Place: place})
  let PulmonicPlaces             = Places.FindSlice(MatchPulmonicPlace)


  with Sounds
    //==================================
    // Pulmonic Consonants
    //==================================

    // Nasal					
    let VlBilabialNasal           = Encode("m̥", "") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.Nasal)
    let VdBilabialNasal           = Encode("m", "m") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.Nasal) Voiced
    let VdLabioDentalNasal        = Encode("ɱ", "F") Consonant(Categories.PulmonicConsonant, Places.LabioDental, Manners.Nasal) Voiced
    let VdLinguoLabioNasal        = Encode("n̼", "") Consonant(Categories.PulmonicConsonant, Places.LinguoLabial, Manners.Nasal) Voiced
    let VlAlveolarNasal           = Encode("n̥", "") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Nasal)
    let VdAlveolarNasal           = Encode("n", "n") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Nasal) Voiced
    let VlRetroFlexNasal          = Encode("ɳ̊", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Nasal)
    let VdRetroFlexNasal          = Encode("ɳ", "n`") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Nasal) Voiced
    let VlPalatalNasal            = Encode("ɲ̊", "") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.Nasal)
    let VdPalatalNasal            = Encode("ɲ", "J") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.Nasal) Voiced
    let VlVelarNasal              = Encode("ŋ̊", "") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.Nasal)
    let VdVelarNasal              = Encode("ŋ", "N") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.Nasal) Voiced
    let VdUvularNasal             = Encode("ɴ", "N\\") Consonant(Categories.PulmonicConsonant, Places.Uvular, Manners.Nasal) Voiced
														
    // Stop
    let VlBilabialStop            = Encode("p", "p") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.Stop)
    let VdBilabialStop            = Encode("b", "b") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.Stop) Voiced
    let VlLabioDentalStop         = Encode("p̪", "") Consonant(Categories.PulmonicConsonant, Places.LabioDental, Manners.Stop)
    let VdLabioDentalStop         = Encode("b̪", "") Consonant(Categories.PulmonicConsonant, Places.LabioDental, Manners.Stop) Voiced
    let VlLinguoLabialStop        = Encode("t̼", "") Consonant(Categories.PulmonicConsonant, Places.LinguoLabial, Manners.Stop)
    let VdLinguoLabialStop        = Encode("d̼", "") Consonant(Categories.PulmonicConsonant, Places.LinguoLabial, Manners.Stop) Voiced
    let VlAlveolarStop            = Encode("t", "t") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Stop)
    let VdAlveolarStop            = Encode("d", "d") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Stop) Voiced
    let VlRetroflexStop           = Encode("ʈ", "t`") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Stop)
    let VdRetroflexStop           = Encode("ɖ", "d`") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Stop) Voiced
    let VlPalatalStop             = Encode("c", "c") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.Stop)
    let VdPalatalStop             = Encode("ɟ", "J\\") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.Stop) Voiced
    let VlVelarStop               = Encode("k", "k") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.Stop)
    let VdVelarStop               = Encode("ɡ", "g") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.Stop) Voiced
    let VlUvularStop              = Encode("q", "q") Consonant(Categories.PulmonicConsonant, Places.Uvular, Manners.Stop)
    let VdUvularStop              = Encode("ɢ", "G\\") Consonant(Categories.PulmonicConsonant, Places.Uvular, Manners.Stop) Voiced
    let VdEpiglottalStop          = Encode("ʡ", ">\\") Consonant(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Stop)
    let GlottalStop               = Encode("ʔ", "?") Consonant(Categories.PulmonicConsonant, Places.Glottal, Manners.Stop)
		
    // Sibilant Fricative										
    let VlAlveolarSibFricative       = Encode("s", "s") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.SibilantFricative)
    let VdAlveolarSibFricative       = Encode("z", "z") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.SibilantFricative) Voiced
    let VlPostalveolarSibFricative   = Encode("ʃ", "S") Consonant(Categories.PulmonicConsonant, Places.PostAlveolar, Manners.SibilantFricative)
    let VdPostalveolarSibFricative   = Encode("ʒ", "Z") Consonant(Categories.PulmonicConsonant, Places.PostAlveolar, Manners.SibilantFricative) Voiced
    let VlRetroflexSibFricative      = Encode("ʂ", "s`") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.SibilantFricative)
    let VdRetroflexSibFricative      = Encode("ʐ", "z`") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.SibilantFricative) Voiced
    let VlPalatalSibFricative        = Encode("ɕ", "s\\") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.SibilantFricative)
    let VdPalatalSibFricative        = Encode("ʑ", "z\\") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.SibilantFricative) Voiced

    // Fricative										
    let VlBilabialFricative          = Encode("ɸ", "p\\") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.Fricative)
    let VdBilabialFricative          = Encode("β", "B") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.Fricative) Voiced
    let VlLabiodentalFricative       = Encode("f", "f") Consonant(Categories.PulmonicConsonant, Places.LabioDental, Manners.Fricative)
    let VdLabiodentalFricative       = Encode("v", "v") Consonant(Categories.PulmonicConsonant, Places.LabioDental, Manners.Fricative) Voiced
    let VlLinguoLabialFricative      = Encode("θ̼", "") Consonant(Categories.PulmonicConsonant, Places.LinguoLabial, Manners.Fricative)
    let VdLinguoLabialFricative      = Encode("ð̼", "") Consonant(Categories.PulmonicConsonant, Places.LinguoLabial, Manners.Fricative) Voiced
    let VlDentalFricative            = Encode("θ", "T") Consonant(Categories.PulmonicConsonant, Places.Dental, Manners.Fricative)
    let VdDentalFricative            = Encode("ð", "D") Consonant(Categories.PulmonicConsonant, Places.Dental, Manners.Fricative) Voiced
    let VlAlveolarFricative          = Encode("θ̠", "") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Fricative)
    let VdAlveolarFricative          = Encode("ð̠", "") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Fricative) Voiced
    let VlPostaveolarFricative       = Encode("ɹ̠̊", "") Consonant(Categories.PulmonicConsonant, Places.PostAlveolar, Manners.Fricative)
    let VdPostalveolarFricative      = Encode("ɹ̝̊", "") Consonant(Categories.PulmonicConsonant, Places.PostAlveolar, Manners.Fricative) Voiced
    let VdRetroflexFricative         = Encode("ɻ˔","") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Fricative) Voiced
    let VlPalatalFricative           = Encode("ç", "C") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.Fricative)
    let VdPalatalFricative           = Encode("ʝ", "j\\") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.Fricative) Voiced
    let VlVelarFricative             = Encode("x", "x") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.Fricative)
    let VdVelarFricative             = Encode("ɣ", "G") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.Fricative) Voiced
    let VlUvularFricative            = Encode("χ", "X") Consonant(Categories.PulmonicConsonant, Places.Uvular, Manners.Fricative)
    let VdUvularFricative            = Encode("ʁ", "R") Consonant(Categories.PulmonicConsonant, Places.Uvular, Manners.Fricative) Voiced
    let VlPharyngealFricative        = Encode("ħ", "X\\") Consonant(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Fricative)
    let VdPharyngealFricative        = Encode("ʕ", "?\\") Consonant(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Fricative) Voiced
    let VlGlottalFricative           = Encode("h", "h") Consonant(Categories.PulmonicConsonant, Places.Glottal, Manners.Fricative)
    let VlMultiplePlaceFricative     = Encode("ɦ", "h\\") Consonant(Categories.PulmonicConsonant, Places.Glottal, Manners.Fricative) Voiced
														
    // Approximant										
    let VlLabioDentalApproximant     = Encode("ʋ̥", "") Consonant(Categories.PulmonicConsonant, Places.LabioDental, Manners.Approximant)
    let VdLabioDentalApproximant     = Encode("ʋ", "v\\", "P") Consonant(Categories.PulmonicConsonant, Places.LabioDental, Manners.Approximant) Voiced
    let VlPostalveolarApproximant    = Encode("ɹ̥", "") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Approximant)
    let VdPostalveolarApproximant    = Encode("ɹ", "r\\") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Approximant) Voiced
    let VlRetroflexApproximant       = Encode("ɻ̊", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Approximant)
    let VdRetroflexApproximant       = Encode("ɻ", "r\\`") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Approximant) Voiced
    let VlPalatalApproximant         = Encode("j̊", "") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.Approximant)
    let VdPalatalApproximant         = Encode("j", "j") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.Approximant) Voiced
    let VlVelarApproximant           = Encode("ɰ̊", "") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.Approximante)
    let VdVelarApproximant           = Encode("ɰ", "M\\") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.Approximant) Voiced
    let VdGlottalApproximant         = Encode("ʔ̞", "") Consonant(Categories.PulmonicConsonant, Places.Glottal, Manners.Approximant) Voiced
														
    // Tap or Flap										
    let VdBilabialDentalFlap         = Encode("ⱱ̟", "") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.TapFlap) Voiced
    let VdLabioDentalFlap            = Encode("ⱱ", "") Consonant(Categories.PulmonicConsonant, Places.LabioDental, Manners.TapFlap) Voiced
    let VdLingualLabialStop          = Encode("ɾ̼", "") Consonant(Categories.PulmonicConsonant, Places.LinguoLabial, Manners.TapFlap) Voiced
    let VlAlveolarFlap               = Encode("ɾ̥", "") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.TapFlap)
    let VdAlveolarTap                = Encode("ɾ", "4") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.TapFlap) Voiced
    let VlRetroflexFlap              = Encode("ɽ̊", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.TapFlap)
    let VdRetroflexFlap              = Encode("ɽ", "r`") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.TapFlap) Voiced
    let VdUvularFlap                 = Encode("ɢ̆", "") Consonant(Categories.PulmonicConsonant, Places.Uvular, Manners.TapFlap) Voiced
    let VdPharyngealFlap             = Encode("ʡ̆", "") Consonant(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.TapFlap) Voiced
														
    // Trill											
    let VlBilabialTrill              = Encode("ʙ̥", "") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.Trill)
    let VdBilabialTrill              = Encode("ʙ", "B\\") Consonant(Categories.PulmonicConsonant, Places.Bilabial, Manners.Trill) Voiced
    let VlAlveolarTrill              = Encode("r̥", "") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Trill)
    let VdAlveolarTrill              = Encode("r", "r") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.Trill) Voiced
    let VlRetroflexTrill             = Encode("ɽ̊r̥", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Trill)
    let VdRetroflexTrill             = Encode("ɽr", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.Trill) Voiced
    let VlUvularTrill                = Encode("ʀ", "R\\") Consonant(Categories.PulmonicConsonant, Places.Uvular, Manners.Trill)
    let VlPharyngealTrill            = Encode("H", "") Consonant(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Trill)
    let VdPharyngealTrill            = Encode("ʢ", "<\\") Consonant(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Trill) Voiced
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = Encode("ɬ", "K") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.LateralFricative)
    let VdAlveolarLateralFricative   = Encode("ɮ", "K\\") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.LateralFricative) Voiced
    let VlRetroflexLateralFricative  = Encode("ɭ̊˔", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.LateralFricative)
    let VdRetroflexLateralFricative  = Encode("ɭ˔", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.LateralFricative) Voiced
    let VlAlveolarPalatalFricative   = Encode("ʎ̝̊", "") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.LateralFricative)
    let VdAlveolarPalatalFricative   = Encode("ʎ̝", "") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.LateralFricative) Voiced
    let VlVelarPalatalFricative      = Encode("ʟ̝̊", "") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.LateralFricative)
    let VdVelarPalatalFricative      = Encode("ʟ̝", "") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.LateralFricative) Voiced
														
    // LateralApproximant								
    let VlAlveolarLateralApproximant = Encode("l̥", "") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.LateralApproximant)
    let VdAlveolarLateralApproximant = Encode("l", "l") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.LateralApproximant) Voiced
    let VdVelarizedAlveolarLateralApproximant = Encode("ɫ", "5") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.LateralApproximant) Voiced Velarized
    let VlRetroflexLateral           = Encode("ɭ̊", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.LateralApproximant)
    let VdRetroflexLateral           = Encode("ɭ", "n`") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.LateralApproximant) Voiced
    let VlPalatalLateral             = Encode("ʎ̥", "") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.LateralApproximant)
    let VdPalatalLateral             = Encode("ʎ", "L") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.LateralApproximant) Voiced
    let VlVelarLateral               = Encode("ʟ̥", "") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.LateralApproximant)
    let VdVelarLateral               = Encode("ʟ", "L\\") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.LateralApproximant) Voiced
    let VdUvularLateral              = Encode("ʟ̠", "") Consonant(Categories.PulmonicConsonant, Places.Uvular, Manners.LateralApproximant) Voiced

    // Lateral tap/flap
    let VdAlveolarLateralFlap        = Encode("ɺ", "l\\") Consonant(Categories.PulmonicConsonant, Places.Alveolar, Manners.LateralTapFlap) Voiced
    let VdRetroflexLateralFlap       = Encode("ɭ̆", "") Consonant(Categories.PulmonicConsonant, Places.Retroflex, Manners.LateralTapFlap) Voiced
    let VdPalatalLateralFlap         = Encode("ʎ̆", "") Consonant(Categories.PulmonicConsonant, Places.Palatal, Manners.LateralTapFlap) Voiced
    let VdVelarLateralTap            = Encode("L̆", "") Consonant(Categories.PulmonicConsonant, Places.Velar, Manners.LateralTapFlap) Voiced


    //==================================
    // Non-Pulmonic Consonants
    //==================================

    // Stops
    let VlBilabialStopEjective       = NPEjective(VlBilabialStop, Manners.Stop)
    let VlAveolarStopEjective        = NPEjective(VlAlveolarStop, Manners.Stop)
    let VlRetroflexStopEjective      = NPEjective(VlRetroflexStop, Manners.Stop)
    let VlPalatalStopEjective        = NPEjective(VlPalatalStop, Manners.Stop)
    let VlVelarStopEjective          = NPEjective(VlVelarStop, Manners.Stop)
    let VlUvularStopEjective         = NPEjective(VlUvularStop, Manners.Stop)
    let VlEpiglottalStopEjective     = NPEjective(VdEpiglottalStop, Manners.Stop)

    // Fricatives
    let VlBilabialFricativeEjective     = NPEjective(VlBilabialFricative, Manners.Fricative)
    let VlLabiodentalFricativeEjective  = NPEjective(VlLabiodentalFricative, Manners.Fricative)
    let VlDentalFricativeEjective       = NPEjective(VlDentalFricative, Manners.Fricative)
    let VlAlveolarFricativeEjective     = NPEjective(VlAlveolarSibFricative, Manners.Fricative)
    let VlPostalveolarFricativeEjective = NPEjective(VlPostalveolarSibFricative, Manners.Fricative)
    let VlRetroflexFricativeEjective    = NPEjective(VlRetroflexSibFricative, Manners.Fricative)
    let VlPalatalFricativeEjective      = NPEjective(VlPalatalSibFricative, Manners.Fricative)
    let VlVelarFricativeEjective        = NPEjective(VlVelarFricative, Manners.Fricative)
    let VlUvularFricativeEjective       = NPEjective(VlUvularFricative, Manners.Fricative)

    // Lateral Fricatives
    let VlPostalveolarLatFricEjective = NPEjective(VlAlveolarLateralFricative, Manners.LateralFricative)

    // Clicks
    let VlBilabialTenuisClick        = Encode("ʘ", "O\\") Consonant(Categories.Consonant, Places.Bilabial, Manners.Tenuis) Click
    let VdBilabialTenuisClick        = Encode("ʘ̬", "") Consonant(Categories.Consonant, Places.Bilabial, Manners.Tenuis) Voiced Click
    let VlDentalTenuisClick          = Encode("ǀ", "|") Consonant(Categories.Consonant, Places.Dental, Manners.Tenuis) Click
    let VdDentalTenuisClick          = Encode("ǀ̬", "") Consonant(Categories.Consonant, Places.Dental, Manners.Tenuis) Voiced Click
    let VlAlveolarTenuisClick        = Encode("ǃ", "!\\") Consonant(Categories.Consonant, Places.Alveolar, Manners.Tenuis) Click
    let VdAlveolarTenuisClick        = Encode("ǃ̬", "") Consonant(Categories.Consonant, Places.Alveolar, Manners.Tenuis) Voiced Click
    let VlPalatalTenuisClick         = Encode("ǂ", "=\\") Consonant(Categories.Consonant, Places.Palatal, Manners.Tenuis) Click
    let VdPalatalTenuisClick         = Encode("ǂ̬", "") Consonant(Categories.Consonant, Places.Palatal, Manners.Tenuis) Voiced Click

    let VlBilabialNasalClick         = Encode("ʘ̃", "") Consonant(Categories.Consonant, Places.Bilabial, Manners.Nasal) Click
    let VlDentalNasalClick           = Encode("ǀ̃", "") Consonant(Categories.Consonant, Places.Dental, Manners.Nasal) Click
    let VlAlveolarNasalClick         = Encode("ǃ̃", "") Consonant(Categories.Consonant, Places.Alveolar, Manners.Nasal) Click
    let VlPalatalNasalClick          = Encode("ǂ̃", "") Consonant(Categories.Consonant, Places.Palatal, Manners.Nasal) Click

    let VlAlveolarTenuisLateralClick = Encode("ǁ", "|\\|\\") Consonant(Categories.Consonant, Places.Alveolar, Manners.TenuisLateral) Click
    let VdAlveolarTenuisLateralClick = Encode("ǁ̬", "") Consonant(Categories.Consonant, Places.Alveolar, Manners.TenuisLateral) Voiced Click

    let VlBilabialImplosiveClick     = Encode("ɓ̥", "") Consonant(Categories.Consonant, Places.Bilabial, Manners.Implosive) Click
    let VdBilabialImplosiveClick     = Encode("ɓ", "b_<") Consonant(Categories.Consonant, Places.Bilabial, Manners.Implosive) Voiced Click
    let VlAlveolarImplosiveClick     = Encode("ɗ̥", "") Consonant(Categories.Consonant, Places.Alveolar, Manners.Implosive) Click
    let VdAlveolarImplosiveClick     = Encode("ɗ", "d_<") Consonant(Categories.Consonant, Places.Alveolar, Manners.Implosive) Voiced Click
    let VlRetroflexImplosiveClick    = Encode("ᶑ̊", "") Consonant(Categories.Consonant, Places.Retroflex, Manners.Implosive) Click
    let VdRetroflexImplosiveClick    = Encode("ᶑ", "") Consonant(Categories.Consonant, Places.Retroflex, Manners.Implosive) Voiced Click
    let VlPalatalImplosiveClick      = Encode("ʄ̊", "") Consonant(Categories.Consonant, Places.Palatal, Manners.Implosive) Click
    let VdPalatalImplosiveClick      = Encode("ʄ", "J\\_<") Consonant(Categories.Consonant, Places.Palatal, Manners.Implosive) Voiced Click
    let VlVelarImplosiveClick        = Encode("ɠ̊", "") Consonant(Categories.Consonant, Places.Velar, Manners.Implosive) Click
    let VdVelarImplosiveClick        = Encode("ɠ", "g_<") Consonant(Categories.Consonant, Places.Velar, Manners.Implosive) Voiced Click
    let VlUvularImplosiveClick       = Encode("ʛ̥", "") Consonant(Categories.Consonant, Places.Uvular, Manners.Implosive) Click
    let VdUvularImplosiveClick       = Encode("ʛ", "G\\_<") Consonant(Categories.Consonant, Places.Uvular, Manners.Implosive) Voiced Click

    //==================================
    // Pulmonic Affricates
    //==================================

    // Sibilants
    let VlAlveolarAffricate          = Encode("ts", "") Consonant(Categories.PulmonicAffricate, Places.Alveolar, Manners.Sibilant)
    let VdAlveolarAffricate          = Encode("dz", "") Consonant(Categories.PulmonicAffricate, Places.Alveolar, Manners.Sibilant) Voiced
    let VlPostalveolarAffricate      = Encode("t̠ʃ", "") Consonant(Categories.PulmonicAffricate, Places.PalatoAlveolar, Manners.Sibilant)
    let VdPostalveolarAffricate      = Encode("d̠ʒ", "") Consonant(Categories.PulmonicAffricate, Places.PalatoAlveolar, Manners.Sibilant) Voiced
    let VlRetroflexAffricate         = Encode("ʈʂ", "") Consonant(Categories.PulmonicAffricate, Places.Retroflex, Manners.Sibilant)
    let VdRetroflexAffricate         = Encode("ɖʐ", "") Consonant(Categories.PulmonicAffricate, Places.Retroflex, Manners.Sibilant) Voiced
    let VlAlveoloPalatalAffricate    = Encode("tɕ", "") Consonant(Categories.PulmonicAffricate, Places.AlveoloPalatal, Manners.Sibilant)
    let VdAlveoloPalatalAffricate    = Encode("dʑ", "") Consonant(Categories.PulmonicAffricate, Places.AlveoloPalatal, Manners.Sibilant) Voiced

    // Non-Sibilants
    let VlBilabialNSAffricate        = Encode("pɸ", "") Consonant(Categories.PulmonicAffricate, Places.Bilabial, Manners.NonSibilant)
    let VdBilabialNSAffricate        = Encode("bβ", "") Consonant(Categories.PulmonicAffricate, Places.Bilabial, Manners.NonSibilant) Voiced
    let VlLabioDentalNSAffricate     = Encode("p̪f", "") Consonant(Categories.PulmonicAffricate, Places.LabioDental, Manners.NonSibilant)
    let VdLabioDentalNSAffricate     = Encode("b̪v", "") Consonant(Categories.PulmonicAffricate, Places.LabioDental, Manners.NonSibilant) Voiced
    let VlDentalNSAffricate          = Encode("t̪θ", "") Consonant(Categories.PulmonicAffricate, Places.Dental, Manners.NonSibilant)
    let VdDentalNSAffricate          = Encode("d̪ð", "") Consonant(Categories.PulmonicAffricate, Places.Dental, Manners.NonSibilant) Voiced
    let VlAlveolarNSAffricate        = Encode("tɹ̝̊", "") Consonant(Categories.PulmonicAffricate, Places.Alveolar, Manners.NonSibilant)
    let VdAlveolarNSAffricate        = Encode("dɹ̝", "") Consonant(Categories.PulmonicAffricate, Places.Alveolar, Manners.NonSibilant) Voiced
    let VlPalatoAlveolarNSAffricate  = Encode("t̠ɹ̠̊˔", "") Consonant(Categories.PulmonicAffricate, Places.PalatoAlveolar, Manners.NonSibilant)
    let VdPalatoAlveolarNSAffricate  = Encode("d̠ɹ̠˔", "") Consonant(Categories.PulmonicAffricate, Places.PalatoAlveolar, Manners.NonSibilant) Voiced
    let VlPalatalNSAffricate         = Encode("cç", "") Consonant(Categories.PulmonicAffricate, Places.Palatal, Manners.NonSibilant)
    let VdPalatalNSAffricate         = Encode("ɟʝ", "") Consonant(Categories.PulmonicAffricate, Places.Palatal, Manners.NonSibilant) Voiced
    let VlVelarNSAffricate           = Encode("kx", "") Consonant(Categories.PulmonicAffricate, Places.Velar, Manners.NonSibilant)
    let VdVelarNSAffricate           = Encode("ɡɣ", "") Consonant(Categories.PulmonicAffricate, Places.Velar, Manners.NonSibilant) Voiced
    let VlUvularNSAffricate          = Encode("qχ", "") Consonant(Categories.PulmonicAffricate, Places.Uvular, Manners.NonSibilant)
    let VdEpiglottalNSAffricate      = Encode("ʡʢ", "") Consonant(Categories.PulmonicAffricate, Places.Pharyngeal, Manners.NonSibilant) Voiced
    let VlGlottalNSAffricate         = Encode("ʔh", "") Consonant(Categories.PulmonicAffricate, Places.Glottal, Manners.NonSibilant)

    // Lateral
    let VlAlveolarLateralAffricate   = Encode("tɬ̝̊", "") Consonant(Categories.PulmonicAffricate, Places.Alveolar, Manners.Lateral)
    let VdAlveolarLateralAffricate   = Encode("dɮ", "") Consonant(Categories.PulmonicAffricate, Places.Alveolar, Manners.Lateral) Voiced
    let VlRetroflexLateralAffricate  = Encode("ʈɭ̊˔", "") Consonant(Categories.PulmonicAffricate, Places.Retroflex, Manners.Lateral)
    let VdPalatalLateralAffricate    = Encode("cʎ̝̊", "") Consonant(Categories.PulmonicAffricate, Places.Palatal, Manners.Lateral) Voiced
    let VlVelarLateralAffricate      = Encode("kʟ̝̊", "") Consonant(Categories.PulmonicAffricate, Places.Velar, Manners.Lateral)
    let VdVelarLateralAffricate      = Encode("ɡʟ̝", "") Consonant(Categories.PulmonicAffricate, Places.Velar, Manners.Lateral) Voiced

    //==================================
    // Ejective Affricates
    //==================================

    // Central
    let VlAlveolarEjectiveAffricate       = Encode("tsʼ", "") Consonant(Categories.EjectiveAffricate, Places.Alveolar, Manners.Central)
    let VlPalatoAlveolarEjectiveAffricate = Encode("t̠ʃʼ", "") Consonant(Categories.EjectiveAffricate, Places.PalatoAlveolar, Manners.Central)
    let VlRetroflexEjectiveAffricate      = Encode("ʈʂʼ", "") Consonant(Categories.EjectiveAffricate, Places.Retroflex, Manners.Central)
    let VlVelarEjectiveAffricate          = Encode("kxʼ", "") Consonant(Categories.EjectiveAffricate, Places.Velar, Manners.Central)
    let VlUvularEjectiveAffricate         = Encode("qχʼ", "") Consonant(Categories.EjectiveAffricate, Places.Uvular, Manners.Central)

    // Lateral
    let VlAlveolarLateralEjective         = Encode("tɬʼ", "") Consonant(Categories.EjectiveAffricate, Places.Alveolar, Manners.Lateral)
    let VlPalatalLateralEjective          = Encode("cʎ̝̊ʼ", "") Consonant(Categories.EjectiveAffricate, Places.Palatal, Manners.Lateral)
    let VlVelarLateralEjective            = Encode("kʟ̝̊ʼ", "") Consonant(Categories.EjectiveAffricate, Places.Velar, Manners.Lateral)

    let VlLabialVelarFricative       = Encode("ʍ", "W") Consonant(Categories.Other, Places.LabialVelar, Manners.Fricative)

// Pre-existing
//    let VlAlveoloPalatalFricative1   = Sound("ɕ", "") CPM(Categories.Other, Places.AlveoloPalatal, Manners.Fricative)
//    let VlAlveoloPalatalFricative    = Sound("ʑ", "") CPM(Categories.Other, Places.AlveoloPalatal, Manners.Fricative)

    let VdLabialVelarApproximant     = Encode("w", "w") Consonant(Categories.Other, Places.LabialVelar, Manners.Approximant) Voiced
    let VdLabialPalatalApproximant   = Encode("ɥ", "H") Consonant(Categories.Other, Places.LabialPalatal, Manners.Approximant) Voiced

    let SimultaneousSx               = Encode("ɧ", "x\\") Consonant(Categories.Other, Places.PostAlveolar, Manners.SibilantFricative) {
                                         Name: "Simultaneous {0} and {1}"(VlPostalveolarSibFricative.Text, VlVelarFricative.Text)
                                       }
    let VlEpiglottalFricative        = Encode("ʜ", "H\\") Consonant(Categories.Other, Places.Pharyngeal, Manners.Fricative)
    let VdEpiglottalFricative        = Encode("ʢ", "?\\") Consonant(Categories.Other, Places.Pharyngeal, Manners.Fricative) Voiced
    let VlEpiglottalPlosive          = Encode("ʡ", "<\\") Consonant(Categories.Other, Places.Pharyngeal, Manners.Plosive)

    //==================================
    // Vowels
    //==================================

    let CloseFrontUnrounded          = Encode("i", "i") Vowel(Opens.Close, Backnesses.Front)
    let CloseFrontRounded            = Encode("y", "y") Vowel(Opens.Close, Backnesses.Front) Rounded
    let CloseCentralUnrounded        = Encode("ɨ", "1") Vowel(Opens.Close, Backnesses.Central)
    let CloseCentralRounded          = Encode("ʉ", "}") Vowel(Opens.Close, Backnesses.Central) Rounded
    let CloseBackUnrounded           = Encode("ɯ", "M") Vowel(Opens.Close, Backnesses.Back)
    let CloseBackRounded             = Encode("u", "u") Vowel(Opens.Close, Backnesses.Back) Rounded

    let NearCloseFrontUnrounded      = Encode("ɪ", "I") Vowel(Opens.NearClose, Backnesses.NearFront)
    let NearCloseCentralUnrounded    = Encode("ᵻ", "I\\") Vowel(Opens.NearClose, Backnesses.Central) NonIPA


    let NearCloseFrontRounded        = Encode("ʏ", "Y") Vowel(Opens.NearClose, Backnesses.NearFront) Rounded
    let NearCloseBackRounded         = Encode("ʊ", "U") Vowel(Opens.NearClose, Backnesses.NearBack) Rounded

    let NearCloseCentralRounded      = Encode("ᵿ", "U\\") Vowel(Opens.NearClose, Backnesses.Central) Rounded NonIPA

    let CloseMidFrontUnrounded       = Encode("e", "e") Vowel(Opens.CloseMid, Backnesses.Front)
    let CloseMidFrontRounded         = Encode("ø", "2") Vowel(Opens.CloseMid, Backnesses.Front) Rounded
    let Schwa                        = Encode("ə", "@") Vowel(Opens.CloseMid, Backnesses.Central)
    let RoundedSchwa                 = Encode("ɵ", "8") Vowel(Opens.CloseMid, Backnesses.Central) Rounded
    let CloseMidBackUnrounded        = Encode("ɤ", "7") Vowel(Opens.CloseMid, Backnesses.Back)
    let CloseMidBackRounded          = Encode("o", "o") Vowel(Opens.CloseMid, Backnesses.Back) Rounded
    let MidFrontUnrounded            = Encode("ø̞", "") Vowel(Opens.Mid, Backnesses.Front)
    let MidCentralUnrounded          = Encode("ɘ", "@\\") Vowel(Opens.Mid, Backnesses.Central)
    let MidBackUnrounded             = Encode("o̞", "") Vowel(Opens.Mid, Backnesses.Back)
    let OpenMidNearFrontUnrounded    = Encode("ɛ", "E") Vowel(Opens.OpenMid, Backnesses.NearFront)
    let OpenMidNearFrontRounded      = Encode("œ", "9") Vowel(Opens.OpenMid, Backnesses.NearFront) Rounded
    let OpenMidCentral               = Encode("ɜ", "3") Vowel(Opens.OpenMid, Backnesses.Central)
    let OpenMidCentralRounded        = Encode("ɞ", "3\\") Vowel(Opens.OpenMid, Backnesses.Central) Rounded
    let OpenMidBackUnrounded         = Encode("ʌ", "V") Vowel(Opens.OpenMid, Backnesses.Back)
    let OpenMidBackRounded           = Encode("ɔ", "O") Vowel(Opens.OpenMid, Backnesses.Back) Rounded
    let NearFrontUnrounded           = Encode("æ", "{") Vowel(Opens.NearOpen, Backnesses.NearFront)
    let FrontOpenRounded             = Encode("ɶ", "&") Vowel(Opens.NearOpen, Backnesses.NearFront) Rounded
    let OpenMidSchwa                 = Encode("ɐ", "6") Vowel(Opens.NearOpen, Backnesses.Central) Rounded
    let OpenBackUnrounded            = Encode("ɑ", "A") Vowel(Opens.Open, Backnesses.Back)
    let OpenBackRounded              = Encode("ɒ", "Q") Vowel(Opens.Open, Backnesses.Back) Rounded
    let OpenCentralUnrounded         = Encode("ä", "a_\"") Vowel(Opens.Open, Backnesses.Central)
    let OpenNearFrontUnrounded       = Encode("a", "a") Vowel(Opens.Open, Backnesses.NearFront)

// There seems to be conflicting unicode symbols for the same sound
    let OpenNearFrontRounded         = Encode("ɶ", "&") Vowel(Opens.Open, Backnesses.NearFront) Rounded
//    let RhotacizedSchwa              = Sound("ɚ", "@`") Vowel(Opens.Open, Backnesses.NearFront) Rounded

  end

  let ImpossibleSounds = [
    Impossible(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Nasal),
    Impossible(Categories.PulmonicConsonant, Places.Glottal, Manners.Nasal),
    Impossible(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.Stop) Voiced,
    Impossible(Categories.PulmonicConsonant, Places.Glottal, Manners.Stop) Voiced,
    Impossible(Categories.PulmonicConsonant, Places.Bilabial, Manners.SibilantFricative),
    Impossible(Categories.PulmonicConsonant, Places.LabioDental, Manners.SibilantFricative),
    Impossible(Categories.PulmonicConsonant, Places.LinguoLabial, Manners.SibilantFricative),
    Impossible(Categories.PulmonicConsonant, Places.Velar, Manners.SibilantFricative),
    Impossible(Categories.PulmonicConsonant, Places.Uvular, Manners.SibilantFricative),
    Impossible(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.SibilantFricative),
    Impossible(Categories.PulmonicConsonant, Places.Glottal, Manners.SibilantFricative),
    Impossible(Categories.PulmonicConsonant, Places.Velar, Manners.Trill),
    Impossible(Categories.PulmonicConsonant, Places.Glottal, Manners.Trill),
    Impossible(Categories.PulmonicConsonant, Places.Velar, Manners.TapFlap),
    Impossible(Categories.PulmonicConsonant, Places.Glottal, Manners.TapFlap),
    Impossible(Categories.PulmonicConsonant, Places.Bilabial, Manners.LateralFricative),
    Impossible(Categories.PulmonicConsonant, Places.LabioDental, Manners.LateralFricative),
    Impossible(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.LateralFricative),
    Impossible(Categories.PulmonicConsonant, Places.Glottal, Manners.LateralFricative),
    Impossible(Categories.PulmonicConsonant, Places.Bilabial, Manners.LateralApproximant),
    Impossible(Categories.PulmonicConsonant, Places.LabioDental, Manners.LateralApproximant),
    Impossible(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.LateralApproximant),
    Impossible(Categories.PulmonicConsonant, Places.Glottal, Manners.LateralApproximant),
    Impossible(Categories.PulmonicConsonant, Places.Bilabial, Manners.LateralTapFlap),
    Impossible(Categories.PulmonicConsonant, Places.LabioDental, Manners.LateralTapFlap),
    Impossible(Categories.PulmonicConsonant, Places.Pharyngeal, Manners.LateralTapFlap),
    Impossible(Categories.PulmonicConsonant, Places.Glottal, Manners.LateralTapFlap),
    Impossible(Categories.Consonant, Places.Bilabial, Manners.LateralFricative) Ejective,
    Impossible(Categories.Consonant, Places.LabioDental, Manners.LateralFricative) Ejective,
    Impossible(Categories.Consonant, Places.Pharyngeal, Manners.LateralFricative) Ejective,
    Impossible(Categories.Consonant, Places.Velar, Manners.Tenuis) Click,
    Impossible(Categories.Consonant, Places.Uvular, Manners.Tenuis) Click,
    Impossible(Categories.Consonant, Places.Pharyngeal, Manners.Tenuis) Click,
    Impossible(Categories.Consonant, Places.Velar, Manners.Nasal) Click,
    Impossible(Categories.Consonant, Places.Uvular, Manners.Nasal) Click,
    Impossible(Categories.Consonant, Places.Pharyngeal, Manners.Nasal) Click,
    Impossible(Categories.Consonant, Places.Bilabial, Manners.TenuisLateral) Click,
    Impossible(Categories.Consonant, Places.LabioDental, Manners.TenuisLateral) Click,
    Impossible(Categories.Consonant, Places.Velar, Manners.TenuisLateral) Click,
    Impossible(Categories.Consonant, Places.Uvular, Manners.TenuisLateral) Click,
    Impossible(Categories.Consonant, Places.Pharyngeal, Manners.TenuisLateral) Click,

    Impossible(Categories.PulmonicAffricate, Places.Bilabial, Manners.Sibilant),
    Impossible(Categories.PulmonicAffricate, Places.LabioDental, Manners.Sibilant),
    Impossible(Categories.PulmonicAffricate, Places.Velar, Manners.Sibilant),
    Impossible(Categories.PulmonicAffricate, Places.Uvular, Manners.Sibilant),
    Impossible(Categories.PulmonicAffricate, Places.Pharyngeal, Manners.Sibilant),
    Impossible(Categories.PulmonicAffricate, Places.Glottal, Manners.Sibilant),
    Impossible(Categories.PulmonicAffricate, Places.Bilabial, Manners.Lateral),
    Impossible(Categories.PulmonicAffricate, Places.LabioDental, Manners.Lateral),
    Impossible(Categories.PulmonicAffricate, Places.Pharyngeal, Manners.Lateral),
    Impossible(Categories.PulmonicAffricate, Places.Glottal, Manners.Lateral),

    Impossible(Categories.EjectiveAffricate, Places.Glottal, Manners.Central),
    Impossible(Categories.EjectiveAffricate, Places.Bilabial, Manners.Lateral),
    Impossible(Categories.EjectiveAffricate, Places.LabioDental, Manners.Lateral),
    Impossible(Categories.EjectiveAffricate, Places.Pharyngeal, Manners.Lateral),
    Impossible(Categories.EjectiveAffricate, Places.Glottal, Manners.Lateral),
  ]                       									

  let AllSounds = Sounds + ImpossibleSounds

  with Diacritics
    let Centralized                  = Encode("\u0308", "_\"")
    let Advanced                     = Encode("\u031F", "_+")
    let Retracted                    = Encode("\u0320", "_-")
    let RisingTone                   = Encode("\u030C", "_R", "_/")
    let Voiceless                    = Encode("\u0325", "_0")
    let Implosive                    = Encode(null, "_<")
    let Syllabic                     = Encode("\u0329", "_=", "=")
    let Ejective                     = Encode("\u02BC", "_>")
    let Pharyngealized               = Encode("\u02E4", "_?\\")
    let FallingTone                  = Encode("\u0302", "_\\", "_F")
    let NonSyllabic                  = Encode("\u032F", "_^")
    let NoAudibleRelease             = Encode("\u031A", "_}")
    let RhoticHook                   = Encode("\u02DE", "`")
    let Nasalized                    = Encode("\u0303", "_~", "~")
    let AdvancedTongueRoot           = Encode("\u0318", "_A")
    let Apical                       = Encode("\u033A", "_a")
    let ExtraLowTone                 = Encode("\u030F", "_B")
    let LowRisingTone                = Encode("\u1DC5", "_B_L")
    let LessRounded                  = Encode("\u031C", "_c")
    let Dental                       = Encode("\u032A", "_d")
    let VelarizedOrPharyngealized    = Encode("\u0334", "_e")
    let GlobalFall                   = Encode("↘", "<F>")
    let Velarized                    = Encode("\u02E0", "_G")
    let HighTone                     = Encode("\u0301", "_H")
    let HighRisingTone               = Encode("\u1DC4", "_H_T")
    let Aspirated                    = Encode("\u02B0", "_h")
    let Palatalized                  = Encode("\u02B2", "_j", "'")
    let CreakyVoiced                 = Encode("\u0330", "_k")
    let LowTone                      = Encode("\u0300", "_L")
    let LateralRelease               = Encode("\u02E1", "_l")
    let MidTone                      = Encode("\u0304", "_M")
    let Laminal                      = Encode("\u033B", "_m")
    let LinguoLabial                 = Encode("\u033C", "_N")
    let NasalRelease                 = Encode("\u207F", "_n")
    let MoreRounded                  = Encode("\u0339", "_O")
    let Lowered                      = Encode("\u031E", "_o")
    let RetractedTongueRoot          = Encode("\u0319", "_q")
    let GlobalRise                   = Encode("↗", "<R>")
    let RisingFallingTone            = Encode("\u1DC8", "_R_F")
    let Raised                       = Encode("\u031D", "_r")
    let ExtraHighTone                = Encode("\u030B", "_T")
    let BreathyVoiced                = Encode("\u0324", "_t")
    let Voiced                       = Encode("\u032C", "_v")
    let Labialized                   = Encode("\u02B7", "_W")
    let ExtraShort                   = Encode("\u02D8", "_X")
    let MidCentralized               = Encode("\u033D", "_x")
    let Downstep                     = Encode("↓", "!")
    let Upstep                       = Encode("↑", "^")

    let SylableBreak                 = Encode(".", ".")
    let PrimaryStress                = Encode("ˈ", "\"")
    let SecondaryStress              = Encode("ˌ", "%")

    let Long                         = Encode("ː", ":")
    let HalfLong                     = Encode("ˑ", ":\\")
    let Separator                    = Encode("", "-")

    let UndefinedEscapeCharacter     = Encode(null, "*")
    let IndeterminacyinFrenchVowels  = Encode(null, "/")
    let BeginNonsegmentalNotation    = Encode(null, "<")

    let Voicedepiglottalfricative    = Encode("ʢ", "<\\")
    let Endnonsegmentalnotation      = Encode("", ">")
    let Postalveolarclick            = Encode("ǃ", "!\\")
    let MinorGroup                   = Encode("|", "|")
    let Dentalclick                  = Encode("ǀ", "|\\")
    let MajorGroup                   = Encode("‖", "||")
    let Alveolarlateralclick         = Encode("ǁ", "|\\|\\")
    let Palatalclick                 = Encode("ǂ", "#NAME?")
    let Linkingmark                  = Encode("‿", "-\\")

  /*
      let RhotacizedOpenMidCentral     = Set("ɝ", "", Places.None, Manners.None, Props.None)
      let VelarizedVdAlveolarLateral   = Set("ɫ", "", Places.None, Manners.None, Props.None)
  */


    let VoicelessDescender           = Encode("\u030A", "")
    let CombiningMacron              = Encode("\u0331", "")
    let TieBarBelow                  = Encode("\u035C", "")
    let TieBarAbove                  = Encode("\u0361", "")
    let ReadyMadeCombination         = Encode("\u026B", "")
    let Becomes                      = Encode("→", "")
  end

  //======================================================================

  let ShowSound(sound) = Span {
    Style.IPAFamily,
    sound.Text
  }

  let SoundText(sound) = ShowSound(sound) {
    Popup: SoundPopup.Call(sound),
    Link: EachSymbol.FullSymbolName,
  }

  let SoundName(sound) = Span {
    if (sound.Name)
      sound.Name
    elseif (sound.Category == Categories.Vowel)
      Lang.OpenNames[sound.Open],
      Space,
      Lang.BacknessNames[sound.Backness],
      Space,
      if (sound.IsRounded)
        Lang.Rounded
      else
        Lang.Unrounded
      end,
    else
      if (sound.IsVoiced)
        Lang.Voiced
      else
        Lang.Voiceless
      end,
      Space,
      Lang.PlaceNames[sound.Place],
      Space,
      Lang.MannerNames[sound.Manner]
    end,
    Space,
    if (sound.Category != Categories.Other)
      Lang.CategoryNames[sound.Category],
    end
  }

  let ShowCodePoint(c) = {TextFamily: TextFamilies.Consolas, TextRadix: 16, TextDigits: 4} Type.Integer(c)

  let CodePoints(text) = Span {
    Separator: Lang.Separator,
    if (text)
      ShowCodePoint(each text)
    end
  }

  let SAMPA(sound) = Span {
    TextFamily: TextFamilies.Consolas,
    sound.Sampa,
    if (sound.Alt)
      "Alt: ",
      sound.Alt
    end
  }
  //======================================================================

  let BoxSize  = Type.Size(20 pts, 20 pts)
  let CellSize = Type.Size(BoxSize.Width * 2, BoxSize.Height)

  let SoundBox(sound) = Canvas {
    HAlign: HAligns.Center,
    Size: BoxSize,
    if (sound.Text)
      TextHeight: BoxSize.Height - 4 pts,
      SoundText(sound)
    else
      Style.ImpossibleBackground
    end
  }

  let ShowBox(sound) = SoundBox(sound) {
    if (sound.IsVoiced)
      X: BoxSize.Width
    end
  }

  let SoundBlock(matches) = Cell {
    Style.SoundBottom,
    if (matches.Length > 0)
      if (matches.Length == 1 and matches[0].IsImpossible)
        Style.ImpossibleBackground
      else
        TextHeight: 1 pts,
        Span {
          Canvas {
            Size: CellSize,
            ShowBox(each matches)
          }
        }
      end
    end
  }

  let PulmonicCell(place, manner) = SoundBlock(AllSounds.FindSlice(MatchSound Consonant(Categories.PulmonicConsonant, place, manner)))

  let PlaceHeader(place) = Style.HeaderCell(Lang.PlaceNames[place])

  let FindPulmonicManner(sound, data) = sound.Category == Categories.PulmonicConsonant && sound.Manner == data.Manner
  let FindManner(manner) = Sounds.Contains(FindPulmonicManner {Manner: manner})
  let PulmonicManners    = Manners.FindSlice(FindManner)

  let PulmonicRow(manner) = Row {
    Cell {
      VAlign: VAligns.Center,
      EdgeR: 0.5 pts,
      Style.TitleBackground,
      PaddingLR: 2 pts,
      TextHeight: 7 pts,
      Lang.MannerNames[manner]
    },
    PulmonicCell(each PulmonicPlaces, manner)
  }

  let PulmonicTable = Block {
    Table {
      Style.TableEdge,
      Columns: [(45 pts) {EdgeR: 0.5 pts}] +
               [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * PulmonicPlaces.Length,

      Style.TitleBar(Lang.PConsonants, PulmonicPlaces.Length+1),
      Row {
        TextHeight: 10 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(Lang.Labial) {ColumnSpan: 3},
        Style.HeaderCell(Lang.Coronal) {ColumnSpan: 4},
        Style.HeaderCell(Lang.Dorsal) {ColumnSpan: 3},
        Style.HeaderCell(Lang.Laryngeal) {ColumnSpan: 2},
      },
      Row {
        TextHeight: 6 pts,
        Style.HeaderCell(Bold Lang.Manner) {HAlign: HAligns.Left},
        PlaceHeader(each PulmonicPlaces)
      },
      PulmonicRow(each PulmonicManners),
    },
    Style.TableNotes {
      Lang.PulmonicSymbols(SoundText(Sounds.VlMultiplePlaceFricative)),
      Space,
      Lang.Impossible,
    },
  }
  //======================================================================

  let NPCell(match, manner, place) = SoundBlock(AllSounds.FindSlice(match {Manner: manner, Place: place}))

  let FindPlace(sound, data)      = sound.Category == data.Category && sound.Place == data.Place
  let FindPlaces(place, data)     = Sounds.Contains(FindPlace {Category: data.Category, Place: place})
  let FindPlaceCategory(category) = Places.FindSlice(FindPlaces {Category: category})

  let NonPulmonicPlaces = FindPlaceCategory(Categories.Consonant)

  let NPRow(name, match, manner, namerow) = Row {
    Cell {
      EdgeR: 0.5 pts,
      VAlign: VAligns.Center,
      if (namerow == EachIndex)
        name
      end
    },
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.MannerNames[manner]
    },
    NPCell(match, manner, each NonPulmonicPlaces)
  }

  let NonPulmonicTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [50 pts, (75 pts) {EdgeR: 0.5 pts}] +
               [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * NonPulmonicPlaces.Length,

      Style.TitleBar(Lang.NPConsonants, NonPulmonicPlaces.Length+2),
      Row {
        TextHeight: 6 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(Empty),
        PlaceHeader(each NonPulmonicPlaces)
      },
      NPRow(Lang.Ejective, MatchEjective, each [Manners.Stop, Manners.Fricative, Manners.LateralFricative], 1),
      NPRow(Lang.Click, MatchClick, each [Manners.Tenuis, Manners.Nasal, Manners.TenuisLateral], 1),
      NPRow(Lang.Implosive, MatchImplosive, each [Manners.Implosive], 0),
    },
    Style.TableNotes {
      Lang.ConsonantSymbols,
      Space,
      Lang.Impossible,
    },
  }
  //======================================================================

  let AffricateCell(category, manner, place) = SoundBlock(AllSounds.FindSlice(MatchSound Consonant(category, place, manner)))

  let AffricateRow(places, category, manner) = Row {
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.MannerNames[manner]
    },
    AffricateCell(category, manner, each places)
  }

  let AffricateTable(category, manners, notes) begin
    var places = FindPlaceCategory(category);
    return Block {
      Table {
        HAlign: HAligns.Center,
        Style.TableEdge,
        Columns: [(40 pts) {EdgeR: 0.5 pts}] +
                 [CellSize.Width {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * places.Length,

        Style.TitleBar(Lang.CategoryNames[category], places.Length+1),
        Row {
          TextHeight: 6 pts,
          Style.HeaderCell(Empty),
          PlaceHeader(each places)
        },
        AffricateRow(places, category, each manners),
      },
      Style.TableNotes {
        notes,
      },
    }
  end
  //======================================================================

  let ShowVowel(sound) = SoundBox(sound) {
    if (sound.IsRounded)
      X: BoxSize.Width
    end
  }

  let VowelBlock(matches) = Cell {
    Style.SoundBottom,
    HAlign: HAligns.Center,
    TextHeight: BoxSize.Height,
    if (matches.Length == 2)
      Span {
        SoundText(matches[0]),
        " • " {TextColor: Colors.LightGray},
        SoundText(matches[1]),
      }
    else
      SoundText(matches[0]),
    end
  }

  let VowelCell(open, backness) = VowelBlock(Sounds.FindSlice(VowelPair {Open: open, Backness: backness}))

  let VowelRow(open) = Row {
    Cell {
      VAlign: VAligns.Center,
      Style.SoundBottom,
      Lang.OpenNames[open]
    },
    VowelCell(open, each Backnesses)
  }

  let VowelTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [(1 inch){EdgeR: 0.5 pts}] + [BoxSize.Width*3 {EdgeR: 0.25 pts}] * Backnesses.Length,
      Style.TitleBar(Lang.Vowels, Backnesses.Length+1),
      Row {
        TextHeight: 10 pts,
        Style.HeaderCell(Empty),
        Style.HeaderCell(each Lang.BacknessNames)
      },
      VowelRow(each Opens)
    },
    Style.TableNotes {
      Lang.VowelSymbols,
    },
  }
  //======================================================================

  let OtherColumns = 2

  let OtherCell(sound) = {
    Cell {
      VAlign: VAligns.Center,
      HAlign: HAligns.Center,
      TextHeight: 20 pts,
      SoundText(sound),
    },
    Cell {
      VAlign: VAligns.Center,
      SoundName(sound)
    }
  }

  let OtherRow(sounds) = Row {
    OtherCell(each sounds)
  }

  let OtherTable = Block {
    Table {
      Style.TableEdge,
      Columns: [BoxSize.Width, Metrics.Content.Width * 0.5 - BoxSize.Width] * OtherColumns,
      Style.TitleBar(Lang.OtherSymbols, OtherColumns*2),
      OtherRow(each (Sounds.FindSlice(MatchOther) / OtherColumns)),
    },
    Style.TableNotes {
    }
  }
  //======================================================================

  let SoundColumns = 4
  let SoundSize    = 40 pts

  let SoundCell(sound) = Cell {
    Edge: 0.25 pts {Color: Colors.LightGray},
    Padding: 2 pts,
    ParAlignment: ParAlignments.Center,
    Paragraph {
      LocationMark: EachSymbol.FullSymbolName,
      SpaceBefore: 8 pts,
      SpaceAfter: 8 pts,
      TextHeight: SoundSize,
      ShowSound(sound),
      SpaceAfter: SoundSize * 0.125
    },
    Paragraph {
      TextHeight: 10 pts,
      SoundName(sound),
    },
    Paragraph {
      TextHeight: 8 pts,
      ParBackground: 95%,
      CodePoints(sound.Text),
    },
    Paragraph {
      TextHeight: 8 pts,
      if (sound.Sampa and sound.Sampa.Length > 0)
        ParBackground: 90%,
        SAMPA(sound),
      elseif (sound.Text.Length == 1)
        ParBackground: Colors.Red,
      end
    },
  }

  let SoundRow(sounds) = Row {
    SoundCell(each sounds)
  }

  let SoundTable = Block {
    Table {
      Columns: [Metrics.Content.Width / SoundColumns] * SoundColumns,
      Style.TitleBar(Lang.IPAListing, SoundColumns),
      SoundRow(each (Sounds / SoundColumns))
    },
    Style.TableNotes {
    }
  }

  let SoundPopup(sound) = Table {
    Columns: [2 inches],
    Row {
      SoundCell(sound)
    }
  }
  //======================================================================

  let ShowGroups = Block {
    PulmonicTable,
    NonPulmonicTable,
    AffricateTable(Categories.PulmonicAffricate, [Manners.Sibilant, Manners.NonSibilant, Manners.Lateral], Lang.Impossible),
    AffricateTable(Categories.EjectiveAffricate, [Manners.Central, Manners.Lateral], null),
    VowelTable,
    OtherTable,
  }
  //======================================================================
end
