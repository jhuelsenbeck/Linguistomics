using Format, Units, IO, Type
//======================================================================

with IPA {
  let Link = Domain("http://www.internationalphoneticalphabet.org") Folder("ipa-charts") Folder("ipa-symbols-chart-complete")

  // Type
  let None      = 0
  let Vowel     = 0
  let Consonant = 1

  // Form
  with Form {
    let Bilabial     = 0
    let Labiodental  = 1
    let Dental       = 2
    let Alveolar     = 3
    let Postalveolar = 4
    let Retroflex    = 5
    let Palatal      = 6
    let Velar        = 7
    let Uvular       = 8
    let Pharyngeal   = 9
    let Glottal      = 10
  }

  with Sound {
    let Plosive            = 0
    let Nasal              = 1
    let Trill              = 2
    let TapFlap            = 3
    let Fricative          = 4
    let Lateral_Fricative   = 5
    let Approximant        = 6
    let Lateral_Approximant = 7
  }

  with Props {
    let None     = 0
    let Voiced   = 1
    let Pulmonic = 2
  }

  let Set(c, type, form, sound, prop) = {
    CodePoint: c,
    Type: type,
    Form: form,
    Sound: sound,
    Prop: prop
  }

  with Alphabet {
    // Plosives
    let VlBilabialPlosive            = Set("p", Consonant, Form.Bilabial, Sound.Plosive, Props.Pulmonic)
    let VdBilabialPlosive            = Set("b", Consonant, Form.Bilabial, Sound.Plosive, Props.Voiced | Props.Pulmonic)
    let VlAlveolarPlosive            = Set("t", Consonant, Form.Alveolar, Sound.Plosive, Props.Pulmonic)
    let VdAlveolarPlosive            = Set("d", Consonant, Form.Alveolar, Sound.Plosive, Props.Voiced | Props.Pulmonic)
    let VlRetroFlexPlosive           = Set("ʈ", Consonant, Form.Retroflex, Sound.Plosive, Props.Pulmonic)
    let VdRetroFlexPlosive           = Set("ɖ", Consonant, Form.Retroflex, Sound.Plosive, Props.Voiced | Props.Pulmonic)
    let VlPalatalPlosiv              = Set("c", Consonant, Form.Palatal, Sound.Plosive, Props.Pulmonic)
    let VdPalatalPlosive             = Set("ɟ", Consonant, Form.Palatal, Sound.Plosive, Props.Voiced | Props.Pulmonic)
    let VlVelarPlosiv                = Set("k", Consonant, Form.Velar, Sound.Plosive, Props.Pulmonic)
    let VdVelarPlosive               = Set("ɡ", Consonant, Form.Velar, Sound.Plosive, Props.Voiced | Props.Pulmonic)
    let VlUvularPlosiv               = Set("q", Consonant, Form.Uvular, Sound.Plosive, Props.Pulmonic)
    let VdUvularPlosive              = Set("ɢ", Consonant, Form.Uvular, Sound.Plosive, Props.Voiced | Props.Pulmonic)
    let GlottalPlosive               = Set("ʔ", Consonant, Form.Glottal, Sound.Plosive, Props.Pulmonic)
														
    // Nasal											
    let VdBilabialNasal              = Set("m", Consonant, Form.Bilabial, Sound.Nasal, Props.Voiced | Props.Pulmonic)
    let VdLabioDentalNasal           = Set("ɱ", Consonant, Form.Labiodental, Sound.Nasal, Props.Voiced | Props.Pulmonic)
    let VdAlveolarNasal              = Set("n", Consonant, Form.Alveolar, Sound.Nasal, Props.Voiced | Props.Pulmonic)
    let VdRetroFlexNasal             = Set("ɳ", Consonant, Form.Retroflex, Sound.Nasal, Props.Voiced | Props.Pulmonic)
    let VdPalatalNasal               = Set("ɲ", Consonant, Form.Palatal, Sound.Nasal, Props.Voiced | Props.Pulmonic)
    let VdVelarNasal                 = Set("ŋ", Consonant, Form.Velar, Sound.Nasal, Props.Voiced | Props.Pulmonic)
    let VdUvularNasal                = Set("ɴ", Consonant, Form.Uvular, Sound.Nasal, Props.Voiced | Props.Pulmonic)
														
    // Trill											
    let VdBilabialTrill              = Set("ʙ", Consonant, Form.Bilabial, Sound.Trill, Props.Voiced | Props.Pulmonic)
    let VdAlveolarTrill              = Set("r", Consonant, Form.Alveolar, Sound.Trill, Props.Voiced | Props.Pulmonic)
    let VdUvularTrill                = Set("ʀ", Consonant, Form.Uvular, Sound.Trill, Props.Voiced | Props.Pulmonic)
														
    // Tap or Flap										
    let VdLabioDentalFlap            = Set("ⱱ", Consonant, Form.Labiodental, Sound.TapFlap, Props.Voiced | Props.Pulmonic)
    let VdAlveolarTap                = Set("ɾ", Consonant, Form.Alveolar, Sound.TapFlap, Props.Voiced | Props.Pulmonic)
    let VdRetroFlexFlap              = Set("ɽ", Consonant, Form.Retroflex, Sound.TapFlap, Props.Voiced | Props.Pulmonic)
														
    // Fricative										
    let VlDentalFricative            = Set("θ", Consonant, Form.Dental, Sound.Fricative, Props.Pulmonic)
    let VdDentalFricative            = Set("ð", Consonant, Form.Dental, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlBilabialFricative          = Set("ɸ", Consonant, Form.Bilabial, Sound.Fricative, Props.Pulmonic)
    let VdBilabialFricative          = Set("β", Consonant, Form.Bilabial, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlLabiodentalFricative       = Set("f", Consonant, Form.Labiodental, Sound.Fricative, Props.Pulmonic)
    let VdLabiodentalFricative       = Set("v", Consonant, Form.Labiodental, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlAlveolarFricative          = Set("s", Consonant, Form.Alveolar, Sound.Fricative, Props.Pulmonic)
    let VdAlveolarFricative          = Set("z", Consonant, Form.Alveolar, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlPostAlveolarFricative      = Set("ʃ", Consonant, Form.Postalveolar, Sound.Fricative, Props.Pulmonic)
    let VdPostAlveolarFricative      = Set("ʒ", Consonant, Form.Postalveolar, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlRetroFlexFricative         = Set("ʂ", Consonant, Form.Retroflex, Sound.Fricative, Props.Pulmonic)
    let VdRetroFlexFricative         = Set("ʐ", Consonant, Form.Retroflex, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlPalatalFricative           = Set("ç", Consonant, Form.Palatal, Sound.Fricative, Props.Pulmonic)
    let VdPalatalFricative           = Set("ʝ", Consonant, Form.Palatal, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlVelarFricative             = Set("x", Consonant, Form.Velar, Sound.Fricative, Props.Pulmonic)
    let VdVelarFricative             = Set("ɣ", Consonant, Form.Velar, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlUvularFricative            = Set("χ", Consonant, Form.Uvular, Sound.Fricative, Props.Pulmonic)
    let VdUvularFricative            = Set("ʁ", Consonant, Form.Uvular, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlPharyngealFricative        = Set("ħ", Consonant, Form.Pharyngeal, Sound.Fricative, Props.Pulmonic)
    let VdPharyngealFricative        = Set("ʕ", Consonant, Form.Pharyngeal, Sound.Fricative, Props.Voiced | Props.Pulmonic)
    let VlGlottalFricative           = Set("h", Consonant, Form.Glottal, Sound.Fricative, Props.Pulmonic)
    let VdGlottalFricative           = Set("ɦ", Consonant, Form.Glottal, Sound.Fricative, Props.Voiced | Props.Pulmonic)
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = Set("ɬ", Consonant, Form.Alveolar, Sound.Lateral_Fricative, Props.Pulmonic)
    let VdAlveolarLateralFricative   = Set("ɮ", Consonant, Form.Alveolar, Sound.Lateral_Fricative, Props.Voiced | Props.Pulmonic)
														
    // Approximant										
    let VdLabioDentalApproximant     = Set("ʋ", Consonant, Form.Labiodental, Sound.Approximant, Props.Voiced | Props.Pulmonic)
    let VdPostAlveolarApproximant    = Set("ɹ", Consonant, Form.Alveolar, Sound.Approximant, Props.Voiced | Props.Pulmonic)
    let VdRetroFlexApproximant       = Set("ɻ", Consonant, Form.Retroflex, Sound.Approximant, Props.Voiced | Props.Pulmonic)
    let VdPalatalApproximant         = Set("j", Consonant, Form.Palatal, Sound.Approximant, Props.Voiced | Props.Pulmonic)
    let VelarApproximant             = Set("ɰ", Consonant, Form.Velar, Sound.Approximant, Props.Voiced | Props.Pulmonic)
														
    // LateralApproximant								
    let VdAlveolarLateralApproximant = Set("l", Consonant, Form.Alveolar, Sound.Lateral_Approximant, Props.Voiced | Props.Pulmonic)
    let VdRetroFlexLateral           = Set("ɭ", Consonant, Form.Retroflex, Sound.Lateral_Approximant, Props.Voiced | Props.Pulmonic)
    let VdPalatalLateral             = Set("ʎ", Consonant, Form.Palatal, Sound.Lateral_Approximant, Props.Voiced | Props.Pulmonic)
    let VdVelarLateral               = Set("ʟ", Consonant, Form.Velar, Sound.Lateral_Approximant, Props.Voiced | Props.Pulmonic)

    let VdAlveoloPalatalFricative    = Set("ʑ", None, None, None, None)
    let VdEpiglottalFricative        = Set("ʢ", None, None, None, None)
    let OpenBackUnrounded            = Set("ɑ", None, None, None, None)
    let OpenMidSchwa                 = Set("ɐ", None, None, None, None)
    let OpenBackRounded              = Set("ɒ", None, None, None, None)
    let RaisedOpenFrontUnrounded     = Set("æ", None, None, None, None)
    let VdBilabialimPlosive          = Set("ɓ", None, None, None, None)
    let OpenMidBackRounded           = Set("ɔ", None, None, None, None)
    let VlAlveoloPalatalFricative    = Set("ɕ", None, None, None, None)
    let VdAlveolarimPlosive          = Set("ɗ", None, None, None, None)
    let VdPostAlveolarAffricate      = Set("ʤ", None, None, None, None)
    let Schwa                        = Set("ə", None, None, None, None)
    let CloseMidSchwa                = Set("ɘ", None, None, None, None)
    let RhotacizedSchwa              = Set("ɚ", None, None, None, None)
    let OpenMidFrontUnrounded        = Set("ɛ", None, None, None, None)
    let OpenMidCentral               = Set("ɜ", None, None, None, None)
    let RhotacizedOpenMidCentral     = Set("ɝ", None, None, None, None)
    let OpenMidCentralRounded        = Set("ɞ", None, None, None, None)
    let VdPalatalImplosive           = Set("ʄ", None, None, None, None)
    let VdVelarImplosive             = Set("ɠ", None, None, None, None)
    let VdUvularImplosive            = Set("ʛ", None, None, None, None)
    let VlMultiplePlaceFricative     = Set("ɧ", None, None, None, None)
    let LabialPalatalApproximant     = Set("ɥ", None, None, None, None)
    let VlEpiglottalFricative        = Set("ʜ", None, None, None, None)
    let CloseCentralUnrounded        = Set("ɨ", None, None, None, None)
    let LaxCloseFrontUnrounded       = Set("ɪ", None, None, None, None)
    let VelarizedVdAlveolarLateral   = Set("ɫ", None, None, None, None)
    let CloseBackUnrounded           = Set("ɯ", None, None, None, None)
    let FrontCloseMidRounded         = Set("ø", None, None, None, None)
    let RoundedSchwa                 = Set("ɵ", None, None, None, None)
    let FrontOpenMidRounded          = Set("œ", None, None, None, None)
    let FrontOpenRounded             = Set("ɶ", None, None, None, None)
    let BilabialClick                = Set("ʘ", None, None, None, None)
    let VdAlveolarLateralFlap        = Set("ɺ", None, None, None, None)
    let VlPostAlveolarAffricate      = Set("ʧ", None, None, None, None)
    let CloseCentralRounded          = Set("ʉ", None, None, None, None)
    let LaxCloseBackRounded          = Set("ʊ", None, None, None, None)
    let OpenMidBackUnrounded         = Set("ʌ", None, None, None, None)
    let CloseMidBackUnrounded        = Set("ɤ", None, None, None, None)
    let VlLabialVelarFricative       = Set("ʍ", None, None, None, None)
    let LaxCloseFrontRounded         = Set("ʏ", None, None, None, None)
    let VdEpiglottalPlosive          = Set("ʡ", None, None, None, None)
    let DentalClick                  = Set("ǀ", None, None, None, None)
    let AlveolarLateralClick         = Set("ǁ", None, None, None, None)
    let AlveolarClick                = Set("ǂ", None, None, None, None)
    let RetroFlexClick               = Set("ǃ", None, None, None, None)
    let Downstep                     = Set("↓", None, None, None, None)
    let Upstep                       = Set("↑", None, None, None, None)
    let Becomes                      = Set("→", None, None, None, None)
    let Globalrise                   = Set("↗", None, None, None, None)
    let Globalfall                   = Set("↘", None, None, None, None)
    let PrimaryStress                = Set("\u02C8", None, None, None, None)
    let SecondaryStress              = Set("\u02CC", None, None, None, None)
    let LengthMark                   = Set("\u02D0", None, None, None, None)
    let Halflength                   = Set("\u02D1", None, None, None, None)
    let Ejective                     = Set("\u02BC", None, None, None, None)
    let Rhotacized                   = Set("\u02B4", None, None, None, None)
    let Aspirated                    = Set("\u02B0", None, None, None, None)
    let BreathyVoiceAspirated        = Set("\u02B1", None, None, None, None)
    let Palatalized                  = Set("\u02B2", None, None, None, None)
    let Labialized                   = Set("\u02B7", None, None, None, None)
    let Velarized                    = Set("\u02E0", None, None, None, None)
    let Pharyngealized               = Set("\u02E4", None, None, None, None)
    let RhoticHook                   = Set("\u02DE", None, None, None, None)
    let Voiceless                    = Set("\u0325", None, None, None, None)
    let VoicelessDescender           = Set("\u030A", None, None, None, None)
    let BreathyVoiced                = Set("\u0324", None, None, None, None)
    let Dental                       = Set("\u032A", None, None, None, None)
    let Voiced                       = Set("\u032C", None, None, None, None)
    let CreakyVoiced                 = Set("\u0330", None, None, None, None)
    let Apical                       = Set("\u033A", None, None, None, None)
    let LinguoLabial                 = Set("\u033C", None, None, None, None)
    let Laminal                      = Set("\u033B", None, None, None, None)
    let NotAudiblyReleased           = Set("\u031A", None, None, None, None)
    let MoreRounded                  = Set("\u0339", None, None, None, None)
    let Nasalized                    = Set("\u0303", None, None, None, None)
    let LessRounded                  = Set("\u031C", None, None, None, None)
    let Advanced                     = Set("\u031F", None, None, None, None)
    let Retracted                    = Set("\u0320", None, None, None, None)
    let Centralized                  = Set("\u0308", None, None, None, None)
    let VelarizedOrPharyngealized    = Set("\u0334", None, None, None, None)
    let ReadyMadeCombination         = Set("\u026B", None, None, None, None)
    let MidCentralized               = Set("\u033D", None, None, None, None)
    let Raised                       = Set("\u031D", None, None, None, None)
    let Syllabic                     = Set("\u0329", None, None, None, None)
    let Lowered                      = Set("\u031E", None, None, None, None)
    let NonSyllabic                  = Set("\u032F", None, None, None, None)
    let AdvancedTongueRoot           = Set("\u0318", None, None, None, None)
    let RetractedTongueRoot          = Set("\u0319", None, None, None, None)
    let Extrashort                   = Set("\u0306", None, None, None, None)
    let ExtraHighTone                = Set("\u030B", None, None, None, None)
    let HighTone                     = Set("\u0301", None, None, None, None)
    let MidTone                      = Set("\u0304", None, None, None, None)
    let LowTone                      = Set("\u0300", None, None, None, None)
    let ExtraLowTone                 = Set("\u030F", None, None, None, None)
    let TieBarBelow                  = Set("\u035C", None, None, None, None)
    let TieBarAbove                  = Set("\u0361", None, None, None, None)
  }

  let HeaderCell(d) = Cell {
    HAlign: HAligns.Center,
    Style.SansSerif,
    Style.TitleBackground,
    EdgeB: 1 pts,
    PaddingTB: 2 pts,
    d
  }

  let TitleBar(name, columns) = Row {
    Cell {
      Padding: 2 pts,
      ParAlignment: ParAlignments.Center,
      Background: 40%,
      TextHeight: 16 pts,
      TextColor: Colors.White,
      ColumnSpan: columns,
      name
    }
  }

  let CellSize = Size(20 pts, 30 pts)

  let ShowSound(c) = Canvas {
    HAlign: HAligns.Center,
    X: ((c.Prop & Props.Voiced) != 0 ? CellSize.Width : 0),
    Size: CellSize,
    if c then
      c.CodePoint
    else
      Style.ImpossibleBackground
    end
  }

  let FindCell(list) = Cell {
    if list.Length > 0 then
      TextFamily: Style.IPAFamily,
      TextHeight: CellSize.Height - 6 pts,
      Canvas {
        Width: CellSize.Width * 2,
        Height: CellSize.Height,
        ShowSound(each list)
      }
//    else
//      Style.ImpossibleBackground
    end
  }

  let FindSound(c, data) = c.Type == Consonant and ((c.Prop & Props.Pulmonic) > 0) and c.Sound == data.Sound and c.Form == data.Form

  let PulmonicCell(sound, form) = FindCell(Alphabet.FindSlice(FindSound, 2, {Sound: sound, Form: form}))

  let PulmonicRow(sound) = Row {
    EdgeB: 0.5 pts,
    Cell {
      VAlign: VAligns.Center,
      EdgeR: 0.5 pts,
      Style.TitleBackground,
      PaddingLR: 2 pts,
      TextHeight: 8 pts,
      EachSymbol.SymbolName.Substitute(EachSymbol.SymbolName.FindIndex("_"), Space)
    },
    PulmonicCell(sound, each Form)
  }

  let SymbolHeader(v) = HeaderCell(EachSymbol.SymbolName)

  let PulmonicConsonantTable = Block {
    Table {
      HAlign: HAligns.Center,
      Edge: 0.5 pts,
      Columns: [(0.8 inches) {EdgeR: 0.5 pts}] + [(0.6 inches) {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * 11,

      TitleBar("Pulmonic Consonants", 12),
      Row {
        Style.TitleBackground,
        TextHeight: 7 pts,
        HeaderCell(Empty),
        SymbolHeader(each Form)
      },
      PulmonicRow(each Sound),
    },
    Paragraph {
      "Where symbols appear in pairs, the one to the right represents a voiced consonant."
    }
  }

  let ConCell(c, name) = Cell {
    Padding: 2 pts,
    Group {
      VAlign: VAligns.Center,
      Span {
        TextFamily: Style.IPAFamily,
        TextHeight: 18 pts,
        c,
      },
      Space,
      name
    }
  }

  let ConsonantTable = Table {
    HAlign: HAligns.Center,
    Edge: 0.5 pts,
    Columns: [(1.5 inches) {EdgeR: 0.5 pts}],

    TitleBar("Non-Pulmonic Consonants", 3),
    Row {
      TextHeight: 12 pts,
      HeaderCell(each ["Clicks", "Voiced implosives", "Ejectives"])
    },
    Row {
      ConCell(Alphabet.BilabialClick, "Bilabial"), ConCell(Alphabet.VdBilabialimPlosive, "Bilabial"), ConCell(Alphabet.VlBilabialPlosive Alphabet.Ejective, "Bilabial")
    },
    Row {
      ConCell(Alphabet.DentalClick, "Dental"), ConCell(Alphabet.VdAlveolarimPlosive, "Dental/alveolar"), ConCell(Alphabet.VlAlveolarPlosive Alphabet.Ejective, "Dental/alveolar")
    },
    Row {
      ConCell(Alphabet.RetroFlexClick, "(Post)alveoalar"), ConCell(Alphabet.VdPalatalImplosive, "Palatal"), ConCell(Alphabet.VlVelarPlosiv Alphabet.Ejective, "Velar")
    },
    Row {
      ConCell(Alphabet.AlveolarClick, "Palatoalveolar"), ConCell(Alphabet.VdVelarImplosive, "Velar"), ConCell(Alphabet.VlAlveolarFricative Alphabet.Ejective, "Alveolar fricative")
    },
    Row {
      ConCell(Alphabet.AlveolarLateralClick, "Alveolar lateral"), ConCell(Alphabet.VdUvularImplosive, "Uvular"), ConCell(Alphabet.Ejective, Chars.HorizontalEllipsis)
    },
  }

  let ShowAlphabet = Block {
    PulmonicConsonantTable,
    Empty,
    ConsonantTable
  }
}
