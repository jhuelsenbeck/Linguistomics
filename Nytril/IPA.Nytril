using Format, Units
//======================================================================

with IPA {
  let None = 0
  let PulmonicColumns = 12

  flags Props {
    None,
    Voiced,
    Pulmonic,
    Click,
    Ejective,
    Implosive,
    Extension,
  }

  enum Categories {
    Vowel,
    Consonant
  }

  enum Places {
    Bilabial,
    LabioDental,
    LinguoLabial,
    Dental,
    Alveolar,
    Postalveolar,
    Retroflex,
    Palatal,
    Velar,
    Uvular,
    Pharyngeal,
    Glottal,
  }

  let PlaceNames = [
    "Bilabial",
    "Labio-Dental",
    "Linguo-Labial",
    "Dental",
    "Alveolar",
    "Postalveolar",
    "Retroflex",
    "Palatal",
    "Velar",
    "Uvular",
    "Pharyngeal-Epiglottal",
    "Glottal",
  ]

  let NonPulmonicPlaces = Places[..-2]

  enum Manners {
    Nasal,
    Stop,
    SibilantFricative,
    Fricative,
    Approximant,
    TapFlap,
    Trill,
    LateralFricative,
    LateralApproximant,
    LateralTapFlap
  }

  let MannerNames = [
    "Nasal",
    "Stop",
    "Sibilant Fricative",
    "Fricative",
    "Approximant",
    "Tap/flap",
    "Trill",
    "Lateral Fricative",
    "Lateral Approximant",
    "Lateral Tap/flap",
  ]

  let PulmonicManners = Manners[..Manners.LateralTapFlap]

  let HasFlag(props, prop) = (props & prop) != 0

  let Set(c, category, form, sound, prop) = {
    Text: c,
    Category: category,
    Place: form,
    Manner: sound,
    Prop: prop
  }

  let PC(c, form, sound, prop)  = Set(c, Categories.Consonant, form, sound, prop | Props.Pulmonic)
  let NPC(c, form, sound, prop) = Set(c, Categories.Consonant, form, sound, prop)
  let PCI(form, sound, prop)    = PC(null, form, sound, prop)

  let EqualSound(r, data) =
    r.Category == data.Category and
    r.Place == data.Place and
    r.Manner == data.Manner and
    r.Prop.HasFlag(data.Prop)

  let Impossible = [
    PCI(Places.Pharyngeal, Manners.Nasal, None),
    PCI(Places.Pharyngeal, Manners.Nasal, Props.Voiced),
    PCI(Places.Glottal, Manners.Nasal, None),
    PCI(Places.Glottal, Manners.Nasal, Props.Voiced),

    PCI(Places.Pharyngeal, Manners.Stop, Props.Voiced),
    PCI(Places.Glottal, Manners.Stop, Props.Voiced),

    PCI(Places.Bilabial, Manners.SibilantFricative, None),
    PCI(Places.Bilabial, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.LabioDental, Manners.SibilantFricative, None),
    PCI(Places.LabioDental, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.LinguoLabial, Manners.SibilantFricative, None),
    PCI(Places.LinguoLabial, Manners.SibilantFricative, Props.Voiced),

    PCI(Places.Velar, Manners.SibilantFricative, None),
    PCI(Places.Velar, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.Uvular, Manners.SibilantFricative, None),
    PCI(Places.Uvular, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.SibilantFricative, None),
    PCI(Places.Pharyngeal, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.Glottal, Manners.SibilantFricative, None),
    PCI(Places.Glottal, Manners.SibilantFricative, Props.Voiced),

    PCI(Places.Velar, Manners.Trill, None),
    PCI(Places.Velar, Manners.Trill, Props.Voiced),
    PCI(Places.Glottal, Manners.Trill, None),
    PCI(Places.Glottal, Manners.Trill, Props.Voiced),
    PCI(Places.Velar, Manners.TapFlap, None),
    PCI(Places.Velar, Manners.TapFlap, Props.Voiced),
    PCI(Places.Glottal, Manners.TapFlap, None),
    PCI(Places.Glottal, Manners.TapFlap, Props.Voiced),
    PCI(Places.Bilabial, Manners.LateralFricative, None),
    PCI(Places.Bilabial, Manners.LateralFricative, Props.Voiced),
    PCI(Places.LabioDental, Manners.LateralFricative, None),
    PCI(Places.LabioDental, Manners.LateralFricative, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.LateralFricative, None),
    PCI(Places.Pharyngeal, Manners.LateralFricative, Props.Voiced),
    PCI(Places.Glottal, Manners.LateralFricative, None),
    PCI(Places.Glottal, Manners.LateralFricative, Props.Voiced),
    PCI(Places.Bilabial, Manners.LateralApproximant, None),
    PCI(Places.Bilabial, Manners.LateralApproximant, Props.Voiced),
    PCI(Places.LabioDental, Manners.LateralApproximant, None),
    PCI(Places.LabioDental, Manners.LateralApproximant, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.LateralApproximant, None),
    PCI(Places.Pharyngeal, Manners.LateralApproximant, Props.Voiced),
    PCI(Places.Glottal, Manners.LateralApproximant, None),
    PCI(Places.Glottal, Manners.LateralApproximant, Props.Voiced),
    PCI(Places.Bilabial, Manners.LateralTapFlap, None),
    PCI(Places.Bilabial, Manners.LateralTapFlap, Props.Voiced),
    PCI(Places.LabioDental, Manners.LateralTapFlap, None),
    PCI(Places.LabioDental, Manners.LateralTapFlap, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.LateralTapFlap, None),
    PCI(Places.Pharyngeal, Manners.LateralTapFlap, Props.Voiced),
    PCI(Places.Glottal, Manners.LateralTapFlap, None),
    PCI(Places.Glottal, Manners.LateralTapFlap, Props.Voiced),
  ]                       									

  with Alphabet {
    // Nasal					
    let VlBilabialNasal              = PC("m" Voiceless, Places.Bilabial, Manners.Nasal, Props.None)
    let VdBilabialNasal              = PC("m", Places.Bilabial, Manners.Nasal, Props.Voiced)
    let VdLabioDentalNasal           = PC("ɱ", Places.LabioDental, Manners.Nasal, Props.Voiced)
    let VdLinguoLabioNasal           = PC("n" LinguoLabial, Places.LinguoLabial, Manners.Nasal, Props.Voiced)

    let VlAlveolarNasal              = PC("n" Voiceless, Places.Alveolar, Manners.Nasal, Props.None)
    let VdAlveolarNasal              = PC("n", Places.Alveolar, Manners.Nasal, Props.Voiced)
    let VlRetroFlexNasal             = PC("ɳ" VoicelessDescender, Places.Retroflex, Manners.Nasal, Props.None)
    let VdRetroFlexNasal             = PC("ɳ", Places.Retroflex, Manners.Nasal, Props.Voiced)
    let VdPalatalNasal               = PC("ɲ", Places.Palatal, Manners.Nasal, Props.Voiced)
    let VlVelarNasal                 = PC("ŋ" VoicelessDescender, Places.Velar, Manners.Nasal, Props.None)
    let VdVelarNasal                 = PC("ŋ", Places.Velar, Manners.Nasal, Props.Voiced)
    let VdUvularNasal                = PC("ɴ", Places.Uvular, Manners.Nasal, Props.Voiced)
														
    // Stop
    let VlBilabialStop            = PC("p", Places.Bilabial, Manners.Stop, Props.None)
    let VdBilabialStop            = PC("b", Places.Bilabial, Manners.Stop, Props.Voiced)
    let VlLabioDentalStop         = PC("p" Dental, Places.LabioDental, Manners.Stop, Props.None)
    let VdLabioDentalStop         = PC("b" Dental, Places.LabioDental, Manners.Stop, Props.Voiced)
    let VlAlveolarStop            = PC("t", Places.Alveolar, Manners.Stop, Props.None)
    let VdAlveolarStop            = PC("d", Places.Alveolar, Manners.Stop, Props.Voiced)
    let VlLinguoLabialStop        = PC("t" LinguoLabial, Places.LinguoLabial, Manners.Stop, Props.None)
    let VdLinguoLabialStop        = PC("d" LinguoLabial, Places.LinguoLabial, Manners.Stop, Props.Voiced)
    let VlRetroflexStop           = PC("ʈ", Places.Retroflex, Manners.Stop, Props.None)
    let VdRetroflexStop           = PC("ɖ", Places.Retroflex, Manners.Stop, Props.Voiced)
    let VlPalatalStop             = PC("c", Places.Palatal, Manners.Stop, Props.None)
    let VdPalatalStop             = PC("ɟ", Places.Palatal, Manners.Stop, Props.Voiced)
    let VlVelarStop               = PC("k", Places.Velar, Manners.Stop, Props.None)
    let VdVelarStop               = PC("ɡ", Places.Velar, Manners.Stop, Props.Voiced)
    let VlUvularStop              = PC("q", Places.Uvular, Manners.Stop, Props.None)
    let VdUvularStop              = PC("ɢ", Places.Uvular, Manners.Stop, Props.Voiced)
    let VdEpiglottalStop          = PC("ʡ", Places.Pharyngeal, Manners.Stop, Props.None)
    let GlottalStop               = PC("ʔ", Places.Glottal, Manners.Stop, Props.None)
		
    // Sibilant Fricative										
    let VlAlveolarSibFricative       = PC("s", Places.Alveolar, Manners.SibilantFricative, Props.None)
    let VdAlveolarSibFricative       = PC("z", Places.Alveolar, Manners.SibilantFricative, Props.Voiced)
    let VlPostAlveolarSibFricative   = PC("ʃ", Places.Postalveolar, Manners.SibilantFricative, Props.None)
    let VdPostAlveolarSibFricative   = PC("ʒ", Places.Postalveolar, Manners.SibilantFricative, Props.Voiced)
    let VlRetroflexSibFricative      = PC("ʂ", Places.Retroflex, Manners.SibilantFricative, Props.None)
    let VdRetroflexSibFricative      = PC("ʐ", Places.Retroflex, Manners.SibilantFricative, Props.Voiced)
    let VlAlveoloPalatalSibFricative = PC("ɕ", Places.Palatal, Manners.SibilantFricative, Props.None)
    let VdAlveoloPalatalSibFricative = PC("ʑ", Places.Palatal, Manners.SibilantFricative, Props.Voiced)

    // Fricative										
    let VlBilabialFricative          = PC("ɸ", Places.Bilabial, Manners.Fricative, Props.None)
    let VdBilabialFricative          = PC("β", Places.Bilabial, Manners.Fricative, Props.Voiced)
    let VlLabiodentalFricative       = PC("f", Places.LabioDental, Manners.Fricative, Props.None)
    let VdLabiodentalFricative       = PC("v", Places.LabioDental, Manners.Fricative, Props.Voiced)
    let VlLinguoLabialFricative      = PC("θ" LinguoLabial, Places.LinguoLabial, Manners.Fricative, Props.None)
    let VdLinguoLabialFricative      = PC("ð" LinguoLabial, Places.LinguoLabial, Manners.Fricative, Props.Voiced)
    let VlDentalFricative            = PC("θ", Places.Dental, Manners.Fricative, Props.None)
    let VdDentalFricative            = PC("ð", Places.Dental, Manners.Fricative, Props.Voiced)
    let VlAlveolarFricative          = PC("θ" CombiningMacron, Places.Alveolar, Manners.Fricative, Props.None)
    let VdAlveolarFricative          = PC("ð" CombiningMacron, Places.Alveolar, Manners.Fricative, Props.Voiced)
    let VlPostaveolarFricative       = PC("ɹ̠̊", Places.Postalveolar, Manners.Fricative, Props.None)
    let VdPostalveolarFricative      = PC("ɹ̝̊", Places.Postalveolar, Manners.Fricative, Props.Voiced)
    let VdRetroflexFricative         = PC("ɻ˔", Places.Retroflex, Manners.Fricative, Props.Voiced)
    let VlPalatalFricative           = PC("ç", Places.Palatal, Manners.Fricative, Props.None)
    let VdPalatalFricative           = PC("ʝ", Places.Palatal, Manners.Fricative, Props.Voiced)
    let VlVelarFricative             = PC("x", Places.Velar, Manners.Fricative, Props.None)
    let VdVelarFricative             = PC("ɣ", Places.Velar, Manners.Fricative, Props.Voiced)
    let VlUvularFricative            = PC("χ", Places.Uvular, Manners.Fricative, Props.None)
    let VdUvularFricative            = PC("ʁ", Places.Uvular, Manners.Fricative, Props.Voiced)
    let VlPharyngealFricative        = PC("ħ", Places.Pharyngeal, Manners.Fricative, Props.None)
    let VdPharyngealFricative        = PC("ʕ", Places.Pharyngeal, Manners.Fricative, Props.Voiced)
    let VlGlottalFricative           = PC("h", Places.Glottal, Manners.Fricative, Props.None)
    let VdGlottalFricative           = PC("ɦ", Places.Glottal, Manners.Fricative, Props.Voiced)
														
    // Approximant										
    let VlLabioDentalApproximant     = PC("ʋ" Voiceless, Places.LabioDental, Manners.Approximant, Props.None)
    let VdLabioDentalApproximant     = PC("ʋ", Places.LabioDental, Manners.Approximant, Props.Voiced)
    let VlPostAlveolarApproximant    = PC("ɹ" Voiceless, Places.Alveolar, Manners.Approximant, Props.None)
    let VdPostAlveolarApproximant    = PC("ɹ", Places.Alveolar, Manners.Approximant, Props.Voiced)
    let VlRetroflexApproximant       = PC("ɻ" VoicelessDescender, Places.Retroflex, Manners.Approximant, Props.None)
    let VdRetroflexApproximant       = PC("ɻ", Places.Retroflex, Manners.Approximant, Props.Voiced)
    let VlPalatalApproximant         = PC("j" VoicelessDescender, Places.Palatal, Manners.Approximant, Props.None)
    let VdPalatalApproximant         = PC("j", Places.Palatal, Manners.Approximant, Props.Voiced)
    let VlVelarApproximant           = PC("ɰ" VoicelessDescender, Places.Velar, Manners.Approximant, Props.None)
    let VdVelarApproximant           = PC("ɰ", Places.Velar, Manners.Approximant, Props.Voiced)
    let VdGlottalApproximant         = PC("ʔ̞", Places.Glottal, Manners.Approximant, Props.Voiced)
														
    // Tap or Flap										
    let VdBilabialDentalFlap         = PC("ⱱ̟", Places.Bilabial, Manners.TapFlap, Props.Voiced)
    let VdLabioDentalFlap            = PC("ⱱ", Places.LabioDental, Manners.TapFlap, Props.Voiced)
    let VdLingualLabialStop          = PC("ɾ̼", Places.LinguoLabial, Manners.TapFlap, Props.Voiced)
    let VlAlveolarFlap               = PC("ɾ" Voiceless, Places.Alveolar, Manners.TapFlap, Props.None)
    let VdAlveolarTap                = PC("ɾ", Places.Alveolar, Manners.TapFlap, Props.Voiced)
    let VlRetroflexFlap              = PC("ɽ" VoicelessDescender, Places.Retroflex, Manners.TapFlap, Props.None)
    let VdRetroflexFlap              = PC("ɽ", Places.Retroflex, Manners.TapFlap, Props.Voiced)
    let VdUvularFlap                 = PC("ɢ̆", Places.Uvular, Manners.TapFlap, Props.Voiced)
    let VdPharyngealFlap             = PC("ʡ̆", Places.Pharyngeal, Manners.TapFlap, Props.Voiced)
														
    // Trill											
    let VlBilabialTrill              = PC("ʙ" Voiceless, Places.Bilabial, Manners.Trill, Props.None)
    let VdBilabialTrill              = PC("ʙ", Places.Bilabial, Manners.Trill, Props.Voiced)
    let VlAlveolarTrill              = PC("r" Voiceless, Places.Alveolar, Manners.Trill, Props.None)
    let VdAlveolarTrill              = PC("r", Places.Alveolar, Manners.Trill, Props.Voiced)
    let VlRetroflexTrill             = PC("ɽ̊r̥", Places.Retroflex, Manners.Trill, Props.None)
    let VdRetroflexTrill             = PC("ɽr", Places.Retroflex, Manners.Trill, Props.Voiced)
    let VlUvularTrill                = PC("ʀ" Voiceless, Places.Uvular, Manners.Trill, Props.None)
    let VdUvularTrill                = PC("ʀ", Places.Uvular, Manners.Trill, Props.Voiced)
    let VlPharyngealTrill            = PC("H", Places.Pharyngeal, Manners.Trill, Props.None)
    let VdPharyngealTrill            = PC("ʢ", Places.Pharyngeal, Manners.Trill, Props.Voiced)
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = PC("ɬ", Places.Alveolar, Manners.LateralFricative, Props.None)
    let VdAlveolarLateralFricative   = PC("ɮ", Places.Alveolar, Manners.LateralFricative, Props.Voiced)
    let VlRetroflexLateralFricative  = PC("ɬ", Places.Retroflex, Manners.LateralFricative, Props.Extension)
    let VdRetroflexLateralFricative  = PC("ɮ", Places.Retroflex, Manners.LateralFricative, Props.Voiced | Props.Extension)
    let VlAlveolarPalatalFricative   = PC("ɬ", Places.Retroflex, Manners.LateralFricative, Props.Extension)
														
    // LateralApproximant								
    let VlAlveolarLateralApproximant = PC("l" Voiceless, Places.Alveolar, Manners.LateralApproximant, Props.None)
    let VdAlveolarLateralApproximant = PC("l", Places.Alveolar, Manners.LateralApproximant, Props.Voiced)
    let VdRetroflexLateral           = PC("ɭ", Places.Retroflex, Manners.LateralApproximant, Props.Voiced)
    let VdPalatalLateral             = PC("ʎ", Places.Palatal, Manners.LateralApproximant, Props.Voiced)
    let VdVelarLateral               = PC("ʟ", Places.Velar, Manners.LateralApproximant, Props.Voiced)

    // Lateral tap/flap
    let VdAlveolarLateralFlap        = PC("ɺ", Places.Alveolar, Manners.LateralTapFlap, Props.Voiced)
    let VdRetroflexLateralFlap       = PC("ɭ̆", Places.Retroflex, Manners.LateralTapFlap, Props.Voiced | Props.Extension)
    let VdPalatalLateralFlap         = PC("ʎ" Extrashort, Places.Palatal, Manners.LateralTapFlap, Props.Voiced | Props.Extension)
    let VdVelarLateralTap            = PC("L̆", Places.Velar, Manners.LateralTapFlap, Props.Voiced | Props.Extension)
/*
    // Clicks
    let BilabialClick                = Set("ʘ", Categories.Consonant, None, None, Props.Click)
    let DentalClick                  = Set("ǀ", Categories.Consonant, None, None, Props.Click)
    let RetroFlexClick               = Set("ǃ", Categories.Consonant, None, None, Props.Click)
    let AlveolarClick                = Set("ǂ", Categories.Consonant, None, None, Props.Click)
    let AlveolarLateralClick         = Set("ǁ", Categories.Consonant, None, None, Props.Click)

    // Voiced Stops
    let VdBilabialimStop          = Set("ɓ", Categories.Consonant, None, None, Props.Stop)
    let VdAlveolarimStop          = Set("ɗ", Categories.Consonant, None, None, Props.Stop)
    let VdPalatalImStop           = Set("ʄ", Categories.Consonant, None, None, Props.Stop)
    let VdVelarImStop             = Set("ɠ", Categories.Consonant, None, None, Props.Stop)
    let VdUvularImStop            = Set("ʛ", Categories.Consonant, None, None, Props.Stop)
*/
    let MakeEjective(sound) = NPC(sound.Text EjectiveMark, sound.Place, sound.Manner, Props.Ejective)

    let VlBilabialEjectiveStop    = MakeEjective(VlBilabialStop)
    let VlAveolarEjectiveStop     = MakeEjective(VlAlveolarStop)
    let VlRetroflexEjectiveStop   = MakeEjective(VlRetroflexStop)
    let VlPalatalEjectiveStop     = MakeEjective(VlPalatalStop)
    let VlVelarEjectiveStop       = MakeEjective(VlVelarStop)
    let VlUvularEjectiveStop      = MakeEjective(VlUvularStop)
    let VlEpiglottalEjectiveStop  = MakeEjective(VdEpiglottalStop)

//    VlAlveolarFricative, "Alveolar fricative", true)

//        ConCell(Alphabet.VlVelarStop, "Velar", true)
//        ConCell([Alphabet.VlAlveolarStop, Alphabet.TieBarBelow, Alphabet.VlAlveolarLateralFricative], "Lateral affricate", true)


/*      Row {
        ConCell(Alphabet.BilabialClick, "Bilabial fricated", false),
        ConCell(Alphabet.VdBilabialimStop, "Bilabial", false),
      },
      Row {
        ConCell(Alphabet.DentalClick, "Dental", false),
        ConCell(Alphabet.VdAlveolarimStop, "Dental/alveolar", false),
      },
      Row {
        ConCell(Alphabet.RetroFlexClick, "(Post)alveoalar", false),
        ConCell(Alphabet.VdPalatalImStop, "Palatal", false),
      },
      Row {
        ConCell(Alphabet.AlveolarClick, "Palatoalveolar", false),
        ConCell(Alphabet.VdVelarImStop, "Velar", false),
        ConCell(Alphabet.VlBilabialStop, "Bilabial", true)
      },
      Row {
        ConCell(Alphabet.AlveolarLateralClick, "Alveolar lateral", false),
        ConCell(Alphabet.VdUvularImStop, "Uvular", false),
      },
*/


    let VdEpiglottalFricative        = Set("ʢ", None, None, None, None)
    let VlMultiplePlaceFricative     = Set("ɧ", None, None, None, None)
    let VlLabialVelarFricative       = Set("ʍ", None, None, None, None)

    let VdPostAlveolarAffricate      = Set("ʤ", None, None, None, None)
    let VlPostAlveolarAffricate      = Set("ʧ", None, None, None, None)

    let OpenBackUnrounded            = Set("ɑ", None, None, None, None)
    let RaisedOpenFrontUnrounded     = Set("æ", None, None, None, None)
    let OpenMidFrontUnrounded        = Set("ɛ", None, None, None, None)
    let CloseCentralUnrounded        = Set("ɨ", None, None, None, None)
    let LaxCloseFrontUnrounded       = Set("ɪ", None, None, None, None)
    let CloseBackUnrounded           = Set("ɯ", None, None, None, None)
    let OpenMidBackUnrounded         = Set("ʌ", None, None, None, None)
    let CloseMidBackUnrounded        = Set("ɤ", None, None, None, None)

    let OpenMidSchwa                 = Set("ɐ", None, None, None, None)
    let OpenBackRounded              = Set("ɒ", None, None, None, None)
    let OpenMidBackRounded           = Set("ɔ", None, None, None, None)
    let Schwa                        = Set("ə", None, None, None, None)
    let CloseMidSchwa                = Set("ɘ", None, None, None, None)
    let RhotacizedSchwa              = Set("ɚ", None, None, None, None)
    let OpenMidCentral               = Set("ɜ", None, None, None, None)
    let RhotacizedOpenMidCentral     = Set("ɝ", None, None, None, None)
    let OpenMidCentralRounded        = Set("ɞ", None, None, None, None)
    let LabialPalatalApproximant     = Set("ɥ", None, None, None, None)
    let VlEpiglottalFricative        = Set("ʜ", None, None, None, None)
    let VelarizedVdAlveolarLateral   = Set("ɫ", None, None, None, None)
    let FrontCloseMidRounded         = Set("ø", None, None, None, None)
    let RoundedSchwa                 = Set("ɵ", None, None, None, None)
    let FrontOpenMidRounded          = Set("œ", None, None, None, None)
    let FrontOpenRounded             = Set("ɶ", None, None, None, None)
    let CloseCentralRounded          = Set("ʉ", None, None, None, None)
    let LaxCloseBackRounded          = Set("ʊ", None, None, None, None)
    let LaxCloseFrontRounded         = Set("ʏ", None, None, None, None)
  }

  let Downstep                     = '↓'
  let Upstep                       = '↑'
  let Becomes                      = '→'
  let Globalrise                   = '↗'
  let Globalfall                   = '↘'
  let ReadyMadeCombination         = '\u026B'
  let Breve                        = '\u02D8'
  let PrimaryStress                = '\u02C8'
  let SecondaryStress              = '\u02CC'
  let LengthMark                   = '\u02D0'
  let Halflength                   = '\u02D1'
  let EjectiveMark                 = '\u02BC'
  let Rhotacized                   = '\u02B4'
  let Aspirated                    = '\u02B0'
  let BreathyVoiceAspirated        = '\u02B1'
  let Palatalized                  = '\u02B2'
  let Labialized                   = '\u02B7'
  let Velarized                    = '\u02E0'
  let Pharyngealized               = '\u02E4'
  let RhoticHook                   = '\u02DE'
  let LowTone                      = '\u0300'
  let HighTone                     = '\u0301'
  let MidTone                      = '\u0304'
  let Extrashort                   = '\u0306'
  let ExtraHighTone                = '\u030B'
  let ExtraLowTone                 = '\u030F'
  let VoicelessDescender           = '\u030A'
  let BreathyVoiced                = '\u0324'
  let Voiceless                    = '\u0325'
  let Dental                       = '\u032A'
  let Voiced                       = '\u032C'
  let CreakyVoiced                 = '\u0330'
  let CombiningMacron              = '\u0331'
  let Apical                       = '\u033A'
  let LinguoLabial                 = '\u033C'
  let Laminal                      = '\u033B'
  let NotAudiblyReleased           = '\u031A'
  let MoreRounded                  = '\u0339'
  let Nasalized                    = '\u0303'
  let LessRounded                  = '\u031C'
  let Advanced                     = '\u031F'
  let Centralized                  = '\u0308'
  let VelarizedOrPharyngealized    = '\u0334'
  let Retracted                    = '\u0320'
  let MidCentralized               = '\u033D'
  let Raised                       = '\u031D'
  let Syllabic                     = '\u0329'
  let Lowered                      = '\u031E'
  let NonSyllabic                  = '\u032F'
  let AdvancedTongueRoot           = '\u0318'
  let RetractedTongueRoot          = '\u0319'
  let TieBarBelow                  = '\u035C'
  let TieBarAbove                  = '\u0361'

  let AllSounds = Alphabet + Impossible

  let TitleBar(name, columns) = Row {
    Cell {
      Padding: 2 pts,
      ParAlignment: ParAlignments.Center,
      Background: 40%,
      TextHeight: 16 pts,
      TextColor: Colors.White,
      ColumnSpan: columns,
      name
    }
  }

  let CellSize = Type.Size(20 pts, 20 pts)

  let ShowSound(r) = Canvas {
    HAlign: HAligns.Center,
    X: (r.Prop.HasFlag(Props.Voiced) ? CellSize.Width : 0),
    Width: CellSize.Width,
    Height: CellSize.Height,
    if r.Text then
      if r.Prop.HasFlag(Props.Extension) then
        Style.Extension
      end,
      TextFamily: Style.IPAFamily,
      TextHeight: CellSize.Height - 4 pts,
      r.Text
    else
      Style.ImpossibleBackground
    end
  }

  let SoundBlock(matches) = Cell {
    if matches.Length > 0 then
      if matches.Length == 2 and matches[0].Text == null and matches[1].Text == null then
        Style.ImpossibleBackground
      else
        TextHeight: 1 pts,
        Span {
          Canvas {
            Width: CellSize.Width * 2,
            Height: CellSize.Height,
            ShowSound(each matches)
          }
        }
      end
    end
  }

  let PulmonicCell(place, manner) = SoundBlock(AllSounds.FindSlice(EqualSound PC(null, place, manner, Props.None)))

  let PulmonicRow(manner) = Row {
    EdgeB: 0.5 pts,
    Cell {
      VAlign: VAligns.Center,
      EdgeR: 0.5 pts,
      Style.TitleBackground,
      PaddingLR: 2 pts,
      TextHeight: 7 pts,
      MannerNames[manner]
    },
    PulmonicCell(each Places, manner)
  }

  let HeaderCell(d) = Cell {
    HAlign: HAligns.Center,
    VAlign: VAligns.Center,
    Style.SansSerif,
    Style.TitleBackground,
    EdgeB: 1 pts,
    PaddingTB: 2 pts,
    d
  }

  let PlaceHeader(place) = HeaderCell(PlaceNames[place])

  let PulmonicTable = Block {
    Table {
      Style.TableEdge,
      Columns: [(45 pts) {EdgeR: 0.5 pts}] + [CellSize.Width*2 {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * PulmonicColumns,

      TitleBar(Lang.PConsonants, PulmonicColumns+1),
      Row {
        TextHeight: 10 pts,
        HeaderCell(Span {Bold, Lang.Place, Space, Alphabet.Becomes}),
        HeaderCell(Lang.Labial) {ColumnSpan: 3},
        HeaderCell(Lang.Coronal) {ColumnSpan: 4},
        HeaderCell(Lang.Dorsal) {ColumnSpan: 3},
        HeaderCell(Lang.Laryngeal) {ColumnSpan: 2},
      },
      Row {
        TextHeight: 7 pts,
        HeaderCell(Span {Bold, Lang.Manner, Space, Alphabet.Downstep}),
        PlaceHeader(each Places)
      },
      PulmonicRow(each PulmonicManners),
    },
    Paragraph {
      SpaceAfter: 16 pts,
      Lang.PulmonicSymbols(ToText(Alphabet.VlMultiplePlaceFricative)),
      Space,
      Span {Style.Extension Lang.Extensions}
    }
  }

  let ToText(c) = Span {
    (each c).Text
  }

  let NonPulmonicCell(place, manner, props) = SoundBlock(AllSounds.FindSlice(EqualSound NPC(null, place, manner, props)))

  let NPRow(name, manner) = Row {
    Cell {
      name
    },
    Cell {
      MannerNames[manner]
    },
    NonPulmonicCell(each NonPulmonicPlaces, manner, Props.Ejective)
  }

  let NPColumns = 11

  let NonPulmonicTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [(45 pts) {EdgeR: 0.5 pts}, (45 pts) {EdgeR: 0.5 pts}] + [CellSize.Width*2 {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * NPColumns,

      TitleBar(Lang.NPConsonants, NPColumns+2),
      Row {
        TextHeight: 7 pts,
        HeaderCell(Empty),
        HeaderCell(Span {Bold, Lang.Place, Space, Alphabet.Becomes}),
        PlaceHeader(each NonPulmonicPlaces)
      },
      NPRow("Ejective", Manners.Stop)
    },
    Paragraph {}
  }

  let VarCell(text) = Cell {
    VAlign: VAligns.Center,
    text.SymbolName
  }

  let GetPropNames(props, prop) = {
    if props.HasFlag(prop) then
      EachSymbol.SymbolName
    end
  }

  let AlphabetRow(c) = Row {
    Style.RowBar(EachIndex),
    Cell {
      TextHeight: 14 pts,
      HAlign: HAligns.Center,
      VAlign: VAligns.Center,
      ToText(c)
    },
    VarCell(Categories.GetReference(c.Category)),
    VarCell(Places.GetReference(c.Place)),
    VarCell(Manners.GetReference(c.Manner)),
    Cell {
      VAlign: VAligns.Center,
      Span {
        Separator: ", ",
        GetPropNames(c.Prop, each Props)
      }
    }
  }

  let AlphabetTable = Table {
    Style.TableEdge,
    PaddingL: 2 pts,
    PaddingB: 2 pts,
    Columns: [(30 pts) Style.ColumnEdge, (65 pts) Style.ColumnEdge, (110 pts)Style.ColumnEdge],

    TitleBar(Lang.IPAListing, 5),
    Row {
      TextHeight: 12 pts,
      HeaderCell(Lang.Text),
      HeaderCell(Lang.Categories) {HAlign: HAligns.Left},
      HeaderCell(Lang.Places) {HAlign: HAligns.Left},
      HeaderCell(Lang.Manners) {HAlign: HAligns.Left},
      HeaderCell(Lang.Properties) {HAlign: HAligns.Left}
    },
    AlphabetRow(each Alphabet)
  }

  let ShowAlphabet = Block {
    PulmonicTable,
    NonPulmonicTable,
    AlphabetTable
  }
}
