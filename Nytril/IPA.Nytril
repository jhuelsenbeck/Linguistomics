using Format, Units
//======================================================================

with IPA {
  flags Props {
    None,
    Voiced,
    Pulmonic,
    Click,
    Ejective,
    Implosive,
    Extension,
  }

  let PropNames = [
    Empty,
    "Voiced",
    "Pulmonic",
    "Click",
    "Ejective",
    "Implosive",
    "Extension",
  ]

  enum Categories {
    Vowel,
    Consonant,
    Other
  }

  let CategoryNames = [
    "Vowel",
    "Consonant",
    "Other"
  ]

  enum Opens {
    Close,
    NearClose,
    CloseMid,
    Mid,
    OpenMid,
    NearOpen,
    Open
  }

  let OpenNames = [
    "Close",
    "Near-close",
    "Close-mid",
    "Mid",
    "Open-mid",
    "Near-open",
    "Open"
  ]

  enum Positions {
    Front,
    Central,
    Back,
  }

  let PositionNames = [
    "Front",
    "Central",
    "Back",
  ]

  enum Places {
    Bilabial,
    Labial,
    LabialVelar,
    LabialPalatal,
    LabioDental,
    LinguoLabial,
    Dental,
    Alveolar,
    Postalveolar,
    Retroflex,
    Palatal,
    Velar,
    Uvular,
    Pharyngeal,
    Glottal,
    AlveoloPalatal
  }

  let PlaceNames = [
    "Bilabial",
    "Labial",
    "Labial-Velar",
    "Labial-Palatal",
    "Labio-Dental",
    "Linguo-Labial",
    "Dental",
    "Alveolar",
    "Postalveolar",
    "Retroflex",
    "Palatal",
    "Velar",
    "Uvular",
    "Pharyngeal-Epiglottal",
    "Glottal",
    "Alveolo-palatal"
  ]

  let FindPulmonic(sound, data) = sound.Place == data.Place and sound.Prop.HasFlag(Props.Pulmonic)
  let FindPulmonicPlace(place)  = Alphabet.Contains(FindPulmonic{Place: place})
  let PulmonicPlaces = Places.FindSlice(FindPulmonicPlace)

  let NonPulmonicPlaces = [
    Places.Bilabial,
    Places.LabioDental,
    Places.Dental,
    Places.Alveolar,
    Places.Postalveolar,
    Places.Retroflex,
    Places.Palatal,
    Places.Velar,
    Places.Uvular,
    Places.Pharyngeal,
  ]

  enum Manners {
    Stop,
    Nasal,
    SibilantFricative,
    Fricative,
    Approximant,
    TapFlap,
    Trill,
    LateralFricative,
    LateralApproximant,
    LateralTapFlap,
    Tenuis,
    TenuisLateral,
    Plosive,
    Implosive,
    Affricate
  }

  let PulmonicManners = [
    Manners.Stop,
    Manners.Nasal,
    Manners.SibilantFricative,
    Manners.Fricative,
    Manners.Approximant,
    Manners.TapFlap,
    Manners.Trill,
    Manners.LateralFricative,
    Manners.LateralApproximant,
    Manners.LateralTapFlap
  ]

  let MannerNames = [
    "Stop",
    "Nasal",
    "Sibilant Fricative",
    "Fricative",
    "Approximant",
    "Tap/flap",
    "Trill",
    "Lateral Fricative",
    "Lateral Approximant",
    "Lateral Tap/flap",
    "Tenuis",
    "Tenuis Lateral",
    "Plosive",
    "Implosive",
    "Affricate"
  ]

  let HasFlag(props, prop) = (props & prop) != 0

  let Set(c, category, place, manner, prop) = {
    Text: c,
    Category: category,
    Place: place,
    Manner: manner,
    Prop: prop,
    Name: "{0} {1} {2}"(prop.HasFlag(Props.Voiced) ? "Voiced" : "Voiceless", PlaceNames[place], MannerNames[manner])
  }

  let PC(c, place, manner, prop)  = Set(c, Categories.Consonant, place, manner, prop | Props.Pulmonic)
  let NPC(c, place, manner, prop) = Set(c, Categories.Consonant, place, manner, prop)
  let OT(c, place, manner, prop)  = Set(c, Categories.Other, place, manner, prop)
  let PCI(place, manner, prop)    = PC(null, place, manner, prop)
  let NPEjective(sound, manner)   = NPC(sound.Text EjectiveMark, sound.Place, manner, Props.Ejective)
  let NCI(place, manner, prop)    = NPC(null, place, manner, prop)

  let EqualOther(r) = r.Category == Categories.Other

  let EqualSound(r, data) =
    r.Category == data.Category and
    r.Place == data.Place and
    r.Manner == data.Manner and
    r.Prop.HasFlag(data.Prop)

  let Impossible = [
    PCI(Places.Pharyngeal, Manners.Nasal, Props.None),
    PCI(Places.Pharyngeal, Manners.Nasal, Props.Voiced),
    PCI(Places.Glottal, Manners.Nasal, Props.None),
    PCI(Places.Glottal, Manners.Nasal, Props.Voiced),

    PCI(Places.Pharyngeal, Manners.Stop, Props.Voiced),
    PCI(Places.Glottal, Manners.Stop, Props.Voiced),

    PCI(Places.Bilabial, Manners.SibilantFricative, Props.None),
    PCI(Places.Bilabial, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.LabioDental, Manners.SibilantFricative, Props.None),
    PCI(Places.LabioDental, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.LinguoLabial, Manners.SibilantFricative, Props.None),
    PCI(Places.LinguoLabial, Manners.SibilantFricative, Props.Voiced),

    PCI(Places.Velar, Manners.SibilantFricative, Props.None),
    PCI(Places.Velar, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.Uvular, Manners.SibilantFricative, Props.None),
    PCI(Places.Uvular, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.SibilantFricative, Props.None),
    PCI(Places.Pharyngeal, Manners.SibilantFricative, Props.Voiced),
    PCI(Places.Glottal, Manners.SibilantFricative, Props.None),
    PCI(Places.Glottal, Manners.SibilantFricative, Props.Voiced),

    PCI(Places.Velar, Manners.Trill, Props.None),
    PCI(Places.Velar, Manners.Trill, Props.Voiced),
    PCI(Places.Glottal, Manners.Trill, Props.None),
    PCI(Places.Glottal, Manners.Trill, Props.Voiced),
    PCI(Places.Velar, Manners.TapFlap, Props.None),
    PCI(Places.Velar, Manners.TapFlap, Props.Voiced),
    PCI(Places.Glottal, Manners.TapFlap, Props.None),
    PCI(Places.Glottal, Manners.TapFlap, Props.Voiced),
    PCI(Places.Bilabial, Manners.LateralFricative, Props.None),
    PCI(Places.Bilabial, Manners.LateralFricative, Props.Voiced),
    PCI(Places.LabioDental, Manners.LateralFricative, Props.None),
    PCI(Places.LabioDental, Manners.LateralFricative, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.LateralFricative, Props.None),
    PCI(Places.Pharyngeal, Manners.LateralFricative, Props.Voiced),
    PCI(Places.Glottal, Manners.LateralFricative, Props.None),
    PCI(Places.Glottal, Manners.LateralFricative, Props.Voiced),
    PCI(Places.Bilabial, Manners.LateralApproximant, Props.None),
    PCI(Places.Bilabial, Manners.LateralApproximant, Props.Voiced),
    PCI(Places.LabioDental, Manners.LateralApproximant, Props.None),
    PCI(Places.LabioDental, Manners.LateralApproximant, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.LateralApproximant, Props.None),
    PCI(Places.Pharyngeal, Manners.LateralApproximant, Props.Voiced),
    PCI(Places.Glottal, Manners.LateralApproximant, Props.None),
    PCI(Places.Glottal, Manners.LateralApproximant, Props.Voiced),
    PCI(Places.Bilabial, Manners.LateralTapFlap, Props.None),
    PCI(Places.Bilabial, Manners.LateralTapFlap, Props.Voiced),
    PCI(Places.LabioDental, Manners.LateralTapFlap, Props.None),
    PCI(Places.LabioDental, Manners.LateralTapFlap, Props.Voiced),
    PCI(Places.Pharyngeal, Manners.LateralTapFlap, Props.None),
    PCI(Places.Pharyngeal, Manners.LateralTapFlap, Props.Voiced),
    PCI(Places.Glottal, Manners.LateralTapFlap, Props.None),
    PCI(Places.Glottal, Manners.LateralTapFlap, Props.Voiced),

    NCI(Places.Bilabial, Manners.LateralFricative, Props.Ejective),
    NCI(Places.Bilabial, Manners.LateralFricative, Props.Ejective | Props.Voiced),
    NCI(Places.LabioDental, Manners.LateralFricative, Props.Ejective),
    NCI(Places.LabioDental, Manners.LateralFricative, Props.Ejective | Props.Voiced),
    NCI(Places.Pharyngeal, Manners.LateralFricative, Props.Ejective),
    NCI(Places.Pharyngeal, Manners.LateralFricative, Props.Ejective | Props.Voiced),

    NCI(Places.Velar, Manners.Tenuis, Props.Click),
    NCI(Places.Velar, Manners.Tenuis, Props.Click | Props.Voiced),
    NCI(Places.Uvular, Manners.Tenuis, Props.Click),
    NCI(Places.Uvular, Manners.Tenuis, Props.Click | Props.Voiced),
    NCI(Places.Pharyngeal, Manners.Tenuis, Props.Click),
    NCI(Places.Pharyngeal, Manners.Tenuis, Props.Click | Props.Voiced),

    NCI(Places.Velar, Manners.Nasal, Props.Click),
    NCI(Places.Velar, Manners.Nasal, Props.Click | Props.Voiced),
    NCI(Places.Uvular, Manners.Nasal, Props.Click),
    NCI(Places.Uvular, Manners.Nasal, Props.Click | Props.Voiced),
    NCI(Places.Pharyngeal, Manners.Nasal, Props.Click),
    NCI(Places.Pharyngeal, Manners.Nasal, Props.Click | Props.Voiced),

    NCI(Places.Bilabial, Manners.TenuisLateral, Props.Click),
    NCI(Places.Bilabial, Manners.TenuisLateral, Props.Click | Props.Voiced),
    NCI(Places.LabioDental, Manners.TenuisLateral, Props.Click),
    NCI(Places.LabioDental, Manners.TenuisLateral, Props.Click | Props.Voiced),
    NCI(Places.Velar, Manners.TenuisLateral, Props.Click),
    NCI(Places.Velar, Manners.TenuisLateral, Props.Click | Props.Voiced),
    NCI(Places.Uvular, Manners.TenuisLateral, Props.Click),
    NCI(Places.Uvular, Manners.TenuisLateral, Props.Click | Props.Voiced),
    NCI(Places.Pharyngeal, Manners.TenuisLateral, Props.Click),
    NCI(Places.Pharyngeal, Manners.TenuisLateral, Props.Click | Props.Voiced),
  ]                       									

  with Alphabet {
    //==================================
    // Pulmonic Consonants
    //==================================

    // Nasal					
    let VlBilabialNasal              = PC("m̥", Places.Bilabial, Manners.Nasal, Props.None)
    let VdBilabialNasal              = PC("m", Places.Bilabial, Manners.Nasal, Props.Voiced)
    let VdLabioDentalNasal           = PC("ɱ", Places.LabioDental, Manners.Nasal, Props.Voiced)
    let VdLinguoLabioNasal           = PC("n̼", Places.LinguoLabial, Manners.Nasal, Props.Voiced)

    let VlAlveolarNasal              = PC("n̥", Places.Alveolar, Manners.Nasal, Props.None)
    let VdAlveolarNasal              = PC("n", Places.Alveolar, Manners.Nasal, Props.Voiced)
    let VlRetroFlexNasal             = PC("ɳ̊", Places.Retroflex, Manners.Nasal, Props.None)
    let VdRetroFlexNasal             = PC("ɳ", Places.Retroflex, Manners.Nasal, Props.Voiced)
    let VlPalatalNasal               = PC("ɲ̊", Places.Palatal, Manners.Nasal, Props.None)
    let VdPalatalNasal               = PC("ɲ", Places.Palatal, Manners.Nasal, Props.Voiced)
    let VlVelarNasal                 = PC("ŋ̊", Places.Velar, Manners.Nasal, Props.None)
    let VdVelarNasal                 = PC("ŋ", Places.Velar, Manners.Nasal, Props.Voiced)
    let VdUvularNasal                = PC("ɴ", Places.Uvular, Manners.Nasal, Props.Voiced)
														
    // Stop
    let VlBilabialStop            = PC("p", Places.Bilabial, Manners.Stop, Props.None)
    let VdBilabialStop            = PC("b", Places.Bilabial, Manners.Stop, Props.Voiced)
    let VlLabioDentalStop         = PC("p̪", Places.LabioDental, Manners.Stop, Props.None)
    let VdLabioDentalStop         = PC("b̪", Places.LabioDental, Manners.Stop, Props.Voiced)
    let VlLinguoLabialStop        = PC("t̼", Places.LinguoLabial, Manners.Stop, Props.None)
    let VdLinguoLabialStop        = PC("d̼", Places.LinguoLabial, Manners.Stop, Props.Voiced)
    let VlAlveolarStop            = PC("t", Places.Alveolar, Manners.Stop, Props.None)
    let VdAlveolarStop            = PC("d", Places.Alveolar, Manners.Stop, Props.Voiced)
    let VlRetroflexStop           = PC("ʈ", Places.Retroflex, Manners.Stop, Props.None)
    let VdRetroflexStop           = PC("ɖ", Places.Retroflex, Manners.Stop, Props.Voiced)
    let VlPalatalStop             = PC("c", Places.Palatal, Manners.Stop, Props.None)
    let VdPalatalStop             = PC("ɟ", Places.Palatal, Manners.Stop, Props.Voiced)
    let VlVelarStop               = PC("k", Places.Velar, Manners.Stop, Props.None)
    let VdVelarStop               = PC("ɡ", Places.Velar, Manners.Stop, Props.Voiced)
    let VlUvularStop              = PC("q", Places.Uvular, Manners.Stop, Props.None)
    let VdUvularStop              = PC("ɢ", Places.Uvular, Manners.Stop, Props.Voiced)
    let VdEpiglottalStop          = PC("ʡ", Places.Pharyngeal, Manners.Stop, Props.None)
    let GlottalStop               = PC("ʔ", Places.Glottal, Manners.Stop, Props.None)
		
    // Sibilant Fricative										
    let VlAlveolarSibFricative       = PC("s", Places.Alveolar, Manners.SibilantFricative, Props.None)
    let VdAlveolarSibFricative       = PC("z", Places.Alveolar, Manners.SibilantFricative, Props.Voiced)
    let VlPostalveolarSibFricative   = PC("ʃ", Places.Postalveolar, Manners.SibilantFricative, Props.None)
    let VdPostalveolarSibFricative   = PC("ʒ", Places.Postalveolar, Manners.SibilantFricative, Props.Voiced)
    let VlRetroflexSibFricative      = PC("ʂ", Places.Retroflex, Manners.SibilantFricative, Props.None)
    let VdRetroflexSibFricative      = PC("ʐ", Places.Retroflex, Manners.SibilantFricative, Props.Voiced)
    let VlPalatalSibFricative        = PC("ɕ", Places.Palatal, Manners.SibilantFricative, Props.None)
    let VdPalatalSibFricative        = PC("ʑ", Places.Palatal, Manners.SibilantFricative, Props.Voiced)

    // Fricative										
    let VlBilabialFricative          = PC("ɸ", Places.Bilabial, Manners.Fricative, Props.None)
    let VdBilabialFricative          = PC("β", Places.Bilabial, Manners.Fricative, Props.Voiced)
    let VlLabiodentalFricative       = PC("f", Places.LabioDental, Manners.Fricative, Props.None)
    let VdLabiodentalFricative       = PC("v", Places.LabioDental, Manners.Fricative, Props.Voiced)
    let VlLinguoLabialFricative      = PC("θ̼", Places.LinguoLabial, Manners.Fricative, Props.None)
    let VdLinguoLabialFricative      = PC("ð̼", Places.LinguoLabial, Manners.Fricative, Props.Voiced)
    let VlDentalFricative            = PC("θ", Places.Dental, Manners.Fricative, Props.None)
    let VdDentalFricative            = PC("ð", Places.Dental, Manners.Fricative, Props.Voiced)
    let VlAlveolarFricative          = PC("θ̠", Places.Alveolar, Manners.Fricative, Props.None)
    let VdAlveolarFricative          = PC("ð̠", Places.Alveolar, Manners.Fricative, Props.Voiced)
    let VlPostaveolarFricative       = PC("ɹ̠̊", Places.Postalveolar, Manners.Fricative, Props.None)
    let VdPostalveolarFricative      = PC("ɹ̝̊", Places.Postalveolar, Manners.Fricative, Props.Voiced)
    let VdRetroflexFricative         = PC("ɻ˔", Places.Retroflex, Manners.Fricative, Props.Voiced)
    let VlPalatalFricative           = PC("ç", Places.Palatal, Manners.Fricative, Props.None)
    let VdPalatalFricative           = PC("ʝ", Places.Palatal, Manners.Fricative, Props.Voiced)
    let VlVelarFricative             = PC("x", Places.Velar, Manners.Fricative, Props.None)
    let VdVelarFricative             = PC("ɣ", Places.Velar, Manners.Fricative, Props.Voiced)
    let VlUvularFricative            = PC("χ", Places.Uvular, Manners.Fricative, Props.None)
    let VdUvularFricative            = PC("ʁ", Places.Uvular, Manners.Fricative, Props.Voiced)
    let VlPharyngealFricative        = PC("ħ", Places.Pharyngeal, Manners.Fricative, Props.None)
    let VdPharyngealFricative        = PC("ʕ", Places.Pharyngeal, Manners.Fricative, Props.Voiced)
    let VlGlottalFricative           = PC("h", Places.Glottal, Manners.Fricative, Props.None)
    let VlMultiplePlaceFricative     = PC("ɦ", Places.Glottal, Manners.Fricative, Props.Voiced)
														
    // Approximant										
    let VlLabioDentalApproximant     = PC("ʋ̥", Places.LabioDental, Manners.Approximant, Props.None)
    let VdLabioDentalApproximant     = PC("ʋ", Places.LabioDental, Manners.Approximant, Props.Voiced)
    let VlPostalveolarApproximant    = PC("ɹ̥", Places.Alveolar, Manners.Approximant, Props.None)
    let VdPostalveolarApproximant    = PC("ɹ", Places.Alveolar, Manners.Approximant, Props.Voiced)
    let VlRetroflexApproximant       = PC("ɻ̊", Places.Retroflex, Manners.Approximant, Props.None)
    let VdRetroflexApproximant       = PC("ɻ", Places.Retroflex, Manners.Approximant, Props.Voiced)
    let VlPalatalApproximant         = PC("j̊", Places.Palatal, Manners.Approximant, Props.None)
    let VdPalatalApproximant         = PC("j", Places.Palatal, Manners.Approximant, Props.Voiced)
    let VlVelarApproximant           = PC("ɰ̊", Places.Velar, Manners.Approximant, Props.None)
    let VdVelarApproximant           = PC("ɰ", Places.Velar, Manners.Approximant, Props.Voiced)
    let VdGlottalApproximant         = PC("ʔ̞", Places.Glottal, Manners.Approximant, Props.Voiced)
														
    // Tap or Flap										
    let VdBilabialDentalFlap         = PC("ⱱ̟", Places.Bilabial, Manners.TapFlap, Props.Voiced)
    let VdLabioDentalFlap            = PC("ⱱ", Places.LabioDental, Manners.TapFlap, Props.Voiced)
    let VdLingualLabialStop          = PC("ɾ̼", Places.LinguoLabial, Manners.TapFlap, Props.Voiced)
    let VlAlveolarFlap               = PC("ɾ̥", Places.Alveolar, Manners.TapFlap, Props.None)
    let VdAlveolarTap                = PC("ɾ", Places.Alveolar, Manners.TapFlap, Props.Voiced)
    let VlRetroflexFlap              = PC("ɽ̊", Places.Retroflex, Manners.TapFlap, Props.None)
    let VdRetroflexFlap              = PC("ɽ", Places.Retroflex, Manners.TapFlap, Props.Voiced)
    let VdUvularFlap                 = PC("ɢ̆", Places.Uvular, Manners.TapFlap, Props.Voiced)
    let VdPharyngealFlap             = PC("ʡ̆", Places.Pharyngeal, Manners.TapFlap, Props.Voiced)
														
    // Trill											
    let VlBilabialTrill              = PC("ʙ̥", Places.Bilabial, Manners.Trill, Props.None)
    let VdBilabialTrill              = PC("ʙ", Places.Bilabial, Manners.Trill, Props.Voiced)
    let VlAlveolarTrill              = PC("r̥", Places.Alveolar, Manners.Trill, Props.None)
    let VdAlveolarTrill              = PC("r", Places.Alveolar, Manners.Trill, Props.Voiced)
    let VlRetroflexTrill             = PC("ɽ̊r̥", Places.Retroflex, Manners.Trill, Props.None)
    let VdRetroflexTrill             = PC("ɽr", Places.Retroflex, Manners.Trill, Props.Voiced)
    let VlUvularTrill                = PC("ʀ", Places.Uvular, Manners.Trill, Props.None)
    let VdUvularTrill                = PC("ʀ", Places.Uvular, Manners.Trill, Props.Voiced)
    let VlPharyngealTrill            = PC("H", Places.Pharyngeal, Manners.Trill, Props.None)
    let VdPharyngealTrill            = PC("ʢ", Places.Pharyngeal, Manners.Trill, Props.Voiced)
														
    // Lateral Fricative								
    let VlAlveolarLateralFricative   = PC("ɬ", Places.Alveolar, Manners.LateralFricative, Props.None)
    let VdAlveolarLateralFricative   = PC("ɮ", Places.Alveolar, Manners.LateralFricative, Props.Voiced)
    let VlRetroflexLateralFricative  = PC("ɭ̊˔", Places.Retroflex, Manners.LateralFricative, Props.Extension)
    let VdRetroflexLateralFricative  = PC("ɭ˔", Places.Retroflex, Manners.LateralFricative, Props.Voiced)
    let VlAlveolarPalatalFricative   = PC("ʎ̝̊", Places.Palatal, Manners.LateralFricative, Props.None)
    let VdAlveolarPalatalFricative   = PC("ʎ̝", Places.Palatal, Manners.LateralFricative, Props.Voiced)
    let VlVelarPalatalFricative      = PC("ʟ̝̊", Places.Velar, Manners.LateralFricative, Props.None)
    let VdVelarPalatalFricative      = PC("ʟ̝", Places.Velar, Manners.LateralFricative, Props.Voiced)
														
    // LateralApproximant								
    let VlAlveolarLateralApproximant = PC("l̥", Places.Alveolar, Manners.LateralApproximant, Props.None)
    let VdAlveolarLateralApproximant = PC("l", Places.Alveolar, Manners.LateralApproximant, Props.Voiced)
    let VlRetroflexLateral           = PC("ɭ̊", Places.Retroflex, Manners.LateralApproximant, Props.None)
    let VdRetroflexLateral           = PC("ɭ", Places.Retroflex, Manners.LateralApproximant, Props.Voiced)
    let VlPalatalLateral             = PC("ʎ̥", Places.Palatal, Manners.LateralApproximant, Props.None)
    let VdPalatalLateral             = PC("ʎ", Places.Palatal, Manners.LateralApproximant, Props.Voiced)
    let VlVelarLateral               = PC("ʟ̥", Places.Velar, Manners.LateralApproximant, Props.None)
    let VdVelarLateral               = PC("ʟ", Places.Velar, Manners.LateralApproximant, Props.Voiced)
    let VdUvularLateral              = PC("ʟ̠", Places.Uvular, Manners.LateralApproximant, Props.Voiced)

    // Lateral tap/flap
    let VdAlveolarLateralFlap        = PC("ɺ", Places.Alveolar, Manners.LateralTapFlap, Props.Voiced)
    let VdRetroflexLateralFlap       = PC("ɭ̆", Places.Retroflex, Manners.LateralTapFlap, Props.Voiced | Props.Extension)
    let VdPalatalLateralFlap         = PC("ʎ̆", Places.Palatal, Manners.LateralTapFlap, Props.Voiced | Props.Extension)
    let VdVelarLateralTap            = PC("L̆", Places.Velar, Manners.LateralTapFlap, Props.Voiced | Props.Extension)

    //==================================
    // Non-Pulmonic Consonants
    //==================================

    // Stops
    let VlBilabialStopEjective    = NPEjective(VlBilabialStop, Manners.Stop)
    let VlAveolarStopEjective     = NPEjective(VlAlveolarStop, Manners.Stop)
    let VlRetroflexStopEjective   = NPEjective(VlRetroflexStop, Manners.Stop)
    let VlPalatalStopEjective     = NPEjective(VlPalatalStop, Manners.Stop)
    let VlVelarStopEjective       = NPEjective(VlVelarStop, Manners.Stop)
    let VlUvularStopEjective      = NPEjective(VlUvularStop, Manners.Stop)
    let VlEpiglottalStopEjective  = NPEjective(VdEpiglottalStop, Manners.Stop)

    // Fricatives
    let VlBilabialFricativeEjective     = NPEjective(VlBilabialFricative, Manners.Fricative)
    let VlLabiodentalFricativeEjective  = NPEjective(VlLabiodentalFricative, Manners.Fricative)
    let VlDentalFricativeEjective       = NPEjective(VlDentalFricative, Manners.Fricative)
    let VlAlveolarFricativeEjective     = NPEjective(VlAlveolarSibFricative, Manners.Fricative)
    let VlPostalveolarFricativeEjective = NPEjective(VlPostalveolarSibFricative, Manners.Fricative)
    let VlRetroflexFricativeEjective    = NPEjective(VlRetroflexSibFricative, Manners.Fricative)
    let VlPalatalFricativeEjective      = NPEjective(VlPalatalSibFricative, Manners.Fricative)
    let VlVelarFricativeEjective        = NPEjective(VlVelarFricative, Manners.Fricative)
    let VlUvularFricativeEjective       = NPEjective(VlUvularFricative, Manners.Fricative)

    // Lateral Fricatives
    let VlPostalveolarLatFricEjective = NPEjective(VlAlveolarLateralFricative, Manners.LateralFricative)


    // Clicks
    let VlBilabialTenuisClick        = NPC("ʘ", Places.Bilabial, Manners.Tenuis, Props.Click)
    let VdBilabialTenuisClick        = NPC("ʘ̬", Places.Bilabial, Manners.Tenuis, Props.Click | Props.Voiced)
    let VlDentalTenuisClick          = NPC("ǀ", Places.Dental, Manners.Tenuis, Props.Click)
    let VdDentalTenuisClick          = NPC("ǀ̬", Places.Dental, Manners.Tenuis, Props.Click | Props.Voiced)
    let VlAlveolarTenuisClick        = NPC("ǃ", Places.Alveolar, Manners.Tenuis, Props.Click)
    let VdAlveolarTenuisClick        = NPC("ǃ̬", Places.Alveolar, Manners.Tenuis, Props.Click | Props.Voiced)
    let VlPalatalTenuisClick         = NPC("ǂ", Places.Palatal, Manners.Tenuis, Props.Click)
    let VdPalatalTenuisClick         = NPC("ǂ̬", Places.Palatal, Manners.Tenuis, Props.Click | Props.Voiced)

    let VlBilabialNasalClick         = NPC("ʘ̃", Places.Bilabial, Manners.Nasal, Props.Click)
    let VlDentalNasalClick           = NPC("ǀ̃", Places.Dental, Manners.Nasal, Props.Click)
    let VlAlveolarNasalClick         = NPC("ǃ̃", Places.Alveolar, Manners.Nasal, Props.Click)
    let VlPalatalNasalClick          = NPC("ǂ̃", Places.Palatal, Manners.Nasal, Props.Click)

    let VlAlveolarTenuisLateralClick = NPC("ǁ", Places.Alveolar, Manners.TenuisLateral, Props.Click)
    let VdAlveolarTenuisLateralClick = NPC("ǁ̬", Places.Alveolar, Manners.TenuisLateral, Props.Click | Props.Voiced)

    let VlBilabialImplosiveClick     = NPC("ɓ̥", Places.Bilabial, Manners.Implosive, Props.Implosive | Props.Click)
    let VdBilabialImplosiveClick     = NPC("ɓ", Places.Bilabial, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlAlveolarImplosiveClick     = NPC("ɗ̥", Places.Alveolar, Manners.Implosive, Props.Implosive | Props.Click)
    let VdAlveolarImplosiveClick     = NPC("ɗ", Places.Alveolar, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlRetroflexImplosiveClick    = NPC("ᶑ̊", Places.Retroflex, Manners.Implosive, Props.Implosive | Props.Click)
    let VdRetroflexImplosiveClick    = NPC("ᶑ", Places.Retroflex, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlPalatalImplosiveClick      = NPC("ʄ̊", Places.Palatal, Manners.Implosive, Props.Implosive | Props.Click)
    let VdPalatalImplosiveClick      = NPC("ʄ", Places.Palatal, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlVelarImplosiveClick        = NPC("ɠ̊", Places.Velar, Manners.Implosive, Props.Implosive | Props.Click)
    let VdVelarImplosiveClick        = NPC("ɠ", Places.Velar, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)
    let VlUvularImplosiveClick       = NPC("ʛ̥", Places.Uvular, Manners.Implosive, Props.Implosive | Props.Click)
    let VdUvularImplosiveClick       = NPC("ʛ", Places.Uvular, Manners.Implosive, Props.Implosive | Props.Click | Props.Voiced)


    let VlLabialVelarFricative       = OT("ʍ", Places.LabialVelar, Manners.Fricative, Props.None)
    let VlAlveoloPalatalFricative1   = OT("ɕ", Places.AlveoloPalatal, Manners.Fricative, Props.None)
    let VlAlveoloPalatalFricative2   = OT("ʑ", Places.AlveoloPalatal, Manners.Fricative, Props.None)
    let VdLabialVelarApproximant     = OT("w", Places.LabialVelar, Manners.Approximant, Props.Voiced)
    let VlAlveolarLateralFlap        = OT("ɺ", Places.Alveolar, Manners.LateralTapFlap, Props.Voiced)
    let VdLabialPalatalApproximant   = OT("ɥ", Places.LabialPalatal, Manners.Approximant, Props.Voiced)

    let SimultaneousSx               = {Name: "Simultaneous {0} and {1}"(VlPostalveolarSibFricative.Text, VlVelarFricative.Text)} +
                                       OT("ɧ", Places.Postalveolar, Manners.SibilantFricative, Props.None)
    let VlEpiglottalFricative        = OT("ʜ", Places.Pharyngeal, Manners.Fricative, Props.None)
    let VdEpiglottalFricative        = OT("ʢ", Places.Pharyngeal, Manners.Fricative, Props.Voiced)
    let VlEpiglottalPlosive          = OT("ʡ", Places.Pharyngeal, Manners.Plosive, Props.None)
    let VlAffricates                 = {Name: "Affricates and double articulations"} +
                                       OT("k͡p", Places.Pharyngeal, Manners.Affricate, Props.None)


/*
    let VdPostalveolarAffricate      = OT("ʤ", Places.None, Manners.None, Props.None)
    let VlPostalveolarAffricate      = OT("ʧ", Places.None, Manners.None, None, "Postalveolar Affricate")
    let OpenBackUnrounded            = Set("ɑ", Places.None, Manners.None, Props.None)
    let RaisedOpenFrontUnrounded     = Set("æ", Places.None, Manners.None, Props.None)
    let OpenMidFrontUnrounded        = Set("ɛ", Places.None, Manners.None, Props.None)
    let CloseCentralUnrounded        = Set("ɨ", Places.None, Manners.None, Props.None)
    let LaxCloseFrontUnrounded       = Set("ɪ", Places.None, Manners.None, Props.None)
    let CloseBackUnrounded           = Set("ɯ", Places.None, Manners.None, Props.None)
    let OpenMidBackUnrounded         = Set("ʌ", Places.None, Manners.None, Props.None)
    let CloseMidBackUnrounded        = Set("ɤ", Places.None, Manners.None, Props.None)

    let OpenMidSchwa                 = Set("ɐ", Places.None, Manners.None, Props.None)
    let OpenBackRounded              = Set("ɒ", Places.None, Manners.None, Props.None)
    let OpenMidBackRounded           = Set("ɔ", Places.None, Manners.None, Props.None)
    let Schwa                        = Set("ə", Places.None, Manners.None, Props.None)
    let CloseMidSchwa                = Set("ɘ", Places.None, Manners.None, Props.None)
    let RhotacizedSchwa              = Set("ɚ", Places.None, Manners.None, Props.None)
    let OpenMidCentral               = Set("ɜ", Places.None, Manners.None, Props.None)
    let RhotacizedOpenMidCentral     = Set("ɝ", Places.None, Manners.None, Props.None)
    let OpenMidCentralRounded        = Set("ɞ", Places.None, Manners.None, Props.None)
    let VelarizedVdAlveolarLateral   = Set("ɫ", Places.None, Manners.None, Props.None)
    let FrontCloseMidRounded         = Set("ø", Places.None, Manners.None, Props.None)
    let RoundedSchwa                 = Set("ɵ", Places.None, Manners.None, Props.None)
    let FrontOpenMidRounded          = Set("œ", Places.None, Manners.None, Props.None)
    let FrontOpenRounded             = Set("ɶ", Places.None, Manners.None, Props.None)
    let CloseCentralRounded          = Set("ʉ", Places.None, Manners.None, Props.None)
    let LaxCloseBackRounded          = Set("ʊ", Places.None, Manners.None, Props.None)
    let LaxCloseFrontRounded         = Set("ʏ", Places.None, Manners.None, Props.None)
*/
  }
  let Downstep                     = '↓'
  let Upstep                       = '↑'
  let Becomes                      = '→'
  let Globalrise                   = '↗'
  let Globalfall                   = '↘'
  let ReadyMadeCombination         = '\u026B'
  let Breve                        = '\u02D8'
  let PrimaryStress                = '\u02C8'
  let SecondaryStress              = '\u02CC'
  let LengthMark                   = '\u02D0'
  let Halflength                   = '\u02D1'
  let EjectiveMark                 = '\u02BC'
  let Rhotacized                   = '\u02B4'
  let Aspirated                    = '\u02B0'
  let BreathyVoiceAspirated        = '\u02B1'
  let Palatalized                  = '\u02B2'
  let Labialized                   = '\u02B7'
  let Velarized                    = '\u02E0'
  let Pharyngealized               = '\u02E4'
  let RhoticHook                   = '\u02DE'
  let LowTone                      = '\u0300'
  let HighTone                     = '\u0301'
  let MidTone                      = '\u0304'
  let Extrashort                   = '\u0306'
  let ExtraHighTone                = '\u030B'
  let ExtraLowTone                 = '\u030F'
  let VoicelessDescender           = '\u030A'
  let BreathyVoiced                = '\u0324'
  let Voiceless                    = '\u0325'
  let Dental                       = '\u032A'
  let Voiced                       = '\u032C'
  let CreakyVoiced                 = '\u0330'
  let CombiningMacron              = '\u0331'
  let Apical                       = '\u033A'
  let LinguoLabial                 = '\u033C'
  let Laminal                      = '\u033B'
  let NotAudiblyReleased           = '\u031A'
  let MoreRounded                  = '\u0339'
  let Nasalized                    = '\u0303'
  let LessRounded                  = '\u031C'
  let Advanced                     = '\u031F'
  let Centralized                  = '\u0308'
  let VelarizedOrPharyngealized    = '\u0334'
  let Retracted                    = '\u0320'
  let MidCentralized               = '\u033D'
  let Raised                       = '\u031D'
  let Syllabic                     = '\u0329'
  let Lowered                      = '\u031E'
  let NonSyllabic                  = '\u032F'
  let AdvancedTongueRoot           = '\u0318'
  let RetractedTongueRoot          = '\u0319'
  let TieBarBelow                  = '\u035C'
  let TieBarAbove                  = '\u0361'

  let AllSounds = Alphabet + Impossible

  let TitleBar(name, columns) = Row {
    Cell {
      Padding: 2 pts,
      ParAlignment: ParAlignments.Center,
      Background: 40%,
      TextHeight: 16 pts,
      TextColor: Colors.White,
      ColumnSpan: columns,
      name
    }
  }

  let CellSize = Type.Size(20 pts, 20 pts)

  let SoundBox(r) = Canvas {
    HAlign: HAligns.Center,
    Size: CellSize,
    if r.Text then
      if r.Prop.HasFlag(Props.Extension) then
        Style.Extension
      end,
      Style.IPAFamily,
      TextHeight: CellSize.Height - 4 pts,
      r.Text
    else
      Style.ImpossibleBackground
    end
  }

  let ShowSound(r) = SoundBox(r) {
    X: (r.Prop.HasFlag(Props.Voiced) ? CellSize.Width : 0),
  }

  let SoundBlock(matches) = Cell {
    if matches.Length > 0 then
      if matches.Length == 2 and matches[0].Text == null and matches[1].Text == null then
        Style.ImpossibleBackground
      else
        TextHeight: 1 pts,
        Span {
          Canvas {
            Width: CellSize.Width * 2,
            Height: CellSize.Height,
            ShowSound(each matches)
          }
        }
      end
    end
  }

  let PulmonicCell(place, manner) = SoundBlock(AllSounds.FindSlice(EqualSound PC(null, place, manner, Props.None)))

  let PulmonicRow(manner) = Row {
    EdgeB: 0.5 pts,
    Cell {
      VAlign: VAligns.Center,
      EdgeR: 0.5 pts,
      Style.TitleBackground,
      PaddingLR: 2 pts,
      TextHeight: 7 pts,
      MannerNames[manner]
    },
    PulmonicCell(each PulmonicPlaces, manner)
  }

  let HeaderCell(d) = Cell {
    HAlign: HAligns.Center,
    VAlign: VAligns.Center,
    Style.SansSerif,
    Style.TitleBackground,
    EdgeB: 1 pts,
    PaddingTB: 2 pts,
    d
  }

  let PlaceHeader(place) = HeaderCell(PlaceNames[place])

  let PulmonicTable = Block {
    Table {
      Style.TableEdge,
      Columns: [(45 pts) {EdgeR: 0.5 pts}] + [CellSize.Width*2 {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * PulmonicPlaces.Length,

      TitleBar(Lang.PConsonants, PulmonicPlaces.Length+1),
      Row {
        TextHeight: 10 pts,
        HeaderCell(Span {Bold, Lang.Place, Space, Alphabet.Becomes}),
        HeaderCell(Lang.Labial) {ColumnSpan: 3},
        HeaderCell(Lang.Coronal) {ColumnSpan: 4},
        HeaderCell(Lang.Dorsal) {ColumnSpan: 3},
        HeaderCell(Lang.Laryngeal) {ColumnSpan: 2},
      },
      Row {
        TextHeight: 7 pts,
        HeaderCell(Span {Bold, Lang.Manner, Space, Alphabet.Downstep}),
        PlaceHeader(each PulmonicPlaces)
      },
      PulmonicRow(each PulmonicManners),
    },
    Paragraph {
      SpaceAfter: 16 pts,
      Lang.PulmonicSymbols(ToText(Alphabet.VlMultiplePlaceFricative)),
      Space,
      Span {Style.Extension Lang.Extensions}
    }
  }

  let ToText(c) = Span {
    (each c).Text
  }

  let NonPulmonicCell(place, manner, props) = SoundBlock(AllSounds.FindSlice(EqualSound NPC(null, place, manner, props)))

  let NPRow(name, namerow, props, manner) = Row {
    Cell {
      EdgeR: 0.5 pts,
      VAlign: VAligns.Center,
      if namerow == EachIndex then
        name
      end
    },
    Cell {
      VAlign: VAligns.Center,
      EdgeB: 0.5 pts,
      MannerNames[manner]
    },
    NonPulmonicCell(each NonPulmonicPlaces, manner, props)
  }

  let VarCell(text) = Cell {
    VAlign: VAligns.Center,
    text
  }

  let GetPropNames(props, prop) = {
    if props.HasFlag(prop) then
      PropNames[EachIndex]
    end
  }

  let AlphabetRow(c) = Row {
    Style.RowBar(EachIndex),
    Cell {
      TextHeight: 14 pts,
      HAlign: HAligns.Center,
      VAlign: VAligns.Center,
      ToText(c)
    },
    VarCell(CategoryNames[c.Category]),
    VarCell(PlaceNames[c.Place]),
    VarCell(MannerNames[c.Manner]),
    Cell {
      VAlign: VAligns.Center,
      Span {
        Separator: ", ",
        GetPropNames(c.Prop, each Props)
      }
    }
  }

  let NonPulmonicTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [
        (50 pts),
        (75 pts) {EdgeR: 0.5 pts}
      ] +
      [CellSize.Width*2 {HAlign: HAligns.Center, EdgeR: 0.25 pts}] * NonPulmonicPlaces.Length,

      TitleBar(Lang.NPConsonants, NonPulmonicPlaces.Length+2),
      Row {
        TextHeight: 7 pts,
        HeaderCell(Empty),
        HeaderCell(Span {Bold, Lang.Place, Space, Alphabet.Becomes}),
        PlaceHeader(each NonPulmonicPlaces)
      },
      NPRow("Ejective", 1, Props.Ejective, each [Manners.Stop, Manners.Fricative, Manners.LateralFricative]),
      NPRow("Click", 1, Props.Click, each [Manners.Tenuis, Manners.Nasal, Manners.TenuisLateral]),
      NPRow("Implosive", 0, Props.Implosive, each [Manners.Implosive]),
    },
    Paragraph {}
  }

  let OtherCell(r) = Row {
    Cell {
      Paragraph {
        Span{SoundBox(r), r.Name}
      }
    }
  }

  let OtherTable = Block {
    Table {
      HAlign: HAligns.Center,
      Style.TableEdge,
      Columns: [(4 inches) {EdgeR: 0.5 pts}],

      TitleBar("Other Symbols", 2),
      OtherCell(each Alphabet.FindSlice(EqualOther)),
    },
    Paragraph {}
  }

  let AlphabetTable = Table {
    Style.TableEdge,
    PaddingL: 2 pts,
    PaddingB: 2 pts,
    Columns: [(30 pts) Style.ColumnEdge, (65 pts) Style.ColumnEdge, (110 pts)Style.ColumnEdge],

    TitleBar(Lang.IPAListing, 5),
    Row {
      TextHeight: 12 pts,
      HeaderCell(Lang.Text),
      HeaderCell(Lang.Category) {HAlign: HAligns.Left},
      HeaderCell(Lang.Place) {HAlign: HAligns.Left},
      HeaderCell(Lang.Manner) {HAlign: HAligns.Left},
      HeaderCell(Lang.Property) {HAlign: HAligns.Left}
    },
    AlphabetRow(each Alphabet)
  }

  let ShowAlphabet = Block {
    PulmonicTable,
    NonPulmonicTable,
    OtherTable,
    AlphabetTable
  }
}
