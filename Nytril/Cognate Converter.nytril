using Format, IO, Math, DB;

include "../data/swadesh/wordtransform";


Main.Documents = [
  new DocumentViewClass("Test", ref Watch),
];

void WriteCategory(category, doc) {
  IO.Write(doc, Folders.Source Folder("Categories") FileName(category) Extensions.Nytril, FileFormats.Text);
}

void WriteCategories {
  var list       = new ListClass(3000);
  var categories = new DictionaryClass(300);
  Collect(list, categories);

  foreach (var word in categories.Values)
    WriteCategory(word.Category, word.Output(GetWordList(list, word.Category)));
}

Main.Run = WriteCategories;


class WordClass {
  var Language,
      Category,
      Word,
      Comment;

  Constructor(language, category, word, comment) {
    Language = language;
    Category = category;
    Word     = word;
    Comment  = comment;
  }

  CleanComment(comment) {
    return Substitute(comment, FindIndex(comment, c => c == "|"), "\"");
  }

  Output(words) = TextBlock {
    Paragraph {
      "with Categories.";
      Category;
      " {"
    };

    "  with AncestralClass {";

    foreach (var word in words) {
      if (valid word.Word) {
        Paragraph {
          "    ";
          word.Language;
          ".A";
          Space * (16 - word.Language.Length);
          " = \"";
          word.Word;
          "\";";

          if (valid word.Comment) {
            Space * (30 - word.Word.Length);
            "// ";
            CleanComment(word.Comment);
          }
        }
      }
    }

    "  }";
    "}";
    Empty;
  };
}


void Collect(list, categories) {
  foreach (var language in WordList) {
    foreach (var category in language) {
      var w = new WordClass(language.GlobalVariableName, category.GlobalVariableName, category.Word, category.?Comment);
      list.Add(w);
      categories.Add(w, w.Category);
    }
  }
}

FormatWord(word) = TextBlock {
  Span {
    word.Language;
    word.Category;
    word.Word;
  };
};


GetWordList(list, category) {
  return FindSlice(list, w => category == w.Category);
}

GetWords(list, categories) = TextBlock {
  foreach (var word in categories.Values) {
    TextBlock {
      "//" + "=" * 50;
      Empty;
      word.Output(GetWordList(list, word.Category));
      Empty;
    }
  }
};

Watch = Document {
  var list       = new ListClass(3000);
  var categories = new DictionaryClass(300);
  Collect(list, categories);
  GetWords(list.ToArray(), categories);
};
