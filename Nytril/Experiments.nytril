using Format, IO, Units;

//======================================================================

class RunClass {
  static BaseFileName = Folder("out");

  var             Name,
                  RootFolder,
                  RunFolder,
                  Generations,
                  Print,
                  Seed,
                  Tree,
                  Complete,
                  Marginal;
   ModeClass      Mode;

  Constructor(ModeClass mode, name, generations, print, marginal) {
    Name        = name;
    Mode        = mode;
    Generations = generations;
    Print       = print;
    Marginal    = marginal;
    RootFolder  = mode.RootFolder Folder(name);
    RunFolder   = RootFolder Folder("Execute");
    Seed        = Math.Random(0..0xFFFFFFFF);

    var treefile = RootFolder FileName("consensus.tre");
    Complete = FileExists(treefile);
    if (Complete)
      Tree = Read(treefile).trees.TREE1;
  }

  ArgString(arg, text) = Span {
    if (valid arg) {
      "-";
      arg;
      Space;
    }
    "\"";
    text;
    "\" ";
  };

  Pause(mac) = mac ? "hold" : "pause";

  RunReader(mac) = TextBlock {
    Span {
      ArgString(null, mac ? Info.MacReaderEXE : Info.ReaderEXE);
      ArgString("i", RunFolder);
      ArgString("o", RunFolder BaseFileName);
    };
    Pause(mac);
  };

  RunAll(mac) = TextBlock {
    Span {
      ArgString(null, mac ? Info.MacMCMCEXE : Info.MCMCEXE);
      ArgString("d", Info.ConfigFile);
      ArgString("o", RunFolder BaseFileName);
    };
    Pause(mac);
    RunReader(mac);
  };

  void WriteRuns(mac, ext) {
    Write(RunReader(mac), RootFolder FileName("RunReader") ext);
    Write(RunAll(mac), RootFolder FileName("RunAll") ext);
  }

  void InitFolders(ExperimentClass experiment) {
    CreateFolder(RootFolder);
    CreateFolder(RunFolder);
    WriteRuns(false, Extensions.Batch);
    WriteRuns(true, Extensions.Text);

    Write(new ConfigFileClass(experiment, this).Show, RootFolder Info.ConfigFile);
  }
}

//======================================================================

class ModeClass {
  var              Name,
                   RootFolder;
  ModelFolderClass Model;
  RunClass[]       Run;

  Constructor(ModelFolderClass model, name, generations, print, marginal) {
    Name       = name;
    Model      = model;
    RootFolder = model.RootFolder Folder(name);
    Run        = new RunClass(this, each ["Run1", "Run2"], generations, print, marginal);
  }

  void InitFolders(ExperimentClass experiment) {
    CreateFolder(RootFolder);
    (each Run).InitFolders(experiment);
  }
}

//======================================================================

class ModelFolderClass {
  var       Name,
            RootFolder;
  ModeClass Posterior,
            Marginal;

  Constructor(ExperimentClass experiment, name) {
    Name       = name;
    RootFolder = experiment.RootFolder Folder(name);
    Posterior  = new ModeClass(this, "Posterior", 1_000_000, 1000, false);
    Marginal   = new ModeClass(this, "Marginal", 50_000, 100, true);
  }

  void InitFolders(ExperimentClass experiment) {
    CreateFolder(RootFolder);
    Posterior.InitFolders(experiment);
    Marginal.InitFolders(experiment);
  }
}

//======================================================================

class ExperimentClass: FactClass {
  field              Name,
                     FolderName;
  DataSetClass       Data;
  RuleClass          Rule;
  ModelFolderClass   JC69,
                     GTR,
                     Custom;
  ModelFolderClass[] Models;
  var                RootFolder;

  Constructor(id, name, folder, DataSetClass data, RuleClass rule) {
    super.Constructor(id);
    Data        = data;
    Rule        = rule;
    Name        = name;
    FolderName  = folder;
    RootFolder  = Info.ExperimentBase Folder(folder);
    Custom      = new ModelFolderClass(this, "Custom");
    JC69        = new ModelFolderClass(this, "JC69");
    GTR         = new ModelFolderClass(this, "GTR");

    Models = [
      Custom,
      JC69,
      GTR,
    ];
  }

  void InitFolders {
//    if (not FolderExists(RootFolder)) {
      CreateFolder(RootFolder);
      (each Models).InitFolders(this);
//    }
  }

  static ShowComparison = Block {
    Style.ShowTree(Lang.ConsensusTree, null, Info.ConsensusTree);
    Style.ShowTree("Prior", null, Info.PriorTree);
    Style.ShowTree("Commonly Accepted Romance Tree", null, LanguageBranches.Romance, Lang.Years);
  };

  static void CreateFolders {
    (each Info.Experiments).InitFolders;
    OpenExplorer(Info.Experiments[0].RootFolder);
  }
}
//======================================================================


