using Format, IO, Units, Languages;

//======================================================================

class LangNodeClass: NodeClass {
  var Probability;

  Constructor {
    super.Constructor;
  }

  override void ResolveData {
    if (valid Name) {
      var f = Languages.FindFirst(l => l.Name == Name);
      if (valid f)
        Label = f;
    }
    if (valid Probability and HasChildren) {
      Label = Span {
        TextColor: Colors.LightGray;
        TextHeight: 8 pts;
        TextDigits: 0;
        Probability * 100.0;
      };
    }
  }
}

//======================================================================

class RunExperimentClass {
  var        Name,
             RootFolder,
             Generations,
             PreBurn,
             Print,
             Seed,
             Tree,
             Complete,
             Marginal,
             Alignments;
   ModeClass Mode;

  Constructor(ModeClass mode, index, generations, preburn, print, marginal) {
    Name        = "Run" + index;
    Mode        = mode;
    Generations = generations;
    PreBurn     = preburn;
    Print       = print;
    Marginal    = marginal;
    RootFolder  = mode.RootFolder Folder(Name);
    Seed        = Math.Random(0..0xFFFFFFFF);

    var treefile = Info.ExperimentRoot RootFolder Info.TreeFile;
    Complete = FileExists(treefile);
    if (Complete)
      Tree = Read(treefile, FileFormats.Tree, LangNodeClass).Tree;

    Alignments = Info.ExperimentRoot RootFolder Info.ExecuteFolder FileName("Alignments") Extensions.Nytril;
  }

  ArgString(arg, text) = Span {
    var path = String(text);
    if (valid arg) {
      "-";
      arg;
      Space;
    }
    var quote = path.FindFirstIndex(c => c == ' ') >= 0;
    if (quote)
      Quote;
    path;
    if (quote)
      Quote;
  };

  Pause(mac) = mac ? "read -rsp $'Press enter to continue...\\n'" : "pause";

  ArgSpan = Span {
    Separator: Space;
  };

  RunReader(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacReaderEXE : Info.ReaderEXE);
      ArgString("i", root Info.ExecuteFolder);
      ArgString("b", PreBurn);
      ArgString("o", root Info.OutFileName);
    };
    Pause(mac);
  };

  RunAll(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacMCMCEXE : Info.MCMCEXE);
      ArgString("d", Info.ConfigFile);
      ArgString("o", root Info.OutFileName);
    };
    RunReader(mac, root);
  };

  void WriteRuns(path, mac, root, reader, all) {
    Write(RunReader(mac, root), path FileName(reader), FileFormats.UTF8);
    Write(RunAll(mac, root), path FileName(all), FileFormats.UTF8);

//    var tree = root Info.TreeFile;
//    if (not FileExists(tree))
//      IO.Write("Blank;", tree);
  }

  void InitFolders(DataSetClass data) {
    var path = Info.ExperimentRoot RootFolder;

    CreateFolder(path);
    CreateFolder(path Info.ExecuteFolder);
    WriteRuns(path, false, path, "WinRunReader.bat", "WinRunAll.bat");
    WriteRuns(path, true, Empty, "MacRunReader.sh", "MacRunAll.sh");

    Write(new ConfigFileClass(data, this).Show, path Info.ConfigFile);
  }
}

//======================================================================

class ModeClass {
  var                  Name,
                       RootFolder;
  ModelFolderClass     Model;
  RunExperimentClass[] Run;

  Constructor(ModelFolderClass model, name, generations, preburn, print, marginal) {
    Name       = model.Name + "-" + name;
    Model      = model;
    RootFolder = model.RootFolder Folder(name);
    Run        = new RunExperimentClass(this, each 1..3, generations, preburn, print, marginal);
  }

  void InitFolders(DataSetClass data) {
    CreateFolder(Info.ExperimentRoot RootFolder);
    (each Run).InitFolders(data);
  }
}

//======================================================================

class ModelFolderClass {
  var       Name,
            Model,
            RootFolder;
  ModeClass Posterior,
            Marginal;

  Constructor(DataSetClass data, model, name=null) {
    Name       = name ?? model;
    Model      = model;
    RootFolder = Folder(data.FolderName) Folder(model);
    Posterior  = new ModeClass(this, "Posterior", Info.Generations, 0, Info.PreBurn, false);
    Marginal   = new ModeClass(this, "Marginal", 50_000, 0, 100, true);
  }

  void InitFolders(DataSetClass data) {
    CreateFolder(Info.ExperimentRoot RootFolder);
    Posterior.InitFolders(data);
    Marginal.InitFolders(data);
  }
}

//======================================================================

class NLeaf: NodeClass {
  Constructor(DataSetClass data, LanguageClass language, branch) {
    super.Constructor("{0} ({1})"(language, data.LangNumber(language)));
    BranchLength = branch;
  }
}

class NBranch: NodeClass {
  Constructor(name, branch=1) {
    super.Constructor(name);
    BranchLength = branch;
  }
}

//======================================================================


