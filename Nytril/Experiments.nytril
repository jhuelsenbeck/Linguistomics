using Format, IO, Units, Languages;

//======================================================================

class RunExperimentClass {
  static OutFileName = Info.ExecuteFolder Folder("out");

  var        Name,
             RootFolder,
             Generations,
             PreBurn,
             Print,
             Seed,
             Tree,
             Complete,
             Marginal;
   ModeClass Mode;

  Constructor(ModeClass mode, name, generations, preburn, print, marginal) {
    Name        = name;
    Mode        = mode;
    Generations = generations;
    PreBurn     = preburn;
    Print       = print;
    Marginal    = marginal;
    RootFolder  = mode.RootFolder Folder(name);
    Seed        = Math.Random(0..0xFFFFFFFF);

    var treefile = Info.ExperimentRoot RootFolder Info.ExecuteFolder FileName("consensus.tre");
    Complete = FileExists(treefile);
    if (Complete)
      Tree = Read(treefile).Tree;
  }

  ArgString(arg, text) = Span {
    var path = String(text);
    if (valid arg) {
      "-";
      arg;
      Space;
    }
    var quote = path.FindFirstIndex(c => c == ' ') >= 0;
    if (quote)
      Quote;
    path;
    if (quote)
      Quote;
  };

  Pause(mac) = mac ? "read -rsp $'Press enter to continue...\\n'" : "pause";

  ArgSpan = Span {
    Separator: Space;
  };

  RunReader(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacReaderEXE : Info.ReaderEXE);
      ArgString("i", root Info.ExecuteFolder);
      ArgString("b", 15000);
      ArgString("o", root OutFileName);
    };
    Pause(mac);
  };

  RunAll(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacMCMCEXE : Info.MCMCEXE);
      ArgString("d", Info.ConfigFile);
      ArgString("o", root OutFileName);
    };
    RunReader(mac, root);
  };

  void WriteRuns(path, mac, root, reader, all) {
    Write(RunReader(mac, root), path FileName(reader), FileFormats.UTF8);
    Write(RunAll(mac, root), path FileName(all), FileFormats.UTF8);
    IO.Write("Blank;", root Info.ExecuteFolder FileName("consensus.tre"));
  }

  void InitFolders(ExperimentClass experiment) {
    var path = Info.ExperimentRoot RootFolder;

    CreateFolder(path);
    CreateFolder(path Info.ExecuteFolder);
    WriteRuns(path, false, path, "WinRunReader.bat", "WinRunAll.bat");
    WriteRuns(path, true, Empty, "MacRunReader.sh", "MacRunAll.sh");

    Write(new ConfigFileClass(experiment, this).Show, path Info.ConfigFile);
  }
}

//======================================================================

class ModeClass {
  var                  Name,
                       RootFolder;
  ModelFolderClass     Model;
  RunExperimentClass[] Run;

  Constructor(ModelFolderClass model, name, generations, preburn, print, marginal) {
    Name       = model.Name + "-" + name;
    Model      = model;
    RootFolder = model.RootFolder Folder(name);
    Run        = new RunExperimentClass(this, each ["Run1", "Run2", "Run3"], generations, preburn, print, marginal);
  }

  void InitFolders(ExperimentClass experiment) {
    CreateFolder(Info.ExperimentRoot RootFolder);
    (each Run).InitFolders(experiment);
  }
}

//======================================================================

class ModelFolderClass {
  var       Name,
            Model,
            RootFolder;
  ModeClass Posterior,
            Marginal;

  Constructor(ExperimentClass experiment, model, name=null) {
    Name       = name ?? model;
    Model      = model;
    RootFolder = Folder(experiment.ShortName) Folder(model);
    Posterior  = new ModeClass(this, "Posterior", 5_000_000, 20_000, 1000, false);
    Marginal   = new ModeClass(this, "Marginal", 50_000, 5000, 100, true);
  }

  void InitFolders(ExperimentClass experiment) {
    CreateFolder(Info.ExperimentRoot RootFolder);
    Posterior.InitFolders(experiment);
    Marginal.InitFolders(experiment);
  }
}

//======================================================================

class NLeaf: NodeClass {
  Constructor(DataSetClass data, LanguageClass language, branch) {
    super.Constructor("{0} ({1})"(language, data.LangNumber(language)));
    BranchLength = branch;
  }
}

class NBranch: NodeClass {
  Constructor(name, branch=1) {
    super.Constructor(name);
    BranchLength = branch;
  }
}

//======================================================================

class ExperimentClass: FactClass {
  field               Name;
  RuleClass           Rule;
  DataSetClass        Data;
  ModelFolderClass    Custom,
                      JC69,
                      GTR;
  ModelFolderClass[]  Models;
  RunExperimentClass  MainRun;
  var                 RootFolder,
                      MacFolder,
                      ShortName;

  Constructor(DataSetClass data, id, shortname, name, includewords, LanguageClass[] languages, cutoff) {
    super.Constructor(id);

    Name       = name;
    ShortName  = shortname;
    RootFolder = Info.ExperimentRoot Folder(shortname);

    if (invalid data) {
      var concepts = IO.ReadScript(RootFolder Info.WordFile).Concepts;
      data = new DataSetClass(concepts, includewords, languages, cutoff);
    }

    Data   = data;
    Rule   = new NaturalPartitionClass(data);
    Custom = new ModelFolderClass(this, "Custom", Rule.Name);
    JC69   = new ModelFolderClass(this, "JC69");
    GTR    = new ModelFolderClass(this, "GTR");
    Models = [
      Custom,
      JC69,
      GTR,
    ];

    MainRun = Custom.Posterior.Run[0];
  }

  NodeClass GetPriorTree(portuguese) = new Branch {
    new Leaf(Latin);
    new Branch {
      new Leaf(Italian);
      new Branch {
        new Branch {
          new Leaf(Spanish);
          portuguese;
        };
        new Branch {
          new Branch {
            new Leaf(Friulian);
            new Branch {
              new Leaf(Catalan);
              new Branch {
                new Leaf(French);
                new Leaf(Walloon);
              };
            }
          };
          new Leaf(Romanian);
        };
      }
    }
  };

  virtual NodeClass PriorTree = GetPriorTree(new Leaf(Portuguese));

  virtual NodeClass NumberedTree = GetNumberedTree(new NLeaf(Data, Portuguese, 2));

  ShowTrees(ModelFolderClass folder) = Block {
    var any = false;
    foreach (var r in folder.Posterior.Run) {
      if (valid r.Tree) {
        any = true;
        break;
      }
    }

    if (any) {
      Style.Header1 {
        Lang.Model;
        ColonSpace;
        folder.Name;
      };

      foreach (var r in folder.Posterior.Run) {
        if (valid r.Tree)
          Style.ShowTree("Run {0}"(each1), null, r.Tree, null);
      }
    }
  };


  ShowExperiment = Block {
    Style.Header1 {
      Lang.Experiment;
      Space;
      each1;
      Space;
      Style.DQuote {Name};
    };

    Style.ShowTree("Prior", null, PriorTree, null);
    ShowTrees(Custom);
    ShowTrees(JC69);
    ShowTrees(GTR);
  };

  NodeClass GetNumberedTree(portuguese) = new NBranch(19) {
    new NLeaf(Data, Latin, 7);
    new NBranch(18) {
      new NLeaf(Data, Romanian, 6);
      new NBranch(17) {
        new NBranch(16) {
          new NBranch(15) {
            new NLeaf(Data, Walloon, 3);
            new NLeaf(Data, French, 3);
          };
          new NBranch(14) {
            new NBranch(13) {
              portuguese;
              new NLeaf(Data, Spanish, 2);
            };
            new NLeaf(Data, Catalan, 3);
          }
        };
        new NBranch(11) {
          new NLeaf(Data, Friulian, 4);
          new NLeaf(Data, Italian, 4);
        };
      }
    }
  };

  override IconClass GetIcon = Icons.science;

  CalculateLoad(SegmentClass[] segments, sum) {
    return sum;
  }

  ShowFunctionalLoad = Block {
    Style.Header1 {
      "Functional Load of \"{0}\" model"(Rule.Name);
    };

    Table {
      Columns: [1.5 inch, 1 inch {HAlign: HAligns.Right}];
      Row {
        Lang.Partition;
        Lang.FrequencyPercent;
        Lang.FunctionalLoad;
      };

      foreach (var part in Rule.Partitions) {
        var sum = 0;//Math.Sum((each part.Segments).UsedFrequency);
        Row {
          part.Name;
          Cell {
            TextDigits: 2;
            sum;
          };
          Cell {
            TextDigits: 2;
            CalculateLoad(part.Segments, sum);
          }
        };
      }
    }
  };

}
//======================================================================


