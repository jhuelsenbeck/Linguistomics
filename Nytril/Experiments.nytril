using Format, IO, Units, Languages;

//======================================================================

class LangNodeClass: NodeClass {
  var Probability;

  Constructor {
    super.Constructor;
  }

  override void ResolveData {
    if (Name is valid) {
      var f = WorldLanguageList.FindFirst(l => l.Name == Name);
      if (f is valid)
        Label = f;
    }
    if (Probability is valid and HasChildren) {
      Label = Span {
        TextColor: Colors.LightGray;
        TextHeight: 8 pts;
        TextDigits: 0;
        Probability * 100.0;
      };
    }
  }
}

//======================================================================

class RunExperimentClass {
  var ModelClass Model;
  var            Name,
                 RootFolder,
                 Config,
                 Print,
                 Seed,
                 Marginal,
                 AlignmentFile,
                 ResultTree;

  Constructor(config, ModelClass model, index, print, marginal) {
    Name          = "Run" + index;
    Model         = model;
    Print         = print;
    Marginal      = marginal;
    RootFolder    = model.RootFolder Folder(Name);
    Seed          = Math.Random(0..0xFFFFFFFF);
    AlignmentFile = Info.ExperimentRoot RootFolder Info.AlignmentFile;
    Config        = config ?? IO.ReadScript(Info.ExperimentRoot RootFolder Info.ParametersFile).Root;
  }

  ArgString(arg, string path) = Span {
    if (arg is valid) {
      "-";
      arg;
      Space;
    }
    var quote = path.FindFirstIndex(c => c == ' ') >= 0;
    if (quote)
      Quote;
    path;
    if (quote)
      Quote;
  };

  Pause(mac) = mac ? "read -rsp $'Press enter to continue...\\n'" : "pause";

  ArgSpan = Span {
    Separator: Space;
  };

  RunReader(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacReaderEXE : Info.ReaderEXE);
      ArgString("i", root Info.ExecuteFolder);
      ArgString("b", Config.PreBurn);
      ArgString("o", root Info.OutFileName);
    };
    Pause(mac);
  };

  RunAll(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacMCMCEXE : Info.MCMCEXE);
      ArgString("d", Info.ConfigFile);
      ArgString("o", root Info.OutFileName);
    };
    RunReader(mac, root);
  };

  GetParameters = TextBlock {
    "Generations = {0};"(Config.Generations);
    "PreBurn     = {0};"(Config.PreBurn);
  };

  void WriteRuns(path, mac, root, reader, all) {
    Write(RunReader(mac, root), path FileName(reader), FileFormats.UTF8);
    Write(RunAll(mac, root), path FileName(all), FileFormats.UTF8);
    Write(GetParameters, path Info.ParametersFile);
  }

  void InitFolders(DataSetClass data, NodeClass tree) {
    var path = Info.ExperimentRoot RootFolder;

    CreateFolder(path);
    CreateFolder(path Info.ExecuteFolder);
    WriteRuns(path, false, path, "WinRunReader.bat", "WinRunAll.bat");
    WriteRuns(path, true, Empty, "MacRunReader.sh", "MacRunAll.sh");

    Write(new ConfigFileClass(data, this, tree).Show, path Info.ConfigFile);
  }
}

//======================================================================

class ModelClass {
  var string               Name;
  var                      RootFolder;
  var TreeSetClass         TreeSet;
  var RunExperimentClass[] Run;

  Constructor(config, TreeSetClass treeset, string name) {
    Name       = name;
    TreeSet    = treeset;
    RootFolder = treeset.RootFolder Folder(name);
    Run        = new RunExperimentClass(config, this, each Info.Runs, 1000, false);
  }

  void InitFolders(DataSetClass data) {
    CreateFolder(Info.ExperimentRoot RootFolder);
    foreach (var r in Run)
      r.InitFolders(data, TreeSet.Tree);
  }
}

//======================================================================

class TreeSetClass {
  var NodeClass    Tree;
  var ModelClass[] Models;
  var              Name,
                   RootFolder;

  Constructor(config, name, root, NodeClass tree) {
    Name       = name;
    Tree       = tree;
    RootFolder = Folder(root) Folder(name);

    Models = [
      new(config, this, "Custom"),
      new(config, this, "JC69"),
      new(config, this, "GTR")
   ];
  }

  void InitFolders(DataSetClass data) {
    foreach (var m in Models)
      m.InitFolders(data);
  }
}

//======================================================================

class NLeaf: NodeClass {
  Constructor(LanguageClass language, branch) {
    super.Constructor("{0} ({1})"(language, WorldLanguageList.FindElementIndex(language)+1));
    BranchLength = branch;
  }
}

class NBranch: NodeClass {
  Constructor(name, branch=1) {
    super.Constructor(name);
    BranchLength = branch;
  }
}

//======================================================================


