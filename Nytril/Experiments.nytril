using Format, IO, Units, Languages;

//======================================================================

class RunClass {
  static OutFileName = Info.ExecuteFolder Folder("out");

  var        Name,
             RootFolder,
             Generations,
             PreBurn,
             Print,
             Seed,
             Tree,
             Complete,
             Marginal;
   ModeClass Mode;

  Constructor(ModeClass mode, name, generations, preburn, print, marginal) {
    Name        = name;
    Mode        = mode;
    Generations = generations;
    PreBurn     = preburn;
    Print       = print;
    Marginal    = marginal;
    RootFolder  = mode.RootFolder Folder(name);
    Seed        = Math.Random(0..0xFFFFFFFF);

    var treefile = Folders.Repository RootFolder Info.ExecuteFolder FileName("consensus.tre");
    Complete = FileExists(treefile);
    if (Complete)
      Tree = Read(treefile).trees.TREE1;
  }

  ArgString(arg, text) = Span {
    var path = String(text);
    if (valid arg) {
      "-";
      arg;
      Space;
    }
    var quote = path.FindFirstIndex(c => c == ' ') >= 0;
    if (quote)
      Quote;
    path;
    if (quote)
      Quote;
  };

  Pause(mac) = mac ? "read -rsp $'Press enter to continue...\\n'" : "pause";

  ArgSpan = Span {
    Separator: Space;
  };

  RunMCMC(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacMCMCEXE : Info.MCMCEXE);
      ArgString("d", Info.ConfigFile);
      ArgString("o", root OutFileName);
    };
    Pause(mac);
  };

  RunReader(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacReaderEXE : Info.ReaderEXE);
      ArgString("i", root Info.ExecuteFolder);
      ArgString("o", root OutFileName);
    };
    Pause(mac);
  };

  RunAll(mac, root) = TextBlock {
    RunMCMC(mac, root);
    RunReader(mac, root);
  };

  void WriteRuns(path, mac, root, reader, all) {
    Write(RunReader(mac, root), path FileName(reader), FileFormats.ANSI);
    Write(RunAll(mac, root), path FileName(all), FileFormats.ANSI);
  }

  void InitFolders(ExperimentClass experiment) {
    var path = Folders.Repository RootFolder;

    CreateFolder(path);
    CreateFolder(path Info.ExecuteFolder);
    WriteRuns(path, false, path, "WinRunReader.bat", "WinRunAll.bat");
    WriteRuns(path, true, Empty, "MacRunReader.sh", "MacRunAll.sh");

    Write(new ConfigFileClass(experiment, this).Show, path Info.ConfigFile);
  }
}

//======================================================================

class ModeClass {
  var              Name,
                   RootFolder;
  ModelFolderClass Model;
  RunClass[]       Run;

  Constructor(ModelFolderClass model, name, generations, preburn, print, marginal) {
    Name       = name;
    Model      = model;
    RootFolder = model.RootFolder Folder(name);
    Run        = new RunClass(this, each ["Run1", "Run2"], generations, preburn, print, marginal);
  }

  void InitFolders(ExperimentClass experiment) {
    CreateFolder(Folders.Repository RootFolder);
    (each Run).InitFolders(experiment);
  }
}

//======================================================================

class ModelFolderClass {
  var       Name,
            RootFolder;
  ModeClass Posterior,
            Marginal;

  Constructor(ExperimentClass experiment, name) {
    Name       = name;
    RootFolder = experiment.RootFolder Folder(name);
    Posterior  = new ModeClass(this, "Posterior", 1_000_000, 20_000, 1000, false);
    Marginal   = new ModeClass(this, "Marginal", 50_000, 5000, 100, true);
  }

  void InitFolders(ExperimentClass experiment) {
    CreateFolder(Folders.Repository RootFolder);
    Posterior.InitFolders(experiment);
    Marginal.InitFolders(experiment);
  }
}

//======================================================================

abstract class ExperimentClass: FactClass {
  field               Name,
                      FolderName;
  RuleClass           Rule;
  DataSetClass        Data;
  ModelFolderClass    JC69,
                      GTR,
                      Custom;
  ModelFolderClass[]  Models;
  LanguageClass[]     LanguageList;
  ExampleConceptClass ExampleConcept;
  CalcRatesClass      CalcStatic,
                      CalcExperiment;
  var                 RootFolder,
                      MacFolder;

  Constructor(id, name, folder, RuleClass rule) {
    super.Constructor(id);
    Rule           = rule;
    Data           = rule.Data;
    Name           = name;
    FolderName     = folder;
    RootFolder     = Folder("Experiments") Folder(folder);
    ExampleConcept = new ExampleConceptClass(Data, Trial.ExampleConcept);
    CalcStatic     = new CalcRatesClass(Data, Rule);
    CalcExperiment = new CalcRatesClass(Data, Rule, new TransitionClass(Data, Rule, true));
    Custom         = new ModelFolderClass(this, "Custom");
    JC69           = new ModelFolderClass(this, "JC69");
    GTR            = new ModelFolderClass(this, "GTR");
    Models = [
      Custom,
      JC69,
      GTR,
    ];
  }

  abstract NumberedTree;
  abstract PriorTree;

  void InitFolders {
    if (not FolderExists(RootFolder)) {
      CreateFolder(Folders.Repository RootFolder);
      (each Models).InitFolders(this);
    }
  }

  MainRun = Custom.Posterior.Run[0];

  GetDocuments = [
    new SubmissionViewClass(this),
    new PaperViewClass(this),
    new ExperimentViewClass(this),
    new DiagnosticsViewClass(this),
    new SourceViewClass(this),
    new DavidPresentationClass(this),
//    new JohnPresentationClass(this),
  ];

  ShowExperiment = Block {
    Style.Header1 {
      "Experiment ";
      EachOne;
      Space;
      Style.DQuote {Name};
    };
    Style.ShowTree(Lang.ConsensusTree, null, MainRun.Tree);
    Style.ShowTree("Prior", null, PriorTree);
  };

  LangNumber(LanguageClass language) = LanguageList.FindFirstIndex(language)+1;

  NLeaf(LanguageClass language, length) = new NodeClass("{0} ({1})"(language, LangNumber(language))) {
    BranchLength: length
  };

  NBranch(name, length) = new NodeClass(name) {
    BranchLength: length
  };

  GetNumberedTree(portuguese) = NBranch(19, 1) {
    NLeaf(Latin, 7);
    NBranch(18, 1) {
      NLeaf(Romanian, 6);
      NBranch(17, 1) {
        NBranch(16, 1) {
          NBranch(15, 1) {
            NLeaf(Walloon, 3);
            NLeaf(French, 3);
          };
          NBranch(14, 1) {
            NBranch(13, 1) {
              portuguese;
              NLeaf(Spanish, 2);
            };
            NLeaf(Catalan, 3);
          }
        };
        NBranch(11, 1) {
          NLeaf(Friulian, 4);
          NLeaf(Italian, 4);
        }
      }
    }
  };
}
//======================================================================


