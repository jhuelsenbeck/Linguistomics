using Format, IO, Units, Languages;

//======================================================================

class LangNodeClass: NodeClass {
  var Probability;

  Constructor {
    super.Constructor;
  }

  override void ResolveData {
    if (Name is valid) {
      var f = WorldLanguageList.FindFirst(l => l.Name == Name);
      if (f is valid)
        Label = f;
    }
    if (Probability is valid and HasChildren) {
      Label = Span {
        TextColor: Colors.LightGray;
        TextHeight: 8 pts;
        TextDigits: 0;
        Probability * 100.0;
      };
    }
  }
}

//======================================================================

class RunExperimentClass {
  var ModelClass         Model;
  var AlignIndexClass[]  Alignments;
  var StatMatrix         TransitionStats;
  var StatMatrix         NCQRates;
  var StatArray          NCQFreqs;
  var AlignedCountClass  QRates,
                         AverageRates;
  var double             InsertionRate,
                         InsertionRateLow,
                         InsertionRateHigh,
                         DeletionRate,
                         DeletionRateLow,
                         DeletionRateHigh;
  var                    Name,
                         RootFolder,
                         Config,
                         Print,
                         Seed,
                         ResultTree,
                         Complete,
                         Marginal,
                         AlignmentFile,
                         GapSpectrum,
                         EquilibriumFrequencies;


  Constructor(config, ModelClass model, index, print, marginal) {
    Name        = "Run" + index;
    Model       = model;
    Print       = print;
    Marginal    = marginal;
    RootFolder  = model.RootFolder Folder(Name);
    Seed        = Math.Random(0..0xFFFFFFFF);

    var treefile = Info.ExperimentRoot RootFolder Info.TreeFile;
    Complete = FileExists(treefile);
    if (Complete)
      ResultTree = IO.ReadTree(treefile, attribute LangNodeClass);

    AlignmentFile = Info.ExperimentRoot RootFolder Info.AlignmentFile;
    Config        = config ?? IO.ReadScript(Info.ExperimentRoot RootFolder Info.ParametersFile).Root;
  }

  static int CompareAlignment(AlignIndexClass a0, AlignIndexClass a1) {
    var c = a0.Alignments.Length.Compare(a1.Alignments.Length);
    if (c == 0)
      return a0.ConceptName.Compare(a1.ConceptName);
    return c;
  }

  void ReadAlignments(DataSetClass data) {
    var align = IO.ReadScript(AlignmentFile).Root;

    QRates                 = new(data, align.QRates, false);
    AverageRates           = new(data, align.AverageRates, true);
    NCQFreqs               = align.NCQFreqs as StatArray;
    EquilibriumFrequencies = align.EquilibriumFrequencies;
    InsertionRate          = align.InsertionRateMean;
    InsertionRateLow       = align.InsertionRateLow;
    InsertionRateHigh      = align.InsertionRateHigh;
    DeletionRate           = align.DeletionRateMean;
    DeletionRateLow        = align.DeletionRateLow;
    DeletionRateHigh       = align.DeletionRateHigh;
    GapSpectrum            = align.GapSpectrum;

    var ts = align?.TransitionStats;
    if (ts is not null)
      TransitionStats = StatMatrix.Convert(ts);
    else {
      var length = QRates.Length;
      var bs     = new StatClass(0, 0.5, 1);
      TransitionStats = new(length, length, bs, bs);
    }

    ts = align?.NCQRates;
    if (ts is not null)
      NCQRates = StatMatrix.Convert(ts);
    else {
      var length = QRates.Length;
      var bs     = new StatClass(0, 0.5, 1);
      NCQRates = new(length, length, bs, bs);
    }

    var alignments = new ListClass<AlignIndexClass>(1024);
    foreach (var a in align.Alignments) {
      foreach (var c in data.UsedCognates) {
        if (c.Concept.Name == a.ConceptName and c.Name == a.CognateName) {
          a.Cognate = c;
          alignments.Add(a);
          break;
        }
      }
    }
    Alignments = alignments.ToSortedArray(false, @CompareAlignment);
  }

  ArgString(arg, string path) = Span {
    if (arg is valid) {
      "-";
      arg;
      Space;
    }
    var quote = path.FindFirstIndex(c => c == ' ') >= 0;
    if (quote)
      Quote;
    path;
    if (quote)
      Quote;
  };

  Pause(mac) = mac ? "read -rsp $'Press enter to continue...\\n'" : "pause";

  ArgSpan = Span {
    Separator: Space;
  };

  RunReader(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacReaderEXE : Info.ReaderEXE);
      ArgString("i", root Info.ExecuteFolder);
      ArgString("b", Config.PreBurn);
      ArgString("o", root Info.OutFileName);
    };
    Pause(mac);
  };

  RunAll(mac, root) = TextBlock {
    ArgSpan {
      ArgString(null, mac ? Info.MacMCMCEXE : Info.MCMCEXE);
      ArgString("d", Info.ConfigFile);
      ArgString("o", root Info.OutFileName);
    };
    RunReader(mac, root);
  };

  GetParameters = TextBlock {
    "Generations = {0};"(Config.Generations);
    "PreBurn     = {0};"(Config.PreBurn);
  };

  void WriteRuns(path, mac, root, reader, all) {
    Write(RunReader(mac, root), path FileName(reader), FileFormats.UTF8);
    Write(RunAll(mac, root), path FileName(all), FileFormats.UTF8);
    Write(GetParameters, path Info.ParametersFile);
  }

  void InitFolders(DataSetClass data, NodeClass tree) {
    var path = Info.ExperimentRoot RootFolder;

    CreateFolder(path);
    CreateFolder(path Info.ExecuteFolder);
    WriteRuns(path, false, path, "WinRunReader.bat", "WinRunAll.bat");
    WriteRuns(path, true, Empty, "MacRunReader.sh", "MacRunAll.sh");

    Write(new ConfigFileClass(data, this, tree).Show, path Info.ConfigFile);
  }
}

//======================================================================

class ModelClass {
  var string               Name;
  var                      RootFolder;
  var TreeSetClass         TreeSet;
  var RunExperimentClass[] Run;

  Constructor(config, TreeSetClass treeset, string name) {
    Name       = name;
    TreeSet    = treeset;
    RootFolder = treeset.RootFolder Folder(name);
    Run        = new RunExperimentClass(config, this, each Info.Runs, 1000, false);
  }

  void InitFolders(DataSetClass data) {
    CreateFolder(Info.ExperimentRoot RootFolder);
    foreach (var r in Run)
      r.InitFolders(data, TreeSet.Tree);
  }
}

//======================================================================

class TreeSetClass {
  var NodeClass    Tree;
  var ModelClass[] Models;
  var              Name,
                   RootFolder;

  Constructor(config, name, root, NodeClass tree) {
    Name       = name;
    Tree       = tree;
    RootFolder = Folder(root) Folder(name);

    Models = [
      new(config, this, "Custom"),
      new(config, this, "JC69"),
      new(config, this, "GTR")
   ];
  }

  void InitFolders(DataSetClass data) {
    foreach (var m in Models)
      m.InitFolders(data);
  }
}

//======================================================================

class NLeaf: NodeClass {
  Constructor(LanguageClass language, branch) {
    super.Constructor("{0} ({1})"(language, WorldLanguageList.FindElementIndex(language)+1));
    BranchLength = branch;
  }
}

class NBranch: NodeClass {
  Constructor(name, branch=1) {
    super.Constructor(name);
    BranchLength = branch;
  }
}

//======================================================================


