using Format, Units, FeatureSet, Math;
//======================================================================

abstract class GroupClass {
  var Name;

  Constructor(name) {
    Name = name;
  }

  abstract Matches(segment);
}

class ConsonantGroupClass: GroupClass {
  Constructor() {
    super.Constructor("Consonant");
  }

  override Matches(segment) = segment.Features.NotFlag(Vowel Nasal);
}

class NasalConsonantGroupClass: GroupClass {
  Constructor() {
    super.Constructor("Nasal-Consonant");
  }

  override Matches(segment) = segment.Features.HasFlagMask(Vowel Nasal, Nasal);
}

class VowelGroupClass: GroupClass {
  Constructor() {
    super.Constructor("Vowel");
  }

  override Matches(segment) = segment.Features.HasFlag(Vowel);
}
//======================================================================

class RuleClass {
  var Name;

  Constructor(name) {
    Name = name;
  }
}
//======================================================================

class CVRuleClass: RuleClass {
  var RuleSets,
      Groups;

  Constructor {
    super.Constructor("Consonant-Vowel");

    RuleSets = [
      new ConsonantGroupClass,
      new NasalConsonantGroupClass,
      new VowelGroupClass,
    ];

    Groups = GetGroup(each RuleSets);
  }

  GetGroup(ruleset) = FindSlice(Results.UsedSegments, segment => ruleset.Matches(segment), 1);
}

Rules = [
  new CVRuleClass
];
//======================================================================

