using Format, Units, FeatureSet, Math, SegmentGroups;
//======================================================================

class FilterClass {
  var Name;

  Constructor(name) {
    Name = name;
  }

  virtual Matches(segment) = true;

  override GetLayout = Name;
}
//======================================================================

class PartitionClass {
  var Index,
      Filter,
      Segments,
      Center,
      Radius,
      Angle,
      Outer;

  Constructor(index, filter, segments) {
    Index    = index;
    Filter   = filter;
    Segments = segments;
  }
}
//======================================================================

abstract class RuleClass {
  var Name,
      FilterList,
      Filters,
      Partitions,
      Matrix,
      Numbers;

  Constructor(name) {
    Name       = name;
    Numbers    = false;
    FilterList = new ListClass(128);
  }

  void Add(filter) {
    FilterList.Add(filter);
  }

  MatchesRule(filter, segment) {
    foreach (var f in Filters) {
      if (f == filter)
        return f.Matches(segment);
      if (f.Matches(segment))
        return false;
    }
    return false;
  }

  virtual GetFilterIndex(segment) {
    var c = 0;
    foreach (var filter in Filters) {
      if (MatchesRule(filter, segment))
        return c;
      ++c;
    }
    return c;
  }

  void SetSegmentCharacter(SegmentClass segment, index) {
    segment.CharacterIndex = index;
    if (Numbers)
      segment.CharacterLetter = index;
    else if (index < Rev.CharacterList.Length)
      segment.CharacterLetter = Rev.CharacterList[index];
    else
      System.Assert(false, "Too many characters");
  }

  void GetFilters {
    Add(Residue);
    Filters = FilterList.ToArray;
  }

  virtual void AssignCharacters(segments) {
    var last = Rev.CharacterList.Length-1;
    foreach (var segment in segments) {
      var index = GetFilterIndex(segment);
      if (index > last)
        index = last;
      SetSegmentCharacter(segment, index);
    }
    GetFilters;
  }

  virtual void AssignPartitions(segments) {
    var list = new ListClass(segments.Length);
    var i    = 0;
    foreach (var filter in Filters) {
      var find = GetSegments(segments, filter);
      if (valid find) {
        list.Add(new PartitionClass(i, filter, find));
        foreach (var s in find)
          s.PartitionIndex = i;
        ++i;
      }
    }
    Partitions = list.ToArray;
  }

  GetSegments(segments, filter) = FindSlice(segments, segment => MatchesRule(filter, segment));

  ShowPartitions = Block {
    Paragraph {
      TextHeight: 14 pts;
      Name;
    };

    foreach (var partition in Partitions) {
      Paragraph {
        BorderB: 0.5;
        TabStops: [0.25 inch];

        partition.Index+1;
        Tab;
        Span {partition.Filter.Name; Bold};
      };

      Paragraph {
        TextHeight: 16 pts;
        LeftIndent: 0.25 inches;

        Span {
          Separator: Space;
          (each partition.Segments).ShowSegment;
        }
      }
    }
  };

  ShowDescription = Block {
    Paragraph {
      TextHeight: 14 pts;
      Name;
    };

    Paragraph {
      Separator: Space*2;

      var i = 0;
      foreach (var filter in Filters) {
        var segments = GetSegments(Results.UniqueSegments, filter);
        if (segments.Length > 0) {
          HBox {
            VAlign: VAligns.Center;
            Margin: 2;
            PaddingLR: 1;
            Border: 0.25 pts {Color: 80%};
            Span {
              Style.MonoFamily;
              HAlign: HAligns.Center;
              if (Numbers)
                i++;
              else if (i < Rev.CharacterList.Length)
                Rev.CharacterList[i++];
              else
                System.Assert(false);
            };
            Space*5;
            Span {
              TextHeight: 18 pts;
              Separator: Space;
              (each segments).ShowSegment;
            };
          }
        }
      }
    }
  };
}
//======================================================================

class SingleFilterClass: FilterClass {
  var Segment;

  Constructor(segment) {
    super.Constructor(segment.Ipa);
    Segment = segment;
  }

  override Matches(segment) = segment == Segment;
}
//======================================================================

class FeatureMaskClass: FilterClass {
  var Mask,
      Flags;

  Constructor(name, mask, flag) {
    super.Constructor(name);
    Mask  = mask;
    Flags = flag;
  }

  override Matches(segment) = segment.Features.HasFlagMask(Mask, Flags);
}
//======================================================================

class LabiovelarFilterClass: FilterClass {
  Constructor {
    super.Constructor("Labiovelar");
  }

  override Matches(segment) = segment.Features.HasFlagMask(Vowel, NoFeature) and segment.Place == Places.LabialVelar;
}
//======================================================================

class DiphthongClass: FilterClass {
  var Diphthong;

  Constructor(diphthong) {
    super.Constructor("Diphthong " + diphthong);
  }

  override Matches(segment) = segment.Features.HasFlagMask(Vowel, NoFeature) and segment.Place == Places.LabialVelar;
}
//======================================================================

class LongShortClass: FilterClass {
  var Root;

  Constructor(root) {
    Root = root;
    super.Constructor("Long & Short " + root.Name);
  }

  override Matches(segment) = segment.Root == Root and segment.Features.HasFlagMask(Vowel Nasal, Vowel);
}
//======================================================================

class RootMaskClass: FeatureMaskClass {
  var Root;

  Constructor(name, mask, flag, root) {
    super.Constructor(name + Space + root, mask, flag);
    Root = root;
  }

  override Matches(segment) = segment.Root == Root and segment.Features.HasFlagMask(Mask, Flags);
}
//======================================================================

class RootVowelClass: FilterClass {
  Constructor() {
    super.Constructor("Root vowel");
  }

  override Matches(segment) = segment.Features.HasFlag(Vowel) and segment.Root != RootVowels.None;
}
//======================================================================

class DiphthongFilterClass: FilterClass {
  var Root;

  Constructor(root) {
    super.Constructor("Root+Diphthongs");
    Root = root;
  }

  override Matches(segment) = segment == Root or segment.DiphthongRoot == Root;
}
//======================================================================

class SegmentListClass: FilterClass {
  var List;

  Constructor(name, list) {
    super.Constructor(name);
    List = list;
  }

  override Matches(segment) = FindAny(List, s => s == segment);
}
//======================================================================

with SegmentGroups {
  NasalVowels         = new FeatureMaskClass("Nasal Vowel", Vowel Nasal, Vowel Nasal);
  RoundedVowels       = new FeatureMaskClass("Rounded Vowel", Vowel Rounded, Vowel Rounded);
  LongVowels          = new FeatureMaskClass("Long Vowel", Vowel LongVowel, Vowel LongVowel);
  ShortVowels         = new FeatureMaskClass("Short Vowel", Vowel LongVowel, Vowel);
  AllRootVowels       = new RootVowelClass;
  Vowels              = new FeatureMaskClass("Vowel", Vowel, Vowel);
  VoicelessStops      = new FeatureMaskClass("Voiceless Stop", Voiced Stop, Stop);
  VoicedStops         = new FeatureMaskClass("Voiced Stop", Voiced Stop, Voiced Stop);
  VoicedAffricates    = new FeatureMaskClass("Voiced Affricate", Voiced Affricate, Voiced Affricate);
  VoicelessAffricates = new FeatureMaskClass("Voiceless Affricate", Voiced Affricate, Affricate);
  NasalConsonants     = new FeatureMaskClass("Nasal Consonant", Nasal, Nasal);
  Rhotics             = new FeatureMaskClass("Rhotic", Rhotic, Rhotic);
  Sibilants           = new FeatureMaskClass("Sibilant", Sibilant, Sibilant);
  Approximants        = new FeatureMaskClass("Approximant", Approximant, Approximant);
  Pulmonics           = new FeatureMaskClass("Pulmonic", Pulmonic, Pulmonic);
  VoicedFricatives    = new FeatureMaskClass("Voiced Fricative", Pulmonic Voiced Fricative, Pulmonic Voiced Fricative);
  VoicelessFricatives = new FeatureMaskClass("Voiceless Fricative", Pulmonic, Pulmonic Fricative);
  Laterals            = new FeatureMaskClass("Lateral", Lateral, Lateral);
  Diphthongs          = new FeatureMaskClass("Diphthong", Diphthong, Diphthong);
  Consonants          = new FeatureMaskClass("Consonant", Vowel, NoFeature);
  Labiovelars         = new LabiovelarFilterClass;
  LongShortRoot       = new LongShortClass(each RootVowels[1..]);
  NasalRoot           = new RootMaskClass("Nasal", Vowel Nasal LongVowel, Vowel Nasal, each RootVowels[1..]);
  LongRoot            = new RootMaskClass("Long", Vowel Nasal LongVowel, Vowel LongVowel, each RootVowels[1..]);
  ShortRoot           = new RootMaskClass("Short", Vowel Nasal LongVowel, Vowel, each RootVowels[1..]);
  NonSylabicSonorants = new SegmentListClass("Non Sylabic Sonorant", [IPA.Segments.l, IPA.Segments.r, IPA.Segments.n, IPA.Segments.m, IPA.Segments.jg, IPA.Segments.w]);
  Residue             = new FilterClass("Residue");
}
//======================================================================


class VowelsSeparatedRuleClass: RuleClass {
  Constructor {
    super.Constructor("Vowels Separated");

    Add(LongRoot);
    Add(ShortRoot);
    Add(NasalRoot);
    Add(NasalVowels);
    Add(RoundedVowels)
    Add(Vowels);
    Add(Labiovelars);
    Add(VoicelessStops);
    Add(VoicedStops);
    Add(VoicedAffricates);
    Add(VoicelessAffricates);
    Add(NasalConsonants);
    Add(Laterals);
    Add(Rhotics);
    Add(Sibilants);
    Add(Approximants);
    Add(VoicedFricatives);
    Add(VoicelessFricatives);
  }
}
//======================================================================

// This produces a tree with Catalan and Spanish in the same clade
class SegmentTypesRuleClass: RuleClass {
  Constructor {
    super.Constructor("Segment Types");

    Add(NasalVowels);
    Add(RoundedVowels);
    Add(LongVowels);
    Add(AllRootVowels);
    Add(Vowels);
    Add(VoicelessStops);
    Add(VoicedStops);
    Add(VoicedAffricates);
    Add(VoicelessAffricates);
    Add(NasalConsonants);
    Add(Rhotics);
    Add(Sibilants);
    Add(Pulmonics);
  }
}
//======================================================================

class DiphthongRuleClass: RuleClass {
  Constructor {
    super.Constructor("Diphthongs Separated");
    Add(Diphthongs);
  }

  override GetFilterIndex(segment) {
    var c = FilterList.Length;
    if (segment.Features.HasFlag(Diphthong))
      return c;
    FilterList.Add(new SingleFilterClass(segment));
    return c;
  }
}
//======================================================================

class DiphthongPairRuleClass: RuleClass {
  Constructor {
    super.Constructor("Diphthongs Paired with Vowels");
  }

  override void AssignCharacters(segments) {
    var count = 0;
    foreach (var segment in segments) {
      var dr = segment.DiphthongRoot;
      if (valid dr) {
        var fi = -1;
        foreach (var f in FilterList) {
          if (f.Matches(segment)) {
            fi = EachIndex;
            break;
          }
        }
        if (fi < 0) {
          SetSegmentCharacter(segment, count);
          SetSegmentCharacter(dr, count);
          Add(new DiphthongFilterClass(dr));
          ++count;
        }
        else
          SetSegmentCharacter(segment, fi);
      }
    }

    foreach (var segment in segments) {
      if (segment.CharacterIndex < 0) {
        SetSegmentCharacter(segment, count++);
        Add(new SingleFilterClass(segment));
      }
    }
    GetFilters;
  }
}
//======================================================================

class SingletonRuleClass: RuleClass {
  Constructor {
    super.Constructor("Each segment gets a different number");
    Numbers    = true;
  }

  override void AssignCharacters(segments) {
    foreach (var segment in segments) {
      SetSegmentCharacter(segment, EachIndex);
      Add(new SingleFilterClass(segment));
    }
    GetFilters;
  }
}
//======================================================================

class Partition1Class: RuleClass {
  Constructor {
    super.Constructor("Basic Rules");
    Numbers = true;

    Add(NasalVowels);
    Add(Vowels);
    Add(NasalConsonants);
    Add(NonSylabicSonorants);
    Add(Consonants);
    GetFilters;
  }
}
//======================================================================

class GroupRatesClass {
  var Results,
      PartitionRule,
      MaxLine,
      ArrowGap,
      GapAngle,
      LoopRadius,
      LoopDistance,
      MaxRadius,
      RateScale,
      ArrowProportion;

  Constructor(ResultsClass results) {
    Results         = results;
    PartitionRule   = results.PartitionRule;
    MaxLine         = 10;
    MaxRadius       = 0.75 inches;
    LoopRadius      = 0.35 inches;
    LoopDistance    = LoopRadius * 0.5;
    ArrowGap        = 10 pts;
    GapAngle        = 80.0 degrees;
    ArrowProportion = 1.5;
  }

  void Calibrate(size) {
    var middle = Point(size.Width * 0.5, size.Height * 0.5);
    var fmax   = MaxRadius / Max(Sqrt(each Results.Frequencies)); // Proportional to area, so use SQRT of frequency
    RateScale   = MaxLine / Max(Max(each Results.Rates));

    foreach (var partition in PartitionRule.Partitions) {
      partition.Angle  = (2 * EachIndex *  Graphics.OneEighty / PartitionRule.Partitions.Length) - Graphics.Ninety;
      partition.Radius = Sqrt(Results.Frequencies[EachIndex]) * fmax;
    }

    var maxradius = 0.0;
    foreach (var partition in PartitionRule.Partitions)
      maxradius = Max([maxradius, partition.Radius + Results.Rates[EachIndex][EachIndex] * RateScale]);
    maxradius = middle.X - maxradius - LoopRadius - LoopDistance - ArrowGap;

    foreach (var partition in PartitionRule.Partitions)
      partition.Center = Graphics.ExtentPoint(middle, maxradius, partition.Angle);
  }

  PartitionDiagram(size) = Canvas {
    Calibrate(size);
    Size: size;

    foreach (var p1 in PartitionRule.Partitions) {
      var pi = EachIndex;
      foreach (var p2 in PartitionRule.Partitions) {
        var line = new LineStyleClass(Results.Rates[pi][EachIndex] * RateScale, ArrowProportion);
        if (p1 == p2) {
          var c = Graphics.ExtentPoint(p1.Center, p1.Radius + LoopDistance - line.LineSize*0.5, p1.Angle);
          Graphics.CircleArrow(line, c, LoopRadius, p1.Angle - Graphics.OneEighty, GapAngle) {
            Fill: Colors.Black;
          };
        }
        else {
          var angle = Graphics.GetAngle(p1.Center, p2.Center);
          var c1    = Graphics.Adjust(p1.Center, p1.Radius + ArrowGap, angle);
          var c2    = Graphics.Adjust(p2.Center, p2.Radius + ArrowGap, angle + Graphics.OneEighty);

          Graphics.TwoArrowLine(line, c1, c2) {Fill: Colors.Black};
        }
      }
    }

    foreach (var p1 in PartitionRule.Partitions) {
      var pos   = p1.Center - p1.Radius;
      var fsize = p1.Radius*2;

      Figure {
        Fill: ChartColor(EachIndex);
        Stroke: 0.5 pt;
        Ellipse(Rect(pos, fsize));
      };
      HBox {
        Position: pos;
        Height: fsize;
        Frame {
          VAlignment: VAligns.Center;
          Width: fsize;
          TextHeight: p1.Radius * 0.3;
          ParAlignment: ParAlignments.Center;
          Span {
            TextHeight: 18 pts;
            Bold;
            EachOne;
          };
          p1.Filter;
        };
      };
    }
  };

  FrequencyChart(size) = Chart {
    Size: size;
    Type: ChartTypes.Bar;

    XAxis: ChartAxis {
      TextHeight: 8 pts;
      (each PartitionRule.Partitions).Filter;
    };
    ValueLabel: "Estimated Equilibrium Frequency";
    ValueAxis: ChartAxis;
    ChartSeries {
      foreach (var partition in PartitionRule.Partitions)
        new DataPointClass(EachIndex, Results.Frequencies[EachIndex] * 100.0) {Reference: partition.Filter};
    };
  };

  ShowGroupRates = Block {
    Style.BodyPar {
      "For the ‘{0}’ model, states were grouped into five sets: "(PartitionRule.Name);
      Span {
        Separator: CommaSpace;
        LastSeparator: " and ";
        foreach (var partition in PartitionRule.Partitions) {
          Span {
            partition.Filter.Name;
            " (";
            EachOne;
            ")";
          }
        }
      };
      Style.eos;
      "Here, the area of the circles is proportional to the estimated equilibrium frequencies for each group. ";
      "The width of the arrows is proportional to the estimated rates. ";
      "Note that rates are higher for transitions from one word segment to another when the word segments are in the same group.";
    };

    PartitionDiagram(Size(DocMetrics.PageContent.Width));
    FrequencyChart(Size(DocMetrics.PageContent.Width, 30 pts + PartitionRule.Partitions.Length * (25 pts)));
  };
}
//======================================================================

