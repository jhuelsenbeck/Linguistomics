using Format, Units, FeatureSet, Math;
//======================================================================

abstract class RuleSetClass {
  var Name;

  Constructor(name) {
    Name = name;
  }

  abstract Matches(segment);
}

class ConsonantSetClass: RuleSetClass {
  Constructor() {
    super.Constructor("Consonant");
  }

  override Matches(segment) = segment.Features.NotFlag(Vowel Nasal);
}

class NasalConsonantSetClass: RuleSetClass {
  Constructor() {
    super.Constructor("Nasal-Consonant");
  }

  override Matches(segment) = segment.Features.HasFlagMask(Vowel Nasal, Nasal);
}

class VowelSetClass: RuleSetClass {
  Constructor() {
    super.Constructor("Vowel");
  }

  override Matches(segment) = segment.Features.HasFlag(Vowel);
}
//======================================================================

abstract class RuleClass {
  var Name,
      Letter,
      Symbol;

  Constructor(name, letter, symbol) {
    Name   = name;
    Letter = letter;
    Symbol = symbol;
  }

  abstract ShowFile;

  virtual ShowDescription = Block {
    Paragraph {
      TextHeight: 14 pts;
      BorderB: 1 pt;
      SpaceAfter: 10 pts;
      Letter;
      "({0})"(Symbol);
      Tab;
      Name;
    }
  };
}
//======================================================================

class ConsonantVowelRuleClass: RuleClass {
  var Groups;

  Constructor {
    super.Constructor("Consonant-Vowel-Nasal clusters", "Kappa", Chars.kappa);

    Groups = [
      new ConsonantSetClass,
      new NasalConsonantSetClass,
      new VowelSetClass,
    ];
  }

  GetSegments(ruleset) = FindSlice(Results.UsedSegments, segment => ruleset.Matches(segment));

  ShowGroup(g) = Span {
    "(";
    (each (each GetSegments(g)).SegmentToCharacter).ShowLetter;
    ")";
  };

  override ShowFile = TextBlock {
    Span {
      Letter;
      ":";
      Span {
        Separator:",";
        ShowGroup(each Groups);
      };
    }
  };

  override ShowDescription = Block {
    super.ShowDescription;
    Table {
      Columns: [1.25 inches, 5 inches];
      Row {
        Bold;
        Background: 90%;
        Lang.Group;
        Lang.Segments;
      };

      foreach (var g in Groups) {
        Row {
          g.Name;
          Cell {
            TextHeight: 14 pts;
            Span {
              Separator: Space;
              (each GetSegments(g)).ShowSegment;
            };
          };
        };
      }
    }
  };
}

Rules = [
  new ConsonantVowelRuleClass
];
//======================================================================

