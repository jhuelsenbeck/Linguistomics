using Format, Units, FeatureSet, Math;
//======================================================================

class FilterClass {
  var Name;

  Constructor(name) {
    Name = name;
  }

  virtual Matches(segment) = true;
}
//======================================================================

abstract class RuleClass {
  var Name,
      Letter,
      Symbol,
      Filters;

  Constructor(name) {
    Name    = name;
    Letter  = "Kappa";
    Symbol  = Tex.kappa;
  }

  virtual void GetFilters {
  }

  MatchesRule(filter, segment) {
    foreach (var f in Filters) {
      if (f == filter)
        return f.Matches(segment);
      if (f.Matches(segment))
        return false;
    }
    return false;
  }

  virtual GetCharacterIndex(segment) {
    var c = 0;
    foreach (var filter in Filters) {
      if (MatchesRule(filter, segment))
        return c;
      ++c;
    }
    return c;
  }

  virtual void AssignCharacters(segmentlist) {
    var last = Nexus.CharacterList.Length-1;
    foreach (var segment in segmentlist) {
      var c = GetCharacterIndex(segment);
      if (c > last)
        c = last;
      segment.Character = c;
    }
    GetFilters;
  }

  virtual ShowDescription = Block {
    Paragraph {
      TextHeight: 14 pts;
      BorderB: 1 pt;
      SpaceAfter: 10 pts;
      Letter;
      "({0})"(Symbol);
      Tab;
      Name;
    }
  };

  ShowFile = TextBlock {
    Span {
      Letter;
      ":";
      Span {
        Separator:",";
        foreach (var filter in Filters) {
          "(";
          (each GetSegments(filter)).ShowCharacter;
          ")";
        }
      };
    }
  };

  GetSegments(filter) = FindSlice(Results.DisplaySegments, segment => MatchesRule(filter, segment));

  override ShowDescription = Block {
    Paragraph {
      TextHeight: 14 pts;
      Name;
    };

    Table {
      PaddingLR: 1;
      Columns: [15 pts, 1.4 inches, DocMetrics.PageContent.Width - 1.55 inches];
      Row {
        Bold;
        Style.TitleBackground;
        "#";
        Lang.Filter;
        Lang.Segments;
      };

      var i = 0;
      foreach (var filter in Filters) {
        var segments = GetSegments(filter);
        if (segments.Length > 0) {
          Row {
            Cell {
              Style.MonoFamily;
              Style.TitleBackground;
              Bold;
              HAlign: HAligns.Center;
              Nexus.CharacterList[i++];
            };
            filter.Name;
            Cell {
              TextHeight: 14 pts;
              Span {
                Separator: Space;
                (each segments).ShowSegment;
              };
            };
          };
        }
      }
    }
  };
}
//======================================================================

class SingleFilterClass: FilterClass {
  var Segment;

  Constructor(segment) {
    super.Constructor(segment.Ipa);
    Segment = segment;
  }

  override Matches(segment) = segment == Segment;
}
//======================================================================

class FeatureMaskClass: FilterClass {
  var Mask,
      Flags;

  Constructor(name, mask, flag) {
    super.Constructor(name);
    Mask  = mask;
    Flags = flag;
  }

  override Matches(segment) = segment.Features.HasFlagMask(Mask, Flags);
}
//======================================================================

class LabiovelarFilterClass: FilterClass {
  Constructor {
    super.Constructor("Labiovelar");
  }

  override Matches(segment) = segment.Features.HasFlagMask(Vowel, NoFeature) and segment.Place == Places.LabialVelar;
}
//======================================================================

class DiphthongClass: FilterClass {
  var Diphthong;

  Constructor(diphthong) {
    super.Constructor("Diphthong " + diphthong);
  }

  override Matches(segment) = segment.Features.HasFlagMask(Vowel, NoFeature) and segment.Place == Places.LabialVelar;
}
//======================================================================

class LongShortClass: FilterClass {
  var Root;

  Constructor(root) {
    Root = root;
    super.Constructor("Long & Short " + root.Name);
  }

  override Matches(segment) = segment.Root == Root and segment.Features.HasFlagMask(Vowel Nasal, Vowel);
}
//======================================================================

class RootMaskClass: FeatureMaskClass {
  var Root;

  Constructor(name, mask, flag, root) {
    super.Constructor(name + Space + root, mask, flag);
    Root = root;
  }

  override Matches(segment) = segment.Root == Root and segment.Features.HasFlagMask(Mask, Flags);
}
//======================================================================

class RootVowelClass: FilterClass {
  Constructor() {
    super.Constructor("Root vowel");
  }

  override Matches(segment) = segment.Features.HasFlag(Vowel) and segment.Root != RootVowels.None;
}
//======================================================================

class DiphthongFilterClass: FilterClass {
  var Segment;

  Constructor(segment) {
    super.Constructor("Root+Diphthongs");
    Segment = segment;
  }

  override Matches(segment) = segment == Segment or segment == Segment.DiphthongRoot;
}
//======================================================================

Residue             = new FilterClass("Residue");
NasalVowels         = new FeatureMaskClass("Nasal Vowel", Vowel Nasal, Vowel Nasal);
RoundedVowels       = new FeatureMaskClass("Rounded Vowel", Vowel Rounded, Vowel Rounded);
LongVowels          = new FeatureMaskClass("Long Vowel", Vowel LongVowel, Vowel LongVowel);
ShortVowels         = new FeatureMaskClass("Short Vowel", Vowel LongVowel, Vowel);
AllRootVowels       = new RootVowelClass;
Vowels              = new FeatureMaskClass("Vowel", Vowel, Vowel);
VoicelessStops      = new FeatureMaskClass("Voiceless Stop", Voiced Stop, Stop);
VoicedStops         = new FeatureMaskClass("Voiced Stop", Voiced Stop, Voiced Stop);
VoicedAffricates    = new FeatureMaskClass("Voiced Affricate", Voiced Affricate, Voiced Affricate);
VoicelessAffricates = new FeatureMaskClass("Voiceless Affricate", Voiced Affricate, Affricate);
NasalConsonants     = new FeatureMaskClass("Nasal Consonant", Nasal, Nasal);
Rhotics             = new FeatureMaskClass("Rhotic", Rhotic, Rhotic);
Sibilants           = new FeatureMaskClass("Sibilant", Sibilant, Sibilant);
Approximants        = new FeatureMaskClass("Approximant", Approximant, Approximant);
Pulmonics           = new FeatureMaskClass("Pulmonic", Pulmonic, Pulmonic);
VoicedFricatives    = new FeatureMaskClass("Voiced Fricative", Pulmonic Voiced Fricative, Pulmonic Voiced Fricative);
VoicelessFricatives = new FeatureMaskClass("Voiceless Fricative", Pulmonic, Pulmonic Fricative);
Laterals            = new FeatureMaskClass("Lateral", Lateral, Lateral);
Diphthongs          = new FeatureMaskClass("Diphthong", Diphthong, Diphthong);
Labiovelars         = new LabiovelarFilterClass;
LongShortRoot       = new LongShortClass(each RootVowels[1..]);
NasalRoot           = new RootMaskClass("Nasal", Vowel Nasal LongVowel, Vowel Nasal, each RootVowels[1..]);
LongRoot            = new RootMaskClass("Long", Vowel Nasal LongVowel, Vowel LongVowel, each RootVowels[1..]);
ShortRoot           = new RootMaskClass("Short", Vowel Nasal LongVowel, Vowel, each RootVowels[1..]);
//======================================================================


class VowelsSeparatedRuleClass: RuleClass {
  Constructor {
    super.Constructor("Vowels Separated");

    Filters = LongRoot + ShortRoot + NasalRoot + [
      NasalVowels,
      RoundedVowels,
      Vowels,
      Labiovelars,
      VoicelessStops,
      VoicedStops,
      VoicedAffricates,
      VoicelessAffricates,
      NasalConsonants,
      Laterals,
      Rhotics,
      Sibilants,
      Approximants,
      VoicedFricatives,
      VoicelessFricatives,
      Residue,
    ];
  }
}
//======================================================================

// This produces a tree with Catalan and Spanish in the same clade
class SegmentTypesRuleClass: RuleClass {
  Constructor {
    super.Constructor("Segment Types");

    Filters = [
      NasalVowels,
      RoundedVowels,
      LongVowels,
      AllRootVowels,
      Vowels,
      VoicelessStops,
      VoicedStops,
      VoicedAffricates,
      VoicelessAffricates,
      NasalConsonants,
      Rhotics,
      Sibilants,
      Pulmonics,
      Residue,
    ];
  }
}
//======================================================================

class DiphthongRuleClass: RuleClass {
  var FilterList;

  Constructor {
    super.Constructor("Diphthongs Separated");
    FilterList = new ListClass(128);
  }

  override GetCharacterIndex(segment) {
    var c = FilterList.Length;
    if (segment.Features.HasFlag(Diphthong))
      return c;
    FilterList.Add(new SingleFilterClass(segment));
    return c;
  }

  override void GetFilters {
    FilterList.Add(Diphthongs);
    Filters = FilterList.ToArray;
  }
}
//======================================================================

class DiphthongPairRuleClass: RuleClass {
  var FilterList;

  Constructor {
    super.Constructor("Diphthong Paired with Vowels");
    FilterList = new ListClass(128);
  }

  override void AssignCharacters(segmentlist) {
    var count = 0;
    foreach (var segment in segmentlist) {
      var dr = segment.DiphthongRoot;
      if (valid dr) {
        var fi = -1;
        foreach (var f in FilterList) {
          if (f.Segment.DiphthongRoot == dr) {
            fi = EachIndex;
            break;
          }
        }
        if (fi < 0) {
          segment.Character = count;
          dr.Character      = count;
          FilterList.Add(new DiphthongFilterClass(segment));
          ++count;
        }
        else {
          segment.Character = fi;
        }
      }
    }

    foreach (var segment in segmentlist) {
      if (segment.Character < 0) {
        segment.Character = count++;
        FilterList.Add(new SingleFilterClass(segment));
      }
    }
    GetFilters;
  }

  override void GetFilters {
    Filters = FilterList.ToArray;
  }
}
//======================================================================

