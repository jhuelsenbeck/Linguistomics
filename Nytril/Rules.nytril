using Format, Units, SegmentFeatures, Math, Style;
//======================================================================

class FilterClass {
  field        Name;
  var          CircleName;
  DataSetClass Data;
  RuleClass    Rule;

  Constructor(DataSetClass data, RuleClass rule, name) {
    Data       = data;
    Rule       = rule;
    Name       = name;
    CircleName = name.Substitute(name.FindIndex(c => c == Space), LineBreak);
  }

  virtual Matches(SegmentClass segment) = true;

  override GetLayoutSpan = Span {
    TipAction: this;
    Name;
  };

  override GetLayoutTip = Frame {
    Width: 2 inches;
    Paragraph {
      ParAlignment: ParAlignments.Center;
      TextHeight: 16 pts;
      BorderB: 1;
      Name;
    };
    SegmentDisplay.ShowFilterSegments(Rule, Data.UniqueSegments, this, ParAlignments.Left);
  };
}
//======================================================================

class PartitionClass: FactClass {
  field          Name;
  SegmentClass[] Segments;
  PointClass     Center;
  FilterClass    Filter;
  ColorClass     Color;
  var            Index,
                 Radius,
                 Angle,
                 Outer;

  Constructor(index, FilterClass filter, SegmentClass[] segments) {
    super.Constructor(filter.Name);
    Name     = filter.Name;
    Color    = ChartColor(index);
    Index    = index;
    Filter   = filter;
    Segments = segments;
    LinkTypes.Link.Connect(this, segments);
  }

  override GetIcon = Icons.sort;

  override GetLayoutTip = Filter.GetLayoutTip;
}
//======================================================================

abstract class RuleClass {
  DataSetClass           Data;
  ListClass<FilterClass> FilterList;
  FilterClass[]          Filters,
                         FiltersPlus;
  PartitionClass[]       Partitions;
  SegmentClass[]         PartSegments;
  var                    Name,
                         Matrix,
                         Numbers;

  Constructor(DataSetClass data, name) {
    Data       = data;
    Name       = name;
    Numbers    = false;
    FilterList = new(128);
  }

  MatchesRule(FilterClass filter, SegmentClass segment) {
    foreach (var f in FiltersPlus) {
      if (f == filter)
        return f.Matches(segment);
      if (f.Matches(segment))
        return false;
    }
    return false;
  }

  virtual GetFilterIndex(SegmentClass segment) {
    var c = 0;
    foreach (var filter in FiltersPlus) {
      if (MatchesRule(filter, segment))
        return c;
      ++c;
    }
    return c;
  }

  void SetSegmentCharacter(SegmentClass segment) {
    if (not Numbers) {
      if (segment.Index < Nexus.CharacterList.Length)
        segment.CharacterLetter = Nexus.CharacterList[segment.Index];
      else
        System.Assert(false, "Too many characters");
    }
  }

  void GetFilters {
    Filters = FilterList.Values;
    FilterList.Add(new FilterClass(Data, this, "Residue"));
    FiltersPlus = FilterList.Values;
  }

  virtual void AssignCharacters(SegmentClass[] segments) {
    var last = Nexus.CharacterList.Length-1;
    foreach (var segment in segments) {
      var index = GetFilterIndex(segment);
      if (index > last)
        index = last;
      SetSegmentCharacter(segment);
    }
    GetFilters;
  }

  void AssignPartitions(SegmentClass[] segments) {
    var list = new ListClass<PartitionClass>(segments.Length);
    var i    = 0;
    foreach (var filter in FiltersPlus) {
      var find = GetMatching(segments, filter);
      if (valid find) {
        list.Add(new PartitionClass(i, filter, find));
        foreach (var s in find)
          s.PartitionIndex = i;
        ++i;
      }
    }
    Partitions   = list.Values;
    PartSegments = Data.UniqueSegments.Sort(true, ref ComparePartSegments);
  }

  static ComparePartSegments(SegmentClass s0, SegmentClass s1, options) {
    var i = s1.PartitionIndex - s0.PartitionIndex;
    if (i == 0)
      i = s0.UsedCount - s1.UsedCount;
    return i;
  }

  SegmentClass[] GetMatching(SegmentClass[] segments, FilterClass filter) {
    return segments.FindSlice(segment => MatchesRule(filter, segment));
  }

  ShowLegend(textheight, width) = VBox {
    Table {
      TextHeight: textheight;
      Columns: [textheight, width - textheight * 1.5];

      foreach (var partition in Partitions) {
        Row {
          VAlign: VAligns.Center;
          Span {
            TextColor: partition.Color;
            TextHeight: textheight * 1.25;
            Tex.blackcirc;
          };
          partition.Filter;
        }
      }
    };
  };

  ShowPartitions = Table {
    Columns: [0.5 inch, 2 inches, 5 inches];
    TextHeight: 12 pts;
    EdgeB: 1;

    Row {
      EdgeB: 1;
      Cell {
        ColSpan: 3;
        TextHeight: 16 pts;
        Span {
          "Model: ";
          Style.DQuote {Name};
        };
      };
    };

    foreach (var partition in Partitions) {
      Row {
        Cell {
          HAlign: HAligns.Right;
          Span {each1; ") "};
          PaddingR: 3 pts;
        };
        partition.Filter.Name;
        Span {
          Separator: Space;
          (each partition.Segments).ShowSegment;
        };
      };
    }
  };

  ShowDescription(SegmentClass[] segments) = Block {
    Paragraph {
      TextHeight: 14 pts;
      Name;
    };

    Paragraph {
      Separator: Space;

      var i = 0;
      foreach (var filter in FiltersPlus) {
        var matching = GetMatching(segments, filter);
        if (valid matching) {
          HBox {
            VAlign: VAligns.Center;
            Margin: 2;
            PaddingLR: 1;
            Border: 0.25 pts {Color: 80%};
            Span {
              Style.MonoFamily;
              HAlign: HAligns.Center;
              if (Numbers) {
                i++;
                i;
              }
              else if (i < Nexus.CharacterList.Length)
                Nexus.CharacterList[i++];
              else
                System.Assert(false);
            };
            Space*5;
            Span {
              TextHeight: 18 pts;
              Separator: Space;
              (each matching).ShowSegment;
            };
          }
        }
      }
    }
  };
}
//======================================================================

class SingleFilterClass: FilterClass {
  SegmentClass Segment;

  Constructor(DataSetClass data, RuleClass rule, SegmentClass segment) {
    super.Constructor(data, rule, segment.Ipa);
    Segment = segment;
  }

  override Matches(SegmentClass segment) = segment == Segment;
}
//======================================================================

class FeatureMaskClass: FilterClass {
  var Mask,
      Flags;

  Constructor(DataSetClass data, RuleClass rule, name, mask, flag) {
    super.Constructor(data, rule, name);
    Mask  = mask;
    Flags = flag;
  }

  override Matches(SegmentClass segment) = segment.Features.HasFlagMask(Mask, Flags);
}
//======================================================================

class SegmentListClass: FilterClass {
  SegmentClass[] List;

  Constructor(DataSetClass data, RuleClass rule, name, SegmentClass[] list) {
    super.Constructor(data, rule, name);
    List = list;
  }

  override Matches(SegmentClass segment) = List.FindAny(segment);
}
//======================================================================

class VowelListClass: SegmentListClass {
  Constructor(DataSetClass data, RuleClass rule, SegmentClass[] list) {
    super.Constructor(data, rule, list.FirstElement.Ipa, list);
  }

  override Matches(SegmentClass segment) = List.FindAny(segment);
}
//======================================================================

class NaturalPartitionClass: RuleClass {
  Constructor(DataSetClass data) {
    super.Constructor(data, "Natural Class");
    Numbers = true;

    FilterList.Add(new FeatureMaskClass(data, this, "Long Vowel", Vowel LongVowel, Vowel LongVowel));
    FilterList.Add(new FeatureMaskClass(data, this, "Nasal Vowel", Vowel Nasal, Vowel Nasal));
    FilterList.Add(new FeatureMaskClass(data, this, "Diphthong", Diphthong, Diphthong));
    FilterList.Add(new FeatureMaskClass(data, this, "Short Vowel", Vowel, Vowel));
    FilterList.Add(new FeatureMaskClass(data, this, "Nasal Consonant", Nasal, Nasal));
    FilterList.Add(new FeatureMaskClass(data, this, "Liquid", Vowel Liquid, Liquid));
    FilterList.Add(new FeatureMaskClass(data, this, "Approximant", Vowel Approximant, Approximant));
    FilterList.Add(new FeatureMaskClass(data, this, "Affricate", Vowel Affricate, Affricate));
    FilterList.Add(new FeatureMaskClass(data, this, "Fricatives", Vowel Fricative, Fricative));
    FilterList.Add(new FeatureMaskClass(data, this, "Consonant", Vowel, NoFeature));
    GetFilters;
    AssignPartitions(data.UniqueSegments);
  }
}
//======================================================================

class PartitionActionClass: ActionClass {
  var            Rate;
  PartitionClass P1,
                 P2;
  RuleClass      Rule;
  DataSetClass   Data;

  Constructor(DataSetClass data, RuleClass rule, rate, PartitionClass p1, PartitionClass p2) {
    super.Constructor(Actions.ToSource, Rule);
    Rule = rule;
    Data = data;
    Rate = rate;
    P1   = p1;
    P2   = p2;
  }

  AddGroup(PartitionClass p) = VBox {
    HAlign: HAligns.Center;
    HBox {
      TextBackground: 90%;
      Span {
        p.Filter.Name;
      };
    };
    HBox {
      SegmentDisplay.ShowFilterSegments(Rule, Data.UniqueSegments, p.Filter, ParAlignments.Center);
    };
  };

  override GetLayoutTip = HBox {
    VAlign: VAligns.Top;
    if (P1 != P2)
      AddGroup(P1);
    HBox {
      MarginLR: 5;
      PaddingLR: 5;
      Background: 90%;
      VBox {
        HAlign: HAligns.Center;
        "Transitions";
        Span {
          Bold;
          TextHeight: 14 pts;
          TextDigits: 0;
          Rate;
        }
      };
    };
    AddGroup(P2);
  };
}
//======================================================================

class TransitionClass {
  var       Frequencies,
            Rates;
  RuleClass Rule;

  Constructor(DataSetClass data, RuleClass rule, read=false) {
    Rule = rule;
    if (read)
      ReadFrequencies;
    else
      StaticFrequencies(data.UniqueSegments, data.TransitionCount);
  }

  RandomArray {
    var list = new ListClass(Rule.Partitions.Length);
    foreach (var f in Rule.Partitions)
      list.Add(Math.Random(0..1000));
    return list.Values;
  }

  void ReadFrequencies {
    // This is temporary until we get actual data

//    TransitionStats
    Frequencies = RandomArray;
    var list = new ListClass(Rule.Partitions.Length);
    foreach (var f in Rule.Partitions)
      list.Add(RandomArray);
    Rates = list.Values;
  }

  void StaticFrequencies(SegmentClass[] segments, MatrixClass tcount) {
    var max   = Rule.Partitions.Length;
    var list  = new ListClass(max);
    var flist = new ListClass(max);
    foreach (var p0 in Rule.Partitions) {
      var s0  = Rule.GetMatching(segments, p0.Filter);
      var sum = Math.Sum((each s0).UsedCount);

      flist.Add(sum);

      var l1 = new ListClass(max);
      foreach (var p1 in Rule.Partitions) {
        var s1    = Rule.GetMatching(segments, p1.Filter);
        var count = 0;
        foreach (var s0i in s0) {
          foreach (var s1i in s1) {
            var tl = tcount.GetValue(s0i.Index, s1i.Index);
            if (valid tl)
              count += tl.Length;
          }
        }

        l1.Add(count);
      }
      list.Add(l1.Values);
    }
    Frequencies = flist.Values;
    Rates       = list.Values;
  }
}
//======================================================================

class TranActionClass: ActionClass {
  WordPairClass[] List;
  var             Percent;

  Constructor(WordPairClass[] list, percent) {
    super.Constructor(Actions.TipDocument, list);
    List    = list;
    Percent = percent;
  }

  override GetQuery = MatchAny WordClass {
    (each List).Word1 + (each List).Word2;
  };

  ShowSegments(count) = Block {
    var first = List.FirstElement;
    Paragraph {
      first.Word1.Padded[first.Index].ShowSegment;
      Tex.To;
      first.Word2.Padded[first.Index].ShowSegment;
    };
    Paragraph {
      List.Length; " transitions";
    };
    Paragraph {
      TextDigits: 1;
      Percent * 100.0; "% of max";
    };

    Paragraph {
      Separator: Space;
      foreach (var p in List[0..count])
        p.ShowDescription(10 pts);
    };

    if (count < List.Length)
      "More...";
  };

  override GetDocument = Block {
    ShowSegments(List.Length);
  };

  override GetLayoutTip = Frame {
    var count = Math.Min([List.Length, 30]);
    Width: Min([count*3, 6]) inches;
    ShowSegments(count);
  };
}
//======================================================================

class CalcRatesClass {
  DataSetClass    Data;
  TransitionClass Transition;
  RuleClass       Rule;
  var             MaxLine,
                  ArrowGap,
                  GapAngle,
                  LoopRadius,
                  LoopDistance,
                  MaxExtent,
                  MaxRadius,
                  RateScale;

  Constructor(DataSetClass data, RuleClass rule, TransitionClass transition=null) {
    Data       = data;
    Rule       = rule;
    ArrowGap   = 4 pts;
    GapAngle   = 80.0 degrees;
    Transition = transition ?? new TransitionClass(Data, rule);
  }

  void Calibrate(size) {
    var middle = new PointClass(size.Width * 0.5, size.Height * 0.5);

    MaxExtent    = Min([middle.X, middle.Y]);
    MaxRadius    = MaxExtent * 0.13;
    MaxLine      = MaxRadius * 0.3;
    LoopRadius   = MaxRadius * 0.25;
    LoopDistance = LoopRadius * 0.5;


    var fmax = MaxRadius / Sqrt(Real(Max(Transition.Frequencies))); // Proportional to area, so use SQRT of frequency

    RateScale = MaxLine / Max(Max(each Transition.Rates));

    var mult = Math.PI2 / Rule.Partitions.Length;
    foreach (var partition in Rule.Partitions) {
      partition.Angle  = mult * each0 - Graphics.Ninety;
      partition.Radius = Sqrt(Transition.Frequencies[each0]) * fmax;
    }

    var maxradius = 0.0;
    foreach (var partition in Rule.Partitions)
      maxradius = Max([maxradius, partition.Radius + Transition.Rates[each0][each0] * RateScale]);
    maxradius = MaxExtent - maxradius - LoopRadius - LoopDistance - ArrowGap;

    foreach (var partition in Rule.Partitions)
      partition.Center = Graphics.ExtendPoint(middle, maxradius, partition.Angle);
  }

  private MainDiagram(min) = Canvas {
    var size = new SizeClass(min, min);

    TransformFit: true;
    Calibrate(size);
    Size: size;

    foreach (var p1 in Rule.Partitions) {
      var i = each0;
      foreach (var p2 in Rule.Partitions) {
        var  rate  = Transition.Rates[i][each0];
        var  hover = new PartitionActionClass(Data, Rule, rate, p1, p2);
        var  r     = rate * RateScale / MaxLine;
        var  frac  = Math.Round(Math.Max([1.0, r]) * 255.0);
        var  line1 = new LineStyleClass(rate * RateScale, 0.25, 1) {
          LineColor: new ColorClass(0, 0, 0, frac)
        };
        var line2 = new LineStyleClass(rate * RateScale, 0.25, 1);

        if (p1 == p2) {
          var c = Graphics.ExtendPoint(p1.Center, p1.Radius + LoopDistance - line2.LineSize*0.5, p1.Angle);
          Graphics.CircleLine(line2, c, LoopRadius + line2.LineSize, p1.Angle + Graphics.OneEighty, GapAngle) {
            TipAction: hover;
          };
        }
        else if (each0 < i) {
          var angle = Graphics.GetAngle(p1.Center, p2.Center);
          var c1    = Graphics.Adjust(p1.Center, p1.Radius + ArrowGap, angle + Graphics.OneEighty);
          var c2    = Graphics.Adjust(p2.Center, p2.Radius + ArrowGap, angle);

          Graphics.Line(line1, c1, c2) {
            TipAction: hover;
          }
        }
      }
    }

    foreach (var p1 in Rule.Partitions) {
      var pos   = p1.Center - p1.Radius;
      var fsize = p1.Radius*2;

      Figure {
        Fill: p1.Color;
        Stroke: 0.5 pt;
        Ellipse(new(pos, new(fsize)));
        TipAction: p1;
      };

      var c = LayoutSize(TestText(p1)).Width;
      CircleText(p1, pos, fsize, Math.Min([12 pts, p1.Radius * 20 / c]));
    }
  };

  TestText(PartitionClass p) = Paragraph {
    TextHeight: 10 pts;
    p.Filter.CircleName;
  };

  CircleText(PartitionClass p, PointClass pos, fsize, textheight) = HBox {
    Position: pos;
    Height: fsize;
    Frame {
      VAlignment: VAligns.Center;
      Width: fsize;
      TextHeight: textheight;
      ParAlignment: ParAlignments.Center;
      p.Filter.CircleName;
    };
  };

  PartitionDiagram(SizeClass maxsize) = VBox {
    Width: maxsize.Width;
    HAlign: HAligns.Center;

    HBox {
      VAlign: VAligns.Center;
      Rule.ShowLegend(12 pts, 1.25 inch);
      MainDiagram(Min([maxsize.Width, maxsize.Height]));
    };
  };

  GetColor(SegmentClass s) = ChartColor(s.PartitionIndex);// * 30%;

  TranLink(i0, i1) = "Tran{0}:{1}"(i0, i1);

  TranPar(list) = Block {
    var first = list.FirstElement;
    Paragraph {
      var s0 = first.Word1.Padded[first.Index];
      s0.ShowSegment;

      Tex.To;
      var s1 = first.Word2.Padded[first.Index];
      s1.ShowSegment;

      AnchorTag: TranLink(s0.Index, s1.Index);
      KeepWithNext: true;
    };

    Paragraph {
      SpaceBefore: 4 pts;
      SpaceAfter: 6 pts;
      Separator: Space;
      foreach (var p in list)
        p.ShowDescription(9 pts);
    }
  };

  static CompareLength(l1, l2, options) = l2.Length - l1.Length;

  GetSorted {
    var all      = new ListClass(128);
    var t        = Data.TransitionCount;
    var segments = Rule.PartSegments;

    foreach (var s0 in segments) {
      foreach (var s1 in segments) {
        if (s0.Index != s1.Index) {
          var tlist = t.GetValue(s0.Index, s1.Index);
          if (valid tlist and tlist.Length < Info.LinkMin)
            all.Add(tlist);
        }
      }
    }

    return all.Sort(true, ref CompareLength);
  }

  PartitionBlock = Block {
    PartitionBox(new SizeClass(DocMetrics.PageContent.Width, DocMetrics.PageContent.Height * 0.8));

/*
    PageBreak;
    Block {
      TextHeight: 9 pts;
      TranPar(each GetSorted);
    }
*/
  };

  PartitionBox(SizeClass framesize) = Paragraph {
    var segments = Rule.PartSegments;
    var grid     = 0.125 pts;
    var gcolor   = 65%;
    var border   = 0.5 pts;
    var size     = framesize - border*2;
    var d        = size / (segments.Length+1);
    Canvas {
      TextHeight: d.Height * 0.6;
      Border: border;

      var t   = Data.TransitionCount;
      var max = 1.0 / Data.TransitionMax;
      var y   = d.Height;
      foreach (var s0 in segments) {
        var x = d.Width;
        foreach (var s1 in segments) {
          if (s0.Index != s1.Index) {
            var tlist = t.GetValue(s0.Index, s1.Index);
            if (valid tlist) {
              Canvas {
                TipAction: new TranActionClass(tlist.Values, tlist.Length*max);
                HAlign: HAligns.Center;
                VAlign: VAligns.Center;
                X: x;
                Y: y;
                Size: d;

                var count = 0;
                foreach (var e in tlist) {
                  var c0 = e.Word1.Padded[e.Index];
                  var c1 = e.Word2.Padded[e.Index];
                  if (c0.Features.HasFlag(Vowel | Semivowel) != c1.Features.HasFlag(Vowel | Semivowel))
                    ++count;
                }

                if (count > 0) {
                  var f = Integer(255.0 * (1.0 - count / tlist.Length));
                  if (f < 255)
                    Background: new ColorClass(f, 255, f);
                }
                else {
                  var f = Integer((1.0 - tlist.Length * max) * 255.0);
                  if (f < 255)
                    Background: new ColorClass(255, f, f);
                }

                tlist.Length;
              };
            }
          }
          x += d.Width;
        }
        y += d.Height;
      }

      y = d.Height;
      var p = 0;
      foreach (var s in segments) {
        Canvas {
          Size: d;
          Background: GetColor(s);
          Width: d.Width;
          HAlign: HAligns.Center;
          Y: y;
          s.ShowSegment;
        };
        if (p != s.PartitionIndex) {
          Canvas {
            Y: y;
            Size: new SizeClass(size.Width, grid);
            Background: gcolor;
          };
          p = s.PartitionIndex;
        }
        y += d.Height;
      }

      Canvas {
        Height: d.Height;
        Width: size.Width;

        var x = d.Width;
        p = 0;
        foreach (var s in segments) {
          Canvas {
            Size: d;
            Background: GetColor(s);
            HAlign: HAligns.Center;
            X : x;
            s.ShowSegment;
          };
          if (p != s.PartitionIndex) {
            Canvas {
              X: x;
              Size: new SizeClass(grid, size.Height);
              Background: gcolor;
            };
            p = s.PartitionIndex;
          }
          x += d.Width;
        }
      };
    };
  };
}
//======================================================================

