using Format, Units, Math, Style, LinkTypes;

Main.MathFamily   = TextFamilies.LinuxLibertineO;
Main.SymbolFamily = TextFamilies.CMUClassicalSerif;

//======================================================================

abstract class BaseDocumentClass: DocumentClass {
  ExperimentClass Experiment;
  DataSetClass    Data;

  Constructor(ExperimentClass experiment, id, name, type=DocumentTypes.Normal) {
    super.Constructor(id, name, type);
    Margin     = new(0.75 inches, 0.9 inches, 0.75 inches, 1 inches);
    Experiment = experiment;
    Data       = experiment.Data;
    Title      = "Understanding Language Evolution Using an Event-Based Model";
  }

  ShowContent(content) = Block {
    Header2 {
      content.Title;
    };

    content.Body(Experiment);
  };

  ShowSymbols = Block {
    (each Defs).Appendix;
  };

  abstract GetContent;

  override GetDocument = Document {
    TextFamily: TextFamilies.TimesNewRoman;
    TextHeight: 9 pts;

    AuthorLink to Authors;
    Link to References;
    RefStyle: ReferenceStyle;

    GetContent;
  };
}

//======================================================================

class SubmissionViewClass: BaseDocumentClass {
  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment, #670da93e-0b8c-46f0-8ab2-01de4ea8ebdb#, "Paper");
  }

  FooterBlock = Block {
    Paragraph {
      ParAlignment: ParAlignments.Right;
      PageNumber; "/"; PageCount;
    }
  };

  override GetContent = Block {
    PageSection {
      Footer: FooterBlock {
        Even: FooterBlock;
        First: Block;
      };

      MainTitle {
        Title;
      };

      ShowAuthorList(Authors);

      Header1 {
        Abstract.Title
      };
      Abstract.Body(Experiment);
      ShowContent(PaperSections.Introduction);
      Header1 {
        Lang.Results
      };

      ShowContent(PaperSections.WordTransformation);
      ShowContent(PaperSections.WordSegmentRelationships);
      ShowContent(PaperSections.RomanceLanguagePhylogeny);
      ShowContent(PaperSections.Discussion);
      ShowContent(PaperSections.MethodsSummary);
      ShowContent(PaperSections.DataSummary);
      ShowContent(PaperSections.ModelInference);
      ShowContent(PaperSections.DataCuration);
      ShowContent(PaperSections.Acknowledgements);
      ShowContent(PaperSections.Contributions);
    };

    ShowBibliography;
    PageSection {
      ShowFigureDoc(Experiment, Figures.TransitionRates);
    }
  };
}
//======================================================================

class SupplimentalViewClass: BaseDocumentClass {
  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment, #9082a441-cf06-4a95-b484-2cb5f5484c59#, "Supplemental Material");
  }

  HeaderBlock = Block {
    Span {
      TextCase: TextCases.AllUpper;
      Title;
    }
  };

  override GetContent = Block {
    var appendices = [
      new AppendixClass(Lang.PartitionRules, Experiment.Rule.ShowPartitions),
    ];

    PageSection {
      Header: HeaderBlock {
        Distance: 0.125 inches;
        MarginT: 0.125 inch;
        Even: HeaderBlock;
        First: Block;
      };

      MainTitle {
        Title;
      };
      ShowAuthorList(Authors);

      ShowContent(PaperSections.Introduction);
      ShowContent(PaperSections.Methods);
      ShowContent(PaperSections.Conclusion);
    };

    ShowBibliography;
    ShowAppendix(each appendices);
  };
}
//======================================================================

class ExperimentViewClass: BaseDocumentClass {
  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment, #971c3e2a-d5f9-457e-871b-465ce475a150#, "Experiment");
  }

  ShowComparison = Block {
    Style.ShowTree("Commonly Accepted Romance Tree", null, LanguageBranches.Romance, Lang.Years);
    (each Trial.Experiments).ShowExperiment;
  };

  override GetContent = Block {
    var appendices = [
      new AppendixClass(Lang.FunctionalLoad, Experiment.ShowFunctionalLoad),
      new AppendixClass("Experimental Runs", ShowComparison),
      new AppendixClass(Lang.UniqueSegments, SegmentDisplay.ShowSegmentAssignments(Experiment.Data)),
      new AppendixClass(Lang.PartitionRules, Experiment.Rule.ShowPartitions),
    ];

    PageSection {
      AppendixTitle {
        Title;
      };
      AppendixRow(each appendices);
    };
    ShowAppendix(each appendices);
  };
}
//======================================================================

class DiagnosticsViewClass: BaseDocumentClass {
  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment, #ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
  }

  ShowSegmentTables = Block {
    SegmentSetClass set = new(512);
    MatchingVowels.ShowTable(Data, set);
    MatchingConsonants.PulmonicTable.ShowTable(Data, set);
    MatchingConsonants.NonPulmonicTable.ShowTable(Data, set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(Data, set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(Data, set);
    MatchingOther.ShowTable(Data, set);
  };

  override GetContent = Block {
    var appendices = [
      new AppendixClass("Cognate Coverage", Experiment.ShowCognateCoverage),
      new AppendixClass("Concept Groups", SegmentDisplay.ShowConceptGroups(Data)),
      new AppendixClass("Symbols", ShowSymbols),
      new AppendixClass("Words containing each segment", SegmentDisplay.ShowWordsForEachSegment(Data)),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowWordsByLanguage(Data)),
      new AppendixClass("Segment Groups", ShowSegmentTables),
      new AppendixClass("Euler Feature Diagram", new EulerDiagramClass().FeatureChart(Data)),
      new AppendixClass(Lang.IPAFullName, SegmentDisplay.SegmentTable(Data)),
      new AppendixClass("Feature Tree", SegmentTree.ShowTree(Data)),
      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new AppendixClass(Lang.Languages, SegmentDisplay.ShowLanguageDetails(Data)),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable(10 pts, Data)),
    ];

    ShowAppendix(each appendices);
  };
}
//======================================================================

class ConfigurationViewClass: BaseDocumentClass {
  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment, #7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Configuration File");
  }

  override GetContent = Block {
    var appendices = [
      new AppendixClass(Name, new ConfigFileClass(Experiment, Experiment.MainRun).Show),
//      new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
    ];

    ShowAppendix(each appendices);
  };
}
//======================================================================

class AlignmentViewClass: BaseDocumentClass {
  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment, #a14658e4-26f7-4eab-87b7-4f486035103b#, "Alignments");
  }

  override GetContent = Block {
    var chart = new AlignmentChartClass(Experiment);
    chart.ShowChart(Extent.Size);
    PageBreak;
    chart.ShowAll;
  };
}
//======================================================================



