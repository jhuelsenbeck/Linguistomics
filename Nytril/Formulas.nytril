using Format, Style, Defs, Equations, Units;
//======================================================================

BranchFormula(n) {
  var t = 1;
  n = n*2 - 3;
  while (n > 1) {
    if (n mod 2 == 1)
      t *= n;
    --n;
  }
  return t;
}

BranchMinus(n) = Equation {2 NumLanguages Minus n};

MaxBranches = BranchMinus(2);
MaxBranch   = BranchMinus(3);
//======================================================================

namespace sym {
  i     = Classical "i";
  ii    = Classical "ii";
  ij    = Classical "ij";
  j     = Classical "j";
  r     = Classical "r";
  n     = Classical "n";
  q     = Extra "q";
  qij   = sym.q sub sym.ij;
  qii   = sym.q sub sym.ii;
  ni    = sym.n sub sym.i;
  D(x)  = Span {Classical Italic "d"; x};
  theta = Span {Style.GreekFamily; Italic; "θ"};
}

Ith = Span {sym.i; "th"};

Summation = Nary {
  Operator: Tex.sum;
};

Integral = Nary {
  Operator: Tex.int;
};

InBraces   = HBox {BracketLR: Brackets.Curly};
InParens   = HBox {BracketLR: Brackets.Round};
InBrackets = HBox {BracketLR: Brackets.Square};

CommaList = Span {
  Separator: CommaSpace;
};

Arguments = InParens {
  Separator: CommaSpace;
};

TextList = CommaList {
  LastSeparator: " {0} "(Lang.And);
};

EllipsisList = CommaList {
  LastSeparator: Span {CommaSpace; Tex.ldots; CommaSpace};
};

ProductList = Span {
  Separator: Times;
  LastSeparator: Times Tex.ldots Times;
};

SampledLanguages(n) = Equation {
  NumLanguages;
  Equals;
  n;
};

TipLabelNumbers = Equation {
  EllipsisList {
    1; 2; NumLanguages;
  }
};

TipLastLabel = Equation {
  2 NumLanguages Minus 1;
};

TipLabelInterior = Equation {
  EllipsisList {
    NumLanguages Plus 1;
    NumLanguages Plus 2;
    TipLastLabel;
  }
};

NodeIndex = Equation {
  sym.i;
};

AncestorNode(i) = Equation {
  Classical Tex.sigma;
  InParens {
    i;
  };
};

//======================================================================

Condition = HBox {
  Separator: Tex.vert;
};

//======================================================================

namespace Defs {
  DefClass Phylogeny               = new(#307ce909-f048-4a73-bc64-45f876fc661a#, Tex.Psi GreekFamily , "Phylogeny", "The (possibly unknown) relationship between entities resulting from an evolutionary tree");
  DefClass Topology                = new(#8e8c02ac-3f24-4ae2-837d-7c807b313956#, Tex.tau GreekFamily, "Tree topology", "Information on the relationships of the languages");
  DefClass SubstitutionRate        = new(#04322008-770d-4b3f-8241-88e38317047c#, Tex.mu GreekFamily, "Substitution rate", "The rate at which the language changes");
  DefClass NumLanguages            = new(#a0899195-acf6-40a0-8578-9ea88cc81044#, Extra "N", "Sampled languages", "The number of languages in a sample");
  DefClass ExpectedEvents          = new(#7095d7ae-44a8-4b30-bd2c-cefa28c48ea9#, Tex.nu GreekFamily, "Expected events", "The expected number of evolutionary events that occurred between two languages");
  DefClass Time                    = new(#c32a5efb-f18a-4b9f-9308-b378e9a652bd#, Classical "t", "Past times", "Times of branch events");
  DefClass SegmentalAlignment      = new(#f9325799-863b-459b-94c0-d119367ab196#, Bold "A", "Segmental alignment", "Constructed by combining the word segment information for the languages of interest with information on the homology of the segments");
  DefClass SegmentalInfo           = new(#3bd5d33a-9ea7-4f50-9e4a-ac030af87091#, Bold "S", "Segmental information", "Information on the homology of the segments");
  DefClass Segment                 = new(#2e02739b-37ba-4e12-b1a1-9741d9dc3a12#, Bold "s", "Segment", "Linguistic segment");
  DefClass ISegment                = new(#0e1f8bcd-f299-4852-a98c-5031c53e1b72#, Segment sub sym.i, "ith segment", "");
  DefClass HomologyMap             = new(#8b2c537a-0161-47ab-8376-aa2cfd3e5377#, Bold "H", "Homology map", "The map describing the alignment of the segments");
  DefClass RateMatrix              = new(#a8a039e6-63af-4496-bb50-22e5bdf5d312#, Bold Classical "Q", "Rate Matrix", "");
  DefClass RateMatrixScale         = new(#c19ebb53-371c-460e-adf0-86e960231174#, Extra Italic Tex.beta, "Rate matrix scaling factor", "Scales the rate matrix such that the average rate of segmental substitution is one");
  DefClass StateProbability        = new(#4d420b31-d22f-4915-8ae8-15f2f4bbb87d#, Bold "P", "Probability", "The probability the process ends in certain state");
  DefClass MarginalLikelihood      = new(#c2f230d4-4050-4ee3-98b6-ec1c52405ce5#, Extra "P", "Marginal Likelihood", "The probability of an event ocurring");
  DefClass EquilibriumDistribution = new(#37149ed6-e98a-431c-b40d-7069c0a8c7ca#, Tex.pi GreekFamily , "Equilibrium distribution", "");
  DefClass InsertionRate           = new(#1a94ba3d-d7da-4634-bbf6-88b03d84cffc#, Tex.lambda GreekFamily , "Segment insertion rate", "Rate of segment insertion");
  DefClass DeletionRate            = new(#0c0d91ab-e586-451e-8519-74bead5be54d#, Tex.mu GreekFamily , "Rate of segment deletion", "");
  DefClass WordLength              = new(#5018b4ef-62b3-47fe-8086-64802e6f5a63#, Classical "n", "Word length", "Number of segments in a word");
  DefClass RateParameter           = new(#909d6802-f159-4c23-9467-fd848d6e3e3c#, Classical "r", "Rate parameter", "");
  DefClass RateMatrixParams        = new(#d5d8bf9d-088e-420c-8c2f-56fd1fb73071#, sym.theta, "Rate parameters", "Parameters associated with the rate matrix");
  DefClass NewValueProposal        = new(#ba307fd0-0546-459c-9f34-7e624f72015c#, Span {sym.theta; Tex.prime}, "Proposal", "New value proposal");
  DefClass ProbProposal            = new(#cdd0c1f4-55fe-4c2d-9852-9a1d8387e821#, sym.q, "Proposal probability", "Probability of new proposal");
  DefClass RandomNumber            = new(#daf62f51-5846-41dd-b56a-768d4c7d0bd5#, Classical "u", "Random number", "");
  DefClass ProbOfAccepting         = new(#031c7f83-937c-4208-88d2-a843019be1c5#, Classical "R", "Acceptance probability", "Probability of accepting a proposed value");
  DefClass Model                   = new(#424c092b-4204-4be4-a54b-153d609d39a7#, Span {TextFamily: TextFamilies.TimesNewRoman; "ℳ"}, "Model", "Mathematical model for linguistic parameters");
  DefClass BayesFactor             = new(#81d76a56-bdff-4876-8794-62d3dcff6346#, Extra "BF", "Bayes Factor", "A numerical factor related to the quality of the model fit");
  DefClass Unknown                 = new(#b201f529-2e31-4ccd-927c-3bcd5dbef524#, Classical "X", "Unknown", "");
  DefClass PossibleRootedTrees     = new(#7a776122-8f31-49ff-94e0-e8124fa9b5b5#, Span {TextFamily: TextFamilies.TimesNewRoman; Bold; "ℬ"}, "Possible rooted trees", "");
  DefClass BN                      = new(#c7fecde1-fcb0-4b68-9bc2-69622b63a7f6#, Span {PossibleRootedTrees; InParens {NumLanguages}}, "Possible rooted trees as a function of the number of languages", "");
  DefClass FunctionF               = new(#431c5ec9-7a2b-433d-8bff-b4d9bfa37704#, Classical "f", "Function");
  DefClass EulerNumber             = new(#431c5ec9-7a2b-433d-8bff-b4d9bfa37704#, Classical "e", "Root of the natural log or Euler number");
  DefClass DirichletRate           = new(#aba00649-6075-4f81-860d-8d92dede6ca8#, "r", "Dirichlet Rate", "");
}

//======================================================================

EquationClass Equations.UnknownTree = new(#c070ccfe-ee29-41be-9064-6dc6ccaa5995#, "Unknown Tree") {
  Formula: Equation {
     Phylogeny;
     Equals;
     Arguments {
       Topology;
       ExpectedEvents;
     }
  };
};

EquationClass Equations.LiklihoodFunction = new(#4a58876a-8295-4ea2-830a-bc1f39cd1634#, "Liklihood Function") {
  Formula: Equation {
    FunctionF;
    Arguments {
      Condition {SegmentalInfo; Phylogeny};
      InsertionRate;
      DeletionRate;
      RateMatrixParams;
    };
  };
};

EquationClass Equations.MarginalLiklihood = new(#311eaf7f-7d9e-4569-868f-eda0cc0ac959#, "Marginal Liklihood") {
  Formula: Equation {
    FunctionF;
    Arguments {
      SegmentalInfo;
    };
  };
};

EquationClass Equations.BayesianEstimation = new(#a6660b63-6222-4967-93f4-589f47b986ce#, "Bayesian Estimation") {
  Formula: Equation {
    FunctionF;
    Arguments {
      Phylogeny;
      InsertionRate;
      DeletionRate;
      Condition{RateMatrixParams; SegmentalInfo};
    };
    Equals;
    Fraction {
      LiklihoodFunction;
      Span {
        FunctionF;
        Arguments {
          Phylogeny;
          InsertionRate;
          DeletionRate;
          RateMatrixParams;
        };
      };

      Span {
        FunctionF;
        Arguments {
          SegmentalInfo;
        };
      };
    };
  };
};

EquationClass Equations.ExpectedEventsPerBranch = new(#64e8f644-cd4b-45f6-ba4a-8c947a356458#, "Expected Events per Branch") {
  Formula: Equation {
    ExpectedEvents;
    Equals;
    InParens {
      Time sub (Tex.sigma sub sym.i);
      Minus;
      Time sub sym.i;
    };
    Tex.times;
    SubstitutionRate sub sym.i;
  };
};

EquationClass Equations.PossibleTrees = new(#38134545-1719-4b8b-9af4-cb18eab9d09e#, "Possible Rooted Trees") {
  Formula: Equation {
    BN;
    Equals;
    InParens {MaxBranch};
    "!!";
    Equals;
    ProductList {
      1; 3; MaxBranch;
    };
  };
};

EquationClass Equations.InDelDistribution = new(#db4b99ec-6725-4b11-b873-f8ab6698ac16#, "Indel Distribution") {
  Formula: Equation {
    RateParameter;
    Equals;
    Negative;
    Summation {
      Lower: sym.i;
      InParens {sym.ni; sym.qii};
      Plus;
      WordLength;
      InsertionRate;
      Plus;
      InParens {WordLength; Minus; 1};
      SubstitutionRate;
    };
  };
};

EquationClass Equations.InDelProbability = new(#01728f12-67b4-4bd0-ab13-e4124d4ac7ae#, "In-Del Probability") {
  Formula: Equation {
    Negative;
    Summation {
      Lower: sym.i;
      InParens {sym.ni; sym.qii};
    };
    Divide;
    RateParameter;
  };
};

EquationClass Equations.ProbOfAcceptingProposal = new(#f85ca0eb-aa0b-49ac-a97c-58f95f15b181#, "Probability of accepting the proposed value") {
  Formula: Equation {
    ProbOfAccepting;
    Equals;
    "min";
    InParens {
      "1, ";
      Fraction {
        FunctionF; Arguments {
          Condition{Unknown; NewValueProposal};
        };

        FunctionF; Arguments {Condition {Unknown; RateMatrixParams}};
      };
      Times;
      Fraction {
        FunctionF; Arguments {NewValueProposal};
        FunctionF; Arguments {RateMatrixParams};
      };
      Times;
      Fraction {
        NewProposal(NewValueProposal, RateMatrixParams);
        NewProposal(RateMatrixParams, NewValueProposal);
      };
    };
  };
};

EquationClass Equations.ModelComparison = new(#99c4daca-c075-42c3-beb8-d89b4148d9a4#, "Model Comparison") {
  Formula: Equation {
    BayesFactor sub 12;
    Equals;
    Fraction {
      PSM(1);
      PSM(2);
    }
  };
};

EquationClass Equations.MarginalLikelihoodParameters = new(#a25bcd04-7841-4a0d-9859-acf4ea460c71#, "Marginal Likelihood") {
  Formula: Equation {
    Prob(SegmentalInfo);
    Equals;
    Summation {Lower: Topology};
    IntegrateOver(ExpectedEvents);
    IntegrateOver(RateMatrixParams);
    IntegrateOver(InsertDelete(Tex.lt));
    ProbVar(SegmentalInfo);
    Space;
    ProbALL;
    FD(ExpectedEvents);
    FD(RateMatrixParams);
    FD(InsertionRate);
    FD(DeletionRate);
  };
};

EquationClass Equations.MarginalizationOverAlignments = new(#666bdb91-49be-408a-af3e-fe7ca5c7aebb#, "Marginalization Over Alignments") {
  Formula: Equation {
    ProbVar(SegmentalInfo);
    Equals;
    Summation {
      Lower: HomologyMap;
      ProbVar(SegmentalAlignment);
      Space;
      Prob(CommaList {Condition{SegmentalAlignment; HomologyMap}; SegmentalInfo});
      Space;
      Prob(HomologyMap);
    };
  };
};

EquationClass Equations.PosteriorProbabilityDistribution = new(#5294924e-b618-4073-adf4-bf782cc45e65#, "Posterior Probability Distribution") {
  Formula: Equation {
    Prob(CommaList {
      Topology;
      ExpectedEvents;
      RateMatrixParams;
      InsertionRate;
      Condition{DeletionRate; SegmentalInfo};
    });
    Equals;
    Fraction {
      Span {
        ProbVar(SegmentalInfo);
        Space;
        ProbALL;
      };
      Prob(SegmentalInfo);
    }
  };
};

BuildGTRMatrix(states) = MatrixBlock {
  HAlign: HAligns.Center;
  BracketLR: Brackets.FlatRound;

  foreach (var s1 in states) {
    Row {
      foreach (var s2 in states) {
        if (s1 == s2)
          Chars.EnDash;
        else Span {
          Defs.RateParameter sub (s1.Compare(s2) < 0 ? Span {s1; s2} : Span{s2; s1});
          Defs.EquilibriumDistribution sub s2;
        };
      }
    }
  }
};

EquationClass Equations.GTR4 = new(#c593d288-f338-484d-9fca-b7d93e3c55be#, "4-State GTR Model") {
  Formula: Equation {
    RateMatrix;
    Equals;
    BuildGTRMatrix(["A", "C", "G", "T"]);
  };
};

EquationClass Equations.BayesTheorem = new(#7a57afd3-1293-4a75-8518-9ce32bbe9fa8#, "Bayes’ Theorem") {
  Formula: Equation {
    PPO;
    Equals;
    Fraction {
      Span {
        POP;
        Space;
        PP;
      };
      PO;
    }
  };
};

EquationClass Equations.RateChange = new(#f7a964f6-414b-4e40-9d31-e63eadf32f8f#, "Rate change") {
  Formula: Equation {
    sym.qij;
    Tex.geq;
    0;
    InParens {
      sym.i;
      Tex.neq;
      sym.j;
    }
  };
};

EquationClass Equations.RatesOfChangeBetweenStates = new(#a7b02873-4fe5-47b8-9e3f-b594aef21fc3#, "Rates of change between all pairs of states") {
  Formula: Equation {
    RateMatrix;
    Equals;
    InBraces {sym.qij};
    Equals;
    StateSection.StateMatrix;
    Space;
    RateMatrixScale;
  };
};

EquationClass Equations.DiagonalElements = new(#49b4a095-118d-4bbe-9fe3-80a5e13ddf28#, "The diagonal elements of the rate matrix") {
  Formula: Equation {
    sym.qii;
    Equals;
    Negative;
    Summation {
      Lower: Span {sym.j Tex.neq; sym.i};
      sym.qij;
    }
  };
};

EquationClass Equations.ExponentiationOfRateMatrix = new(#05e99790-f121-4640-86a9-3a818e4a6b6e#, "Exponentiation of the rate matrix") {
  Formula: Equation {
    StateProbability;
    InParens {ExpectedEvents};
    Equals;
    EulerNumber sup (Span {RateMatrix; ExpectedEvents});
  }
};

EquationClass Equations.RateMatrixSolution = new(#7c820a26-5656-499b-93ea-047ad3513826#, "Rate matrix solution") {
  Formula: Equation {
    EquilibriumDistribution;
    RateMatrix;
    Equals;
    Bold 0;
  };
};

EquationClass Equations.EventInsertionProbability = new(#d2cd0ffe-34e5-4fab-a160-a03131651bca#, "Event insertion probability") {
  Formula: Equation {
    WordLength;
    InsertionRate;
    Divide;
    RateParameter;
  };
};

EquationClass Equations.EventDeletionProbability = new(#6b805317-a4b0-4f59-919c-0c2e21cc6bcd#, "Event deletion probability") {
  Formula: Equation {
    InParens {
      WordLength;
      Minus;
      1;
    };
    DeletionRate;
    Divide;
    RateParameter;
  };
};

//======================================================================



