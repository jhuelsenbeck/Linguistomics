using Format, Units, IO;

//======================================================================

class DiagnosticsViewClass: DocumentClass {
  DataSetClass Data;

  Constructor(DataSetClass data) {
    super.Constructor(#ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
    Data = data;
  }

  ShowSegmentTables = Block {
    SegmentSetClass set = new(512);
    MatchingVowels.ShowTable(Data, set);
    MatchingConsonants.PulmonicTable.ShowTable(Data, set);
    MatchingConsonants.NonPulmonicTable.ShowTable(Data, set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(Data, set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(Data, set);
    MatchingOther.ShowTable(Data, set);
  };

  ShowCognateCoverage = Block {
    Style.Header1 {
      "By Language";
    };

    var size = new SizeClass(ExtentWidth, 3 inches);
    Chart {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      Size: size;
      ValueLabel: "%";

      XAxis: ChartAxis {
        (each Data.Taxa).Language;
      };
      ValueAxis: ChartAxis;

      ChartSeries {
        foreach (var t in Data.Taxa)
          Data.Coverage(t) * 100.0;
      };
    };
    Paragraph;
    Style.Header1 {
      "By Number of Languages";
    };

    var coverage = Data.CoverageByLanguages;
    Chart {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      Size: size;

      ValueLabel: Lang.Cognates {
        Transform: Rotate(90 degrees);
        TransformFit: true;
      };
      ValueAxis: ChartAxis;

      XAxis: ChartAxis {
        0..<coverage.Length step 1;
      };
      XLabel: "Languages Included";

      ChartSeries {
        foreach (var c in coverage)
          c;
      };
    };
  };

  override GetDocument = Document {
    TextHeight: 9 pts;

    AppendixClass[] appendices = [
      new("Cognate Coverage", ShowCognateCoverage),
      new AppendixFigureClass(Figures.SegmentTransitionCounts),
      new("Concept Groups", SegmentDisplay.ShowConceptGroups(Data)),
      new("Words containing each segment", SegmentDisplay.ShowWordsForEachSegment(Data)),
      new("Word Lists by Language", DisplayWords.ShowWordsByLanguage(Data)),
      new("Segment Groups", ShowSegmentTables),
      new(Lang.IPAFullName, SegmentDisplay.SegmentTable(Data)),
      new(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new(Lang.Languages, SegmentDisplay.ShowLanguageDetails(Data)),
      new(Lang.ConceptsUsed, AllWords.ShowTable(10 pts, Data)),
//      new("Euler Feature Diagram", new EulerDiagramClass().FeatureChart(Data)),
    ];

    Style.ShowAppendix(this, each appendices);
  };
}
//======================================================================

class ConfigurationViewClass: DocumentClass {
  ExperimentClass Experiment;

  Constructor(ExperimentClass experiment) {
    super.Constructor(#7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Configuration File");
    Experiment = experiment;
  }

  override GetDocument = Document {
    TextHeight: 9 pts;

    AppendixClass[] appendices = [
      new(Name, new ConfigFileClass(Experiment, Experiment.MainRun).Show),
//      new(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
    ];

    Style.ShowAppendix(this, each appendices);
  };
}

//======================================================================

CreateArchiveFile(DataSetClass data) = TextBlock {
  "using Format, WordGroups;";
  "namespace Concepts;";

  var first = Empty;
  var any   = false;

  foreach (var cognate in data.UsedCognates) {
    var concept = cognate.Concept;
    var cname   = concept.Name;
    if (first != cname) {
      if (any)
        "}";

      Empty;
      Span {
        "namespace ";
        concept.Name;
        " {";
      };
      TextBlock {
        IndentSpace: 2;
        Span {"Confidence = "; concept.Confidence; ";"};
        Span {"WordType   = WordTypes."; concept.WordType.GetSourceName; ";"};
        Span {"WordGroup  = ";
          Span {
            Separator: Space;
            (each concept.WordGroup).GetSourceName;
          };
          ";";
        };
        Empty;
      };
    }

    TextBlock {
      IndentSpace: 2;

      Empty;
      Span {
        "namespace ";
        cognate.Name;
        " {";
      };

      TextBlock {
        IndentSpace: 2;
        foreach (var word in cognate.Words) {
          Span {
            word.Language.Name;

            Space * (data.MaxLanguageName - word.Language.Name.Length);
            " = ";
            Quote;
            word.Text;
            Quote;
            ";";
          }
        }
      }
      "}";
    };
    any   = true;
    first = cname;
  }
  if (any)
    "}";
};

//======================================================================


