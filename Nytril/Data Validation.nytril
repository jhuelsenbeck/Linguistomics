using Format, Units, IO;

//======================================================================

class DiagnosticsViewClass: DocumentClass {
  DataSetClass         Data;
   SegmentDisplayClass Display;

  Constructor(DataSetClass data) {
    super.Constructor(#ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
    Data    = data;
    Display = new(data);
  }

  ShowSegmentTables = Block {
    SegmentSetClass set = new(512);
    MatchingVowels.ShowTable(Display.DisplaySegments, set);
    MatchingConsonants.PulmonicTable.ShowTable(Data, set);
    MatchingConsonants.NonPulmonicTable.ShowTable(Data, set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(Data, set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(Data, set);
    MatchingOther.ShowTable(Display.DisplaySegments, set);
  };

  ShowCognateCoverage = Block {
    Style.Header1 {
      "By Language";
    };

    var size = new SizeClass(ExtentWidth, 3 inches);
    Chart(size.Width, size.Height) {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      ValueLabel: "%";

      XAxis: ChartAxis {
        (each Data.Taxa).Language;
      };
      ValueAxis: ChartAxis;

      ChartSeries {
        foreach (var t in Data.Taxa)
          Data.Coverage(t) * 100.0;
      };
    };
    Paragraph;
    Style.Header1 {
      "By Number of Languages";
    };

    var coverage = Data.CoverageByLanguages;
    Chart(size.Width, size.Height) {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;

      ValueLabel: Lang.Cognates {
        Transform: Rotate(90 degrees);
        TransformFit: true;
      };
      ValueAxis: ChartAxis;

      XAxis: ChartAxis {
        0..<coverage.Length step 1;
      };
      XLabel: "Languages Included";

      ChartSeries {
        foreach (var c in coverage)
          c;
      };
    };
  };

  override GetDocument = Document(new(new(0.5 inches, 0.75 inches, 0.5 inches, 0.5 inches))) {
    TextHeight: 9 pts;

    AppendixClass[] appendices = [
      new("Cognate Coverage", ShowCognateCoverage),
      new(Lang.UniqueSegments, Display.ShowSegmentAssignments),
      new AppendixFigureClass(Figures.SegmentTransitionCounts),
      new("Concept Groups", Display.ShowConceptGroups),
      new("Words containing each segment", Display.ShowWordsForEachSegment),
      new("Word Lists by Language", DisplayWords.ShowWordsByLanguage(Data)),
      new("Segment Groups", ShowSegmentTables),
      new(Lang.IPAFullName, Display.IPASegmentTable),
      new(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new(Lang.Languages, Display.ShowLanguageDetails),
      new(Lang.ConceptsUsed, AllWords.ShowTable(10 pts, Data)),
//      new("Euler Feature Diagram", new EulerDiagramClass().FeatureChart(Data)),
    ];

    Style.ShowAppendix(this, each appendices);
  };
}
//======================================================================

class ConfigurationViewClass: DocumentClass {
  DataSetClass Data;

  Constructor(DataSetClass data) {
    super.Constructor(#7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Configuration File");
    Data = data;
  }

  override GetDocument = Document {
    TextHeight: 9 pts;

    AppendixClass[] appendices = [
      new(Name, new ConfigFileClass(Data, Data.MainRun).Show),
    ];

    Style.ShowAppendix(this, each appendices);
  };
}

//======================================================================

class WordViewClass: DocumentClass {
  DataSetClass     Data;
  PartitionClass[] Partitions;

  Constructor(DataSetClass data, PartitionClass[] partitions) {
    super.Constructor(#a12b9731-b78e-49e1-986f-a72af5d1ec25#, "Word File");
    Data       = data;
    Partitions = partitions;
  }

  ShowUniqueSegments = Span {
    Style.Variable("Segments"); " = [";
    Span {
      Separator: CommaSpace;
      ShowString(each ((each Data.UniqueSegments).Ipa));
    };
    "];";
  };

  ShowLanguages = TextBlock {
    Span {Style.Variable("LanguageSet"); " = [";};
    TextBlock {
      IndentSpace: 2;

      foreach (var l in Data.LanguageSet) {
        Span {
          Style.Variable("Languages");
          ".";
          Style.Variable(l.Name);
          if (each1 < Data.LanguageSet.Length)
            CommaSpace;
        }
      }
    };
    "];";
  };

  ShowSegmentIndices(SegmentClass[] segments) = Span {
    "[";
    Span {
      Separator: CommaSpace;
      (each segments).Index;
    };
    "]";
  };

  ShowPartitions = TextBlock {
    Span {
      Style.Variable("PartitionInfoClass"); "[] "; Style.Variable("Partitions"); " = [";
    };

    foreach (var p in Partitions) {
      TextBlock {
        Span {
          "  "; Style.Keyword("new"); "(";
          ShowString(p.Name);
          ", ";
          ShowSegmentIndices(p.Segments);
          "),"
        }
      };
    }
    "];";
  };

  ShowVar(name, value) = Span {
    Style.Variable(name); " = "; value; ";";
  };

  ShowVariable(value) = ShowVar(value.GetVariableName, value);

  ShowVariables = TextBlock {
    Style.NameSpace("Info");
    TextBlock {
      IndentSpace: 2;
      ShowVar("WordCutoff", Data.WordCutoff);
    };
    "}";
  };

  override GetDocument = Document {
    TextHeight: 9 pts;

    TextBlock {
      Span {
        Style.Keyword("using ");
        "Format, WordGroups;";
      };
      Empty;
      ShowVariables;
      Empty;

      ShowUniqueSegments;
      Empty;
      ShowLanguages;
      Empty;
      ShowPartitions;
      Empty;

      Style.NameSpace("Concepts");
      Empty;

      foreach (var cognate in Data.UsedCognates) {
        var concept = cognate.Concept;
        var lvector = new VectorClass(Data.LanguageSet.Length, null);

        foreach (var word in cognate.Words) {
          if (valid word.Aligned)
            lvector.SetValue(word.Language.LangIndex, word);
        }

        Span {
          Style.Variable(concept.Name);
          ".";
          Style.Variable(cognate.Name);
          " = [";
        };

        TextBlock {
          IndentSpace: 2;
          foreach (var word in lvector) {
            Span {
              if (valid word)
                ShowSegmentIndices(word.Aligned);
              else
                Style.Keyword("null");
              Comma;
            }
          }
        };

        "];";
      }

      Empty;
      "}";
    };
  };
}

//======================================================================


