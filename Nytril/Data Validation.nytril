using Format, Units, IO;

DocumentClass Main.Documents.Diagnostics   = new DiagnosticsViewClass;
DocumentClass Main.Documents.Configuration = new ConfigurationViewClass;

//======================================================================

class DiagnosticsViewClass: DocumentClass {
  DataSetClass Data;

  Constructor {
    super.Constructor(#ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
    Margin = DocMetrics.DocMargin;


    // "LanguagePhonetic";
    // "LanguageTest";

    var words = ReadScript(Folders.Source FileName("LanguageSet") Extensions.Nytril);
    Data = new DataSetClass(words.Concepts, WordGroups.Swadesh100 WordGroups.Leipzig WordGroups.Swadesh207, EuroRomance, 1);
  }

  ShowSegmentTables = Block {
    SegmentSetClass set = new(512);
    MatchingVowels.ShowTable(Data, set);
    MatchingConsonants.PulmonicTable.ShowTable(Data, set);
    MatchingConsonants.NonPulmonicTable.ShowTable(Data, set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(Data, set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(Data, set);
    MatchingOther.ShowTable(Data, set);
  };

  ShowCognateCoverage = Block {
    Style.Header1 {
      "By Language";
    };
    Chart {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      Size: new SizeClass(Extent.Size.Width, 3 inches);
      ValueLabel: "%";

      XAxis: ChartAxis {
        (each Data.Taxa).Language;
      };
      ValueAxis: ChartAxis;

      ChartSeries {
        foreach (var t in Data.Taxa)
          Data.Coverage(t) * 100.0;
      };
    };
    Paragraph;
    Style.Header1 {
      "By Number of Languages";
    };

    var coverage = Data.CoverageByLanguages;
    Chart {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      Size: new SizeClass(Extent.Size.Width, 3 inches);

      ValueLabel: Lang.Cognates {
        Transform: Rotate(90 degrees);
        TransformFit: true;
      };
      ValueAxis: ChartAxis;

      XAxis: ChartAxis {
        0..<coverage.Length step 1;
      };
      XLabel: "Languages Included";

      ChartSeries {
        foreach (var c in coverage)
          c;
      };
    };
  };

  override GetDocument = DiagDocumentClass {
    var appendices = [
      new AppendixClass("Cognate Coverage", ShowCognateCoverage),
      new AppendixClass("Concept Groups", SegmentDisplay.ShowConceptGroups(Data)),
      new AppendixClass("Words containing each segment", SegmentDisplay.ShowWordsForEachSegment(Data)),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowWordsByLanguage(Data)),
      new AppendixClass("Segment Groups", ShowSegmentTables),
      new AppendixClass(Lang.IPAFullName, SegmentDisplay.SegmentTable(Data)),
      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new AppendixClass(Lang.Languages, SegmentDisplay.ShowLanguageDetails(Data)),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable(10 pts, Data)),
//      new AppendixClass("Euler Feature Diagram", new EulerDiagramClass().FeatureChart(Data)),
    ];

    Style.ShowAppendix(each appendices);
  };
}
//======================================================================

class ConfigurationViewClass: DocumentClass {
  Constructor {
    super.Constructor(#7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Configuration File");
    Margin = DocMetrics.DocMargin;
  }

  override GetDocument = DiagDocumentClass {
    var experiment = new Trial.EuropeFullExperimentClass;

    var appendices = [
      new AppendixClass(Name, new ConfigFileClass(experiment, experiment.MainRun).Show),
//      new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
    ];

    Style.ShowAppendix(each appendices);
  };
}
//======================================================================

class RunInitClass: RunClass {
  ExperimentClass Experiment;

  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment.FactId, "Create \"{0}\" data files"(experiment.Name));
    Experiment = experiment;
  }

  WordArchive = TextBlock {
    "using Format, WordGroups;";
    "namespace Concepts;";

    var first = Empty;
    var any   = false;
    var data  = Experiment.Data;

    foreach (var cognate in data.UsedCognates) {
      var concept = cognate.Concept;
      var cname   = concept.Name;
      if (first != cname) {
        if (any)
          "}";

        Empty;
        Span {
          "namespace ";
          concept.Name;
          " {";
        };
        TextBlock {
          IndentSpace: 2;
          Span {"Confidence = "; concept.Confidence; ";"};
          Span {"WordType   = WordTypes."; concept.WordType.GlobalSourceName; ";"};
          Span {"WordGroup  = ";
            Span {
              Separator: Space;
              (each concept.WordGroup).GlobalSourceName;
            };
            ";";
          };
          Empty;
        };
      }

      TextBlock {
        IndentSpace: 2;

        Empty;
        Span {
          "namespace ";
          cognate.Name;
          " {";
        };

        TextBlock {
          IndentSpace: 2;
          foreach (var word in cognate.Words) {
            Span {
              word.Language.Name;

              Space * (data.MaxLanguageName - word.Language.Name.Length);
              " = ";
              Quote;
              word.Text;
              Quote;
              ";";
            }
          }
        }
        "}";
      };
      any   = true;
      first = cname;
    }
    if (any)
      "}";
  };

  override void Execute {
    var root = Experiment.RootFolder;

    if (not FolderExists(root))
      CreateFolder(Folders.Repository root);
    (each Experiment.Models).InitFolders(Experiment);

    Write(WordArchive, root Info.WordFile);
  }

  override AskQuestion = "Overwrite configuration files for experiment \"{0}\"?"(Name);
}

//======================================================================

Main.Run = new RunInitClass(new Trial.EuropeFullExperimentClass);

//======================================================================


