using Format, Units, IO;

//======================================================================

class DiagnosticsViewClass: DocumentClass {
  DataSetClass         Data;
   SegmentDisplayClass Display;

  Constructor(DataSetClass data) {
    super.Constructor(#ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
    Data    = data;
    Display = new(data);
  }

  ShowSegmentTables = Block {
    SegmentSetClass set = new(512);
    MatchingVowels.ShowTable(Display.DisplaySegments, set);
    MatchingConsonants.PulmonicTable.ShowTable(Data, set);
    MatchingConsonants.NonPulmonicTable.ShowTable(Data, set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(Data, set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(Data, set);
    MatchingOther.ShowTable(Display.DisplaySegments, set);
  };

  ShowCognateCoverage = Block {
    Style.Header1 {
      "By Language";
    };

    var size = new SizeClass(ExtentWidth, 3 inches);
    Chart(size.Width, size.Height) {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      ValueLabel: "%";

      XAxis: ChartAxis {
        (each Data.Taxa).Language;
      };
      ValueAxis: ChartAxis;

      ChartSeries {
        foreach (var t in Data.Taxa)
          Data.Coverage(t) * 100.0;
      };
    };
    Paragraph;
    Style.Header1 {
      "By Number of Languages";
    };

    var coverage = Data.CoverageByLanguages;
    Chart(size.Width, size.Height) {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;

      ValueLabel: Lang.Cognates {
        Transform: Rotate(90 degrees);
        TransformFit: true;
      };
      ValueAxis: ChartAxis;

      XAxis: ChartAxis {
        0..<coverage.Length step 1;
      };
      XLabel: "Languages Included";

      ChartSeries {
        foreach (var c in coverage)
          c;
      };
    };
  };

  override GetDocument = Document(new(new(0.5 inches, 0.75 inches, 0.5 inches, 0.5 inches))) {
    TextHeight: 9 pts;

    AppendixClass[] appendices = [
      new("Cognate Coverage", ShowCognateCoverage),
      new(Lang.UniqueSegments, Display.ShowSegmentAssignments),
      new AppendixFigureClass(Figures.SegmentTransitionCounts),
      new("Concept Groups", Display.ShowConceptGroups),
      new("Words containing each segment", Display.ShowWordsForEachSegment),
      new("Word Lists by Language", DisplayWords.ShowWordsByLanguage(Data)),
      new("Segment Groups", ShowSegmentTables),
      new(Lang.IPAFullName, Display.IPASegmentTable),
      new(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new(Lang.Languages, Display.ShowLanguageDetails),
      new(Lang.ConceptsUsed, AllWords.ShowTable(10 pts, Data)),
//      new("Euler Feature Diagram", new EulerDiagramClass().FeatureChart(Data)),
    ];

    Style.ShowAppendix(this, each appendices);
  };
}
//======================================================================

class ConfigurationViewClass: DocumentClass {
  DataSetClass Data;

  Constructor(DataSetClass data) {
    super.Constructor(#7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Configuration File");
    Data = data;
  }

  override GetDocument = Document {
    TextHeight: 9 pts;

    AppendixClass[] appendices = [
      new(Name, new ConfigFileClass(Data, Data.MainRun).Show),
    ];

    Style.ShowAppendix(this, each appendices);
  };
}

//======================================================================

class WordViewClass: DocumentClass {
  DataSetClass     Data;
  PartitionClass[] Partitions;

  Constructor(DataSetClass data, PartitionClass[] partitions) {
    super.Constructor(#a12b9731-b78e-49e1-986f-a72af5d1ec25#, "Word File");
    Data       = data;
    Partitions = partitions;
  }

  override GetDocument = Document {
    TextHeight: 9 pts;
    CreateArchiveFile;
  };

  Keyword(text) = Span {
    Style.KeywordFormat;
    text;
  };

  Variable(text) = Span {
    TextColor: new ColorClass(43, 145, 175);
    text;
  };

  ShowUniqueSegments = Span {
    Variable("Segments"); " = [";
    Span {
      Separator: CommaSpace;
      ShowString(each ((each Data.UniqueSegments).Ipa));
    };
    "];";
  };

  ShowSegmentIndices(SegmentClass[] segments) = Span {
    "[";
    Span {
      Separator: CommaSpace;
      (each segments).Index;
    };
    "]";
  };

  ShowPartitions = TextBlock {
    Span {
      Variable("PartitionInfoClass"); "[] "; Variable("Partitions"); " = [";
    };

    foreach (var p in Partitions) {
      TextBlock {
        Span {
          "  "; Keyword("new"); "(";
          ShowString(p.Name);
          ", ";
          ShowSegmentIndices(p.Segments);
          "),"
        }
      };
    }
    "];";
  };

  ShowVariable(value) = Span {
    Variable(value.GetVariableName); " = "; value; ";";
  };

  ShowVariables = TextBlock {
    Keyword("namespace ") Variable("Info") " {";
    TextBlock {
      IndentSpace: 2;
      ShowVariable(Info.Generations);
      ShowVariable(Info.PreBurn);
    };
    "}";
  };

  CreateArchiveFile = TextBlock {
    Span {
      Keyword("using ");
      "Format, WordGroups;";
    };
    Empty;
    ShowVariables;
    Empty;

    ShowUniqueSegments;
    Empty;
    ShowPartitions;
    Empty;

    var first = Empty;
    var any   = false;

    foreach (var cognate in Data.UsedCognates) {
      var concept = cognate.Concept;
      var cname   = concept.Name;
      if (first != cname) {
        if (any)
          "}";

        Empty;
        Span {
          Keyword("namespace ");
          Variable("Concepts"); ".";
          Variable(concept.Name);
          " {";
        };
        TextBlock {
          IndentSpace: 2;
          Span {Variable("Confidence"); " = "; concept.Confidence; ";"};
          Span {Variable("WordType"); "   = WordTypes."; concept.WordType.GetSourceName; ";"};
          Span {Variable("WordGroup"); "  = ";
            Span {
              Separator: Space;
              (each concept.WordGroup).GetSourceName;
            };
            ";";
          };
          Empty;
        };
      }

      TextBlock {
        IndentSpace: 2;

        Empty;
        Span {
          Keyword("namespace ");
          Variable(cognate.Name);
          " {";
        };

        TextBlock {
          IndentSpace: 2;
          foreach (var word in cognate.Words) {
            if (valid word.Segments) {
              Span {
                Variable(word.Language.Name);
                Space * (Data.MaxLanguageName - word.Language.Name.Length);
                " = ";
                ShowSegmentIndices(word.Segments);
                ";";
              }
            }
          }
        };

        "}";
      };
      any   = true;
      first = cname;
    }
    if (any)
      "}";
  };
}

//======================================================================


