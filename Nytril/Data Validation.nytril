using Format, Units;

include "Standard Includes";
include "Tables";
//include "LanguagePhonetic";
//include "LanguageTest";
include "LanguageSet";

Main.Documents = [
  new DiagnosticsViewClass,
  new ConfigurationViewClass,
];

//======================================================================

class DiagnosticsViewClass: BaseDocumentClass {
  DataSetClass Data;

  Constructor {
    super.Constructor(#ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
    Data = new DataSetClass(WordGroups.Swadesh100 WordGroups.Leipzig WordGroups.Swadesh207, Trial.Romance, 1);
  }

  ShowSegmentTables = Block {
    SegmentSetClass set = new(512);
    MatchingVowels.ShowTable(Data, set);
    MatchingConsonants.PulmonicTable.ShowTable(Data, set);
    MatchingConsonants.NonPulmonicTable.ShowTable(Data, set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(Data, set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(Data, set);
    MatchingOther.ShowTable(Data, set);
  };

  ShowCognateCoverage = Block {
    Style.Header1 {
      "By Language";
    };
    Chart {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      Size: new SizeClass(Extent.Size.Width, 3 inches);
      ValueLabel: "%";

      XAxis: ChartAxis {
        (each Data.Taxa).Language;
      };
      ValueAxis: ChartAxis;

      ChartSeries {
        foreach (var t in Data.Taxa)
          Data.Coverage(t) * 100.0;
      };
    };
    Paragraph;
    Style.Header1 {
      "By Number of Languages";
    };

    var coverage = Data.CoverageByLanguages;
    Chart {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      Size: new SizeClass(Extent.Size.Width, 3 inches);

      ValueLabel: Lang.Cognates {
        Transform: Rotate(90 degrees);
        TransformFit: true;
      };
      ValueAxis: ChartAxis;

      XAxis: ChartAxis {
        0..<coverage.Length step 1;
      };
      XLabel: "Languages Included";

      ChartSeries {
        foreach (var c in coverage)
          c;
      };
    };
  };


  override GetContent = Block {
    var appendices = [
      new AppendixClass("Cognate Coverage", ShowCognateCoverage),
      new AppendixClass("Concept Groups", SegmentDisplay.ShowConceptGroups(Data)),
      new AppendixClass("Words containing each segment", SegmentDisplay.ShowWordsForEachSegment(Data)),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowWordsByLanguage(Data)),
      new AppendixClass("Segment Groups", ShowSegmentTables),
      new AppendixClass(Lang.IPAFullName, SegmentDisplay.SegmentTable(Data)),
      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new AppendixClass(Lang.Languages, SegmentDisplay.ShowLanguageDetails(Data)),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable(10 pts, Data)),
//      new AppendixClass("Euler Feature Diagram", new EulerDiagramClass().FeatureChart(Data)),
    ];

    Style.ShowAppendix(each appendices);
  };
}
//======================================================================

class ConfigurationViewClass: BaseDocumentClass {
  Constructor {
    super.Constructor(#7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Configuration File");
  }

  override GetContent = Block {
    var experiment = new Trial.EuropeFullExperimentClass;

    var appendices = [
      new AppendixClass(Name, new ConfigFileClass(experiment, experiment.MainRun).Show),
//      new AppendixClass(Lang.NytrilSourceCode, Style.SourceFile(each System.SourceList)),
    ];

    Style.ShowAppendix(each appendices);
  };
}
//======================================================================

class RunInitClass: RunClass {
  ExperimentClass Experiment;

  Constructor(ExperimentClass experiment) {
    super.Constructor(experiment.FactId, "Create \"{0}\" data files"(experiment.Name));
    Experiment = experiment;
  }

  override void Execute {
    Experiment.InitFolders;
  }

  override AskQuestion = "Overwrite configuration files for experiment \"{0}\"?"(Name);
}

//======================================================================

Main.Run = new RunInitClass(new Trial.EuropeFullExperimentClass);

//======================================================================


