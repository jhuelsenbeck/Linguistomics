using Format, Units, IO;

//======================================================================

class SearchDataClass: FactClass {
  field string WordsContaining;

  Constructor {
    super.Constructor(#2298c73f-87fb-4b36-92de-0c3582b94f6c#);
    ReadFromStorage;
  }
}

//======================================================================

class WordsContainingClass: ActionClass {
  var SearchDataClass Data;

  Constructor(SearchDataClass data) {
    super.Constructor(Actions.RunQuery, null, "Words Containing");
    Data = data;
  }

  override GetQuery {
    if (Data.WordsContaining is valid) {
      return MatchAny(WordClass) {
        MatchAny(SegmentClass) {
          Ipa: Data.WordsContaining;
        };
      };
    }

    return null;
  }
}

//======================================================================

class DiagnosticsViewClass: DocumentClass {
  var DataSetClass        Data;
  var SegmentDisplayClass Display;
  var SearchDataClass     SearchData;

  Constructor(DataSetClass data) {
    super.Constructor(#ded5b32d-f925-4ca0-b6b6-cfec8100fd42#, "Diagnostics");
    Data       = data;
    Display    = new(data);
    SearchData = new;
  }

  ShowSegmentTables = Block {
    SegmentSetClass set = new(512);
    MatchingVowels.ShowTable(Display.DisplaySegments, set);
    MatchingConsonants.PulmonicTable.ShowTable(Data, set);
    MatchingConsonants.NonPulmonicTable.ShowTable(Data, set);
    MatchingConsonants.PulmonicAffricatesTable.ShowTable(Data, set);
    MatchingConsonants.EjectiveAffricatesTable.ShowTable(Data, set);
    MatchingOther.ShowTable(Display.DisplaySegments, set);
  };

  ShowQuery = Block {
    TextHeight: 14 pts;

    Paragraph {
      HBox {
        TextControl(new(SearchData, attribute SearchDataClass.WordsContaining), 1 inches, null, new EdgeClass(1, 2)) {
          "Find Words Containing";
          Action: Actions.Refresh;
        };

        ButtonControl(null, null, PadAll(2)) {
          BorderRadius: 3;
          Action: new WordsContainingClass(SearchData);
          TextColor: Colors.Green;
          Icons.search;
        };
      }
    };
  };

  override GetDocument = Document(new(new(0.5 inches, 0.75 inches, 0.5 inches, 0.5 inches))) {
    var style = MainContentStyle;

    ShowQuery;

    TextHeight: 9 pts;

    ContentClass[] content = [
      new CognateCoverageClass(Data),
      new PriorTreeClass(Data),
      new SegmentAssignmentsClass(Data),
      new SegmentTransitionClass,
      new ConceptGroupsClass(Data),
      new AppendixClass("Words containing each segment", Display.ShowWordsForEachSegment),
      new AppendixClass("Word Lists by Language", DisplayWords.ShowWordsByLanguage(Data)),
      new AppendixClass("Segment Groups", ShowSegmentTables),
      new AppendixClass(Lang.IPAFullName, Display.IPASegmentTable),
      new AppendixClass(Lang.Diacritics, MatchingDiacritics.ShowTable),
      new AppendixClass(Lang.Languages, Display.ShowLanguageDetails(style)),
      new AppendixClass(Lang.ConceptsUsed, AllWords.ShowTable(10 pts, Data)),
//      new("Euler Feature Diagram", new EulerDiagramClass().FeatureChart(Data)),
    ];

    foreach (var c in content) {
      style.Heading1 {
        PageBreakBefore: true;
        c.Title;
      };

      var caption = c.GetCaption(style);
      if (caption is not null) {
        style.FirstPar {
          caption;
        };
      }

      c.GetBody(style);
    }
  };
}

//======================================================================

class ConceptGroupsClass: DataContentClass {
  Constructor(DataSetClass data) {
    super.Constructor(data, "Concept Groups");
  }

  override GetBody(ContentStyleClass style) = Block {
    WordGroups[] groups = WordGroups.Values[1..];
    Table(PaperStyle.TableBorder, null, [0.25 inches] + [1 inch] * (2+groups.Length)) {
      Row {
        PaperStyle.HeaderCell;
        PaperStyle.HeaderCell {
          Lang.Concept;
        };
        PaperStyle.HeaderCell {
          "Type";
        };
        foreach (var g in groups) {
          PaperStyle.HeaderCell {
            g.Name;
          };
        }
      };
      foreach (var concept in Data.UsedConcepts) {
        PaperStyle.RowBar(each0) {
          each0;
          concept.Name;
          concept.WordType.Name;
          foreach (var g in groups) {
            Cell {
              HAlign: HAligns.Center;
              if (concept.WordGroup.HasFlag(g))
                Tex.bullet;
            }
          }
        }
      }
    }
  };
}

//======================================================================

class PriorTreeClass: DataContentClass {
  Constructor(DataSetClass data) {
    super.Constructor(data, "Prior Trees");
  }

  override GetBody(ContentStyleClass style) = Block {
    Paragraph {
      foreach (var tree in Data.PriorTrees)
        PaperStyle.ShowTree(style, tree, 30%, Lang.Tree+each1);
    };
  };
}

//======================================================================

class CognateCoverageClass: DataContentClass {
  Constructor(DataSetClass data) {
    super.Constructor(data, "Cognate Coverage");
  }

  override GetBody(ContentStyleClass style) = Block {
    style.Heading1 {
      "By Language";
    };

    var size = new SizeClass(ExtentWidth, 3 inches);
    Chart(size.Width, size.Height) {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;
      ValueLabel: "%";

      XAxis: ChartAxis {
        (each Data.Taxa).Language;
      };
      ValueAxis: ChartAxis;

      ChartSeries {
        foreach (var t in Data.Taxa)
          Data.Coverage(t) * 100.0;
      };
    };
    Paragraph;
    style.Heading1 {
      "By Number of Languages";
    };

    var coverage = Data.CoverageByLanguages;
    Chart(size.Width, size.Height) {
      Type: ChartTypes.Column;
      TextHeight: 10 pts;

      ValueLabel: HBox {
        Lang.Cognates;
        Transform: TransformClass.Rotate(90 degrees);
        TransformFit: true;
      };
      ValueAxis: ChartAxis;

      XAxis: ChartAxis {
        0..<coverage.Length step 1;
      };
      XLabel: "Languages Included";

      ChartSeries {
        foreach (var c in coverage)
          c;
      };
    };
  };
}

//======================================================================

class AppendixClass: ContentClass {
  var Body;

  Constructor(title, body) {
    super.Constructor(title);
    Body = body;
  }

  override GetBody(ContentStyleClass style) = Body;
}

//======================================================================

class ConfigurationViewClass: DocumentClass {
  var DataSetClass Data;
  var TreeSetClass TreeSet;

  Constructor(DataSetClass data, TreeSetClass treeset) {
    super.Constructor(#7fc3842e-41d2-4b65-bcd0-be2fd9ede5b2#, "Configuration File");
    Data    = data;
    TreeSet = treeset;
  }

  override GetDocument = Document {
    new ConfigFileClass(Data, TreeSet.Custom.Run[0], TreeSet.Tree).Show;
  };
}

//======================================================================

class WordViewClass: DocumentClass {
  var DataSetClass     Data;
  var PartitionClass[] Partitions;

  Constructor(DataSetClass data, PartitionClass[] partitions) {
    super.Constructor(#a12b9731-b78e-49e1-986f-a72af5d1ec25#, "Word File");
    Data       = data;
    Partitions = partitions;
  }

  ShowUniqueSegments = Span {
    PaperStyle.ReadOnly; PaperStyle.Variable("Segments"); " = [";
    Span {
      Separator: CommaSpace;
      ShowString(each ((each Data.UniqueSegments).Ipa));
    };
    "];";
  };

  ShowLanguages = TextBlock {
    Span {PaperStyle.ReadOnly; PaperStyle.Variable("LanguageSet"); " = [";};
    TextBlock {
      IndentSpace: 2;

      foreach (var l in Data.LanguageSet) {
        Span {
          PaperStyle.Variable("Languages");
          Dot;
          PaperStyle.Variable(l.Name);
          if (each1 < Data.LanguageSet.Length)
            CommaSpace;
        }
      }
    };
    "];";
  };

  ShowSegmentIndices(SegPartClass[] segments) = Span {
    "[";
    Span {
      Separator: CommaSpace;
      (each segments).Index;
    };
    "]";
  };

  ShowPartitions = TextBlock {
    Span {
      PaperStyle.ReadOnly; PaperStyle.Variable("PartitionInfoClass"); "[] "; PaperStyle.Variable("Partitions"); " = [";
    };

    foreach (var p in Partitions) {
      TextBlock {
        Span {
          "  "; PaperStyle.Keyword("new"); "(";
          ShowString(p.Name);
          ", ";
          ShowSegmentIndices(p.Segments);
          "),"
        }
      };
    }
    "];";
  };

  ShowVar(name, value) = Span {
    PaperStyle.Variable(name); " = "; value; ";";
  };

  ShowVariables = TextBlock {
    PaperStyle.NameSpace("Info");
    TextBlock {
      IndentSpace: 2;
      ShowVar("WordCutoff", Data.WordCutoff);
    };
    "}";
  };

  override GetDocument = Document {
    TextHeight: 9 pts;

    TextBlock {
      Span {
        PaperStyle.Keyword("using ");
        "Format, WordGroups;";
      };
      Empty;
      ShowVariables;
      Empty;

      ShowUniqueSegments;
      Empty;
      ShowLanguages;
      Empty;
      ShowPartitions;
      Empty;

      PaperStyle.NameSpace("Concepts");
      Empty;

      foreach (var cognate in Data.UsedCognates) {
        var concept = cognate.Concept;
        var lvector = new VectorClass(Data.LanguageSet.Length, null);

        foreach (var word in cognate.Words) {
          if (word.Aligned is valid)
            lvector.SetValue(word.Language.LangIndex, word);
        }

        Span {
          PaperStyle.Variable(concept.Name);
          Dot;
          PaperStyle.Variable(cognate.Name);
          " = [";
        };

        TextBlock {
          IndentSpace: 2;
          foreach (var word in lvector) {
            Span {
              if (word is valid)
                ShowSegmentIndices(word.Aligned);
              else
                PaperStyle.Keyword("null");
              Comma;
            }
          }
        };

        "];";
      }

      Empty;
      "}";
    };
  };
}

//======================================================================


