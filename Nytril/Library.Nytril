using Format, Units, Math, IO;
//======================================================================

class TaxonClass {
  var Name,
      Characters,
      Segments,
      NChar;

  Constructor(lang, index) {
    NChar      = 0;
    Name       = lang.GlobalVariableName;
    Segments   = GetSegments(index);
    Characters = (each Segments).SegmentToCharacter;
  }

  ShowLetters(maxlength, range) = Span {
    Span {
      Nexus.TaxonFormat;
      Name;
    };
    Space * (maxlength - Name.Length);
    foreach (var c in Characters[range])
      c.ShowLetter;
  };

  GetSegments(index) {
    var list = new ListClass(256);
    foreach (var concept in ConceptsList) {
      var ma   = Results.WordConceptArray[EachIndex];
      var word = ma.Cells[index];
      var pad  = ma.MaxLength - word.Segments.Length;
      NChar += word.Segments.Length + pad;

      list.Add(each word.Segments);
      for (var i = 0; i < pad; ++i)
        list.Add(IPA.GapSegment);
    }
    return list;
  }
}
//======================================================================

with Nexus {
  TaxonFormat = {TextColor: Colors.DarkGreen};

  CharacterList = ('A'..'Z' step 1) + ('a'..'z' step 1) + ('0'..'9' step 1);
  EndMarker     = ";";
  Missing       = "?";
  Quote         = "\"";

  Keyword(name) = Span {
    TextColor: Colors.Blue;
    name
  };

  Comment(text) = Span {
    TextColor: Colors.Green;
    "#"
    text
  };

  AddLine(name) = Span {
    Keyword(name);
    End: EndMarker;
  };

  AddValue(name, value) = Span {
    Space;
    Keyword(name);
    "=";
    value;
  };

  AddTaxon(taxon) = Span {
    TaxonFormat;
    Space;
    taxon.Name;
  };

  Scope(name) = TextBlock {
    IndentSpace: 2;
    Begin: Span {
      Keyword("begin");
      Space;
      name;
      EndMarker;
    };
    End: Span {
      Keyword("end");
      EndMarker;
      LineBreak;
    };
  };

  NexusFile = TextBlock {
    Style.MonoFamily;
    Comment("NEXUS");
  };

  Newick(node) = Span {
    if (node.Length > 0) {
      "(";
      Span {
        Separator: ",";
        Newick(each node)
      };
      ")";
    }
    node.Label;
    ":";
    node.BranchLength
  };

  ShowTreeLine(tree) = Span {
    "tree ";
    tree.GlobalVariableName;
    " = ";
    Newick(tree);
    EndMarker
  };

  GetTaxaLabels(tree) {
    var set = new DictionaryClass(256);
    VisitNodeTaxa(set, tree);
    return (each set).Name;
  }

  void VisitNodeTaxa(set, node) {
    var name = exists node.Language ? node.Name : null;
    if (valid name)
      set.Add(node, name);
    VisitNodeTaxa(set, each node);
  }

  CharacterFile(taxa) = NexusFile {
    var maxlength = Math.Max((each ((each taxa).Name)).Length) + 1;
    var nchar     = taxa[0].NChar;
    var range     = ((0..<nchar) / (Integer(DocMetrics.PageContent.Width / 9) - maxlength));

    Scope("taxa") {
      AddLine("dimensions") {
        AddValue("ntax", taxa.Length);
      };
      AddLine("taxlabels") {
        AddTaxon(each taxa);
      };
    };

    Scope("data") {
      AddLine("dimensions") {
        AddValue("ntax", taxa.Length);
        AddValue("nchar", nchar);
      };
      AddLine("format") {
        AddValue("datatype", "STANDARD");
        AddValue("interleave", "yes");
        AddValue("gap", IPA.GapSegment.Ipa);
        AddValue("missing", Missing);
        AddValue("symbols", Span {Quote; CharacterList[Results.UniqueSegments.IndexRange]; Quote});
      };
      Empty;
      Keyword("matrix");
      foreach (var r in range) {
        if (EachIndex > 0)
          Empty;

        (each taxa).ShowLetters(maxlength, r);
      }
      EndMarker;
    };

//    Scope("trees") {
//      ShowTreeLine(tree);
//    };
  };
}
//======================================================================

