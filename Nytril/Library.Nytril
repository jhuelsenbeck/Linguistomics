using Format, Units, Math, IO, Genetics;
//======================================================================

class LanguageClass {
  var Name,
      Cases;

  Constructor(name, cases=0) {
    Name  = name;
    Cases = cases;
  }
}
//======================================================================

class CognateClass {
  var Name,
      Title,
      Words,
      Concept,
      Cognate,
      MaxLength;

  Constructor(concept, cognate) {
    Name       = concept.GlobalVariableName;
    Title      = Span {Name; '-'; cognate.GlobalVariableName};
    Concept    = concept;
    Cognate    = cognate;
    MaxLength  = 0;
  }
}
//======================================================================

class WordClass {
  var Language,
      Cognate,
      Text,
      Segments,
      Aligned,
      Padded;

  Constructor(language, cognate, text) {
    Language = language;
    Cognate  = cognate;
    Text     = text;
    if (text.Length > 0) {
      var segments = IPA.SegmentDictionary.FindTokens(text, IPA.NoSegment);
      Aligned  = Math.FindSlice(segments, s => s.Gap or (not s.Punctuation));
      Segments = Math.FindSlice(segments, s => not s.Punctuation);

      // Test that the word's text is the same as the segments converted back into text
      var view = String(Span {(each segments).Ipa});
      System.Assert(text == view, "Round-trip error with text {0}-{1}"(text, view), text);
    }
    else {
      Segments = [];
      Aligned  = [];
    }
  }

  CleanText = Span {
    (each Segments).ShowSegment;
  };

  ShowConcept = Span {
    Style.SansSerif;
    Popup: this;
    Cognate.Title;
  };

  override GetPopup = Frame {
    AllWords.ShowConceptTable(Cognate);
  };
}
//======================================================================

class TaxonClass {
  var Name,
      Language,
      Index;

  Constructor(lang) {
    Index    = EachIndex;
    Language = lang;
    Name     = lang.GlobalVariableName;
  }
}
//======================================================================

class ResultsClass {
  var UsedCognates,
      TaxaArray,
      UniqueSegments,
      UsedSegments;

  Constructor {
    var list = new ListClass(256);
    foreach (var concept in UsedConcepts) {
      foreach (var cognate in concept) {
        var count = 0;
        foreach (var t in cognate) {
          if (t[0].Length > 0)
            ++count;
        }
        if (count > 1)
          list.Add(new CognateClass(concept, cognate));
      }
    }
    UsedCognates = list.ToArray;

    TaxaArray = new TaxonClass(each UsedLanguages);

    foreach (var cognate in UsedCognates)
      ComputeCognate(cognate);

    var set = new DictionaryClass(256);
    foreach (var cognate in UsedCognates) {
      foreach (var word in cognate.Words) {
        foreach (var s in word.Segments)
          set.Add(s);
      }
    }

    UniqueSegments = set.Values;
    UsedSegments   = UniqueSegments;//IPA.Segments;
  }

  void ComputeCognate(cognate) {
    var words     = new ListClass(TaxaArray.Length);
    var maxlength = 0;

    foreach (var taxon in TaxaArray) {
      var word = null;
      foreach (var langword in cognate.Cognate) {
        if (langword.GlobalVariableName == taxon.Name) {
          var t = langword[0];
          maxlength = Math.Max([maxlength, t.Length]);

          word = new WordClass(taxon.Language, cognate, t);
          break;
        }
      }
      if (word == null)
        word = new WordClass(taxon.Language, cognate, Empty);
      words.Add(word);
    }

    cognate.Words     = words.ToArray;
    cognate.MaxLength = maxlength;

    foreach (var w in cognate.Words) {
      var a = w.Aligned;
      if (a.Length > 0) {
        if (a.Length < maxlength)
          w.Padded = a + [IPA.Segments.GapSegment] * (maxlength - a.Length);
        else
          w.Padded = a;
      }
      else
        w.Padded = [IPA.Segments.MissingSegment] * maxlength;
    }
  }
}

Results = new ResultsClass();
//======================================================================

with Nexus {
  TaxonFormat   = {TextColor: Colors.DarkBlue};
  CommentFormat = {TextColor: Colors.Green};
  CharacterList = ('A'..'Z' step 1) + ('a'..'z' step 1) + ('0'..'9' step 1) + ['!', '$', '%', '&', '`', '*', '+', ',', '.', '/', '<', '_', '=', '@'];
  EndMarker     = ";";
  Quote         = "\"";

  GetCharacter(i) = i < CharacterList.Length ? CharacterList[i] : '*';

  Keyword(name) = Span {
    CommentFormat;
    name;
  };

  Comment(text) = Span {
    TextColor: Colors.Green;
    "[ ";
    text;
    " ]";
  };

  AddLine(name) = Span {
    Keyword(name);
    End: EndMarker;
  };

  AddValue(name, value=null) = Span {
    Space;
    Keyword(name);
    if (exists value) {
      "=";
      value;
    }
  };

  AddTaxon(taxon) = Span {
    TaxonFormat;
    Space;
    taxon.Name;
  };

  Scope(name) = TextBlock {
    IndentSpace: 2;
    Begin: Span {
      Keyword("begin");
      Space;
      name;
      EndMarker;
    };
    End: Span {
      Keyword("end");
      EndMarker;
      LineBreak;
    };
  };

  NexusFile = TextBlock {
    Style.MonoFamily;
    Span {
      TextColor: Colors.DarkBlue;
      "#NEXUS";
    };
  };

  Newick(node) = Span {
    if (node.Length > 0) {
      "(";
      Span {
        Separator: ",";
        Newick(each node)
      };
      ")";
    }
    node.Label;
    ":";
    node.BranchLength
  };

  ShowTreeLine(tree) = Span {
    "tree ";
    tree.GlobalVariableName;
    " = ";
    Newick(tree);
    EndMarker
  };

  GetTaxaLabels(tree) {
    var set = new DictionaryClass(256);
    VisitNodeTaxa(set, tree);
    return (each set).Name;
  }

  void VisitNodeTaxa(set, node) {
    var name = exists node.Language ? node.Name : null;
    if (valid name)
      set.Add(node, name);
    VisitNodeTaxa(set, each node);
  }

  MaxNameLength = Math.Max((each ((each Results.TaxaArray).Name)).Length) + 1;

  GetList(taxon, index) {
    var space = false;

    var list = new ListClass(100);
    foreach (var segment in taxon.AlignedList[index]) {
      if (segment.Punctuation) {
        list.Add("-");
        space = false;
      }
      else
        list.Add(segment.ToCharacter.ShowLetter);
    }
    return list;
  }

  WriteTaxa(cognate, paper, maxlength) = TextBlock {
    foreach (var taxon in Results.TaxaArray) {
      Span {
        Span {
          Nexus.TaxonFormat;
          taxon.Name;
          Link: taxon;
        };
        Space * (maxlength - taxon.Name.Length);
        foreach (var segment in cognate.Words[taxon.Index].Padded) {
          if (segment != null) {
            var c = segment.ToCharacter;
            if (valid c)
              c.ShowLetter;
          }
        }

        switch (paper) {
          case 0:
            break;

          case 1:
//            Space*4;
//            Comment( Span{each (each taxon.AlignedList[index]).Ipa});
            break;

          case 2:
            Span {
              CommentFormat;
              Style.IPAFamily;
              Tab;
              foreach (var segment in cognate.Words[taxon.Index].Aligned)
                segment.GetBlock;
            };
            break;
        }
      };
    }
  };

  TKFFile(cognate, paper) = TextBlock {
    if (paper > 0)
      Comment(cognate.Name);

    Span {
      Results.TaxaArray.Length;
      Space;
      cognate.Words[0].Padded.Length;
      Space;
      Results.UniqueSegments.Length;
    };
    WriteTaxa(cognate, paper, MaxNameLength);
  };

  TKFFiles = TextBlock {
    Style.MonoFamily;
    TabStops: [4 inches];

    foreach (var cognate in Results.UsedCognates) {
      TKFFile(cognate, 2);
      Empty;
    }
  };

  CharacterFile(paper) = NexusFile {
    var maxlength = MaxNameLength;
    var ntax      = Results.TaxaArray.Length;

    TabStops: [4 inches];

    Scope("taxa") {
      AddLine("dimensions") {
        AddValue("ntax", ntax);
      };
      AddLine("taxlabels") {
        AddTaxon(each Results.TaxaArray);
      };
    };

    Scope("characters") {
      AddLine("dimensions") {
        AddValue("ntax", ntax);
        AddValue("nchar", Sum((each Results.UsedCognates).MaxLength));
      };
      AddLine("format") {
        AddValue("datatype", "STANDARD");
        AddValue("interleave", "yes");
        AddValue("respectcase");
        AddValue("gap", IPA.Segments.GapSegment.Ipa);
        AddValue("missing", IPA.Segments.MissingSegment.Ipa);
        AddValue("symbols", Span {Quote; CharacterList; Quote});

//        AddValue("tokens");
//        AddValue("items", "States");
      };

/*
      AddLine("charstatelabels") {
        " 1 value/";
        Span {
          Separator: Space;
          CharacterList[Results.UniqueSegments.IndexRange];
        }
      };
*/
      Empty;
      Keyword("matrix");

      foreach (var cognate in Results.UsedCognates) {
        if (EachIndex > 0)
          Empty;

        Comment(cognate.Name);
        WriteTaxa(cognate, paper, maxlength);
      }
      EndMarker;
    };

//    Scope("trees") {
//      ShowTreeLine(tree);
//    };
  };
}
//======================================================================

