using Format, Units, Math, IO
//======================================================================

with TreeLib
  let GetNodeLabel(node) = node.Data?.SymbolName

  let VisitNodeTaxa(set, node) begin
    set.AddReference(node.Data);
    VisitNodeTaxa(set, each node);
  end

  let GetTaxaLabels(tree) begin
    var set = Type.Dictionary(256);
    VisitNodeTaxa(set, tree);
    return (each set.ValueList).SymbolName;
  end
end
//======================================================================

with Nexus
  let CharacterList = ('A'..'Z' step 1) + ('a'..'z' step 1) + ('0'..'9' step 1)
  let EndMarker     = ";"
  let Missing       = "?"
  let Gap           = '-'
  let Quote         = "\""

  let Keyword(name) = Span {
    TextColor: Colors.Blue,
    name
  }

  let Comment(text) = Span {
    TextColor: Colors.Green,
    "#"
    text
  }

  let AddLine(name) = Span {
    Keyword(name),
    End: EndMarker,
  }

  let AddValue(name, value) = Span {
    Space,
    Keyword(name),
    "=",
    value,
  }

  let Scope(name) = TextBlock {
    IndentSpace: 2,
    Begin: Span {
      Keyword("begin"),
      Space,
      name,
      EndMarker,
    },
    End: Span {
      Keyword("end"),
      EndMarker,
    },
  }

  let NexusFile = TextBlock {
    Comment("NEXUS"),
  }

  let Newick(node) = Span {
    if (node.Length > 0)
      "(",
      Span {
        Separator: ",",
        Newick(each node)
      },
      ")",
    end,
    TreeLib.GetNodeLabel(node),
    ":",
    node.Branch
  }

  let ShowTreeLine(ref tree) = Span {
    "tree ",
    tree.SymbolName,
    " = ",
    Newick(tree),
    EndMarker
  }

  let TreeFormat(taxa) = NexusFile {
    Scope("taxa") {
      AddLine("dimensions") {
        AddValue("ntax", taxa.Length),
      },
      AddLine("taxlabels") {
        Space,
        Span {
          Separator: Space,
          taxa,
        },
      },
    }
  }

  let TreeFile(ref tree) = TreeFormat(TreeLib.GetTaxaLabels(tree)) {
    Scope("trees") {
      ShowTreeLine(ref tree),
    }
  }

/*
  let GetGene(langindex, meaning) begin
    var ma   = WordMeaningArray[EachIndex];
    var cell = ma.Cells[langindex];
    return Span {
      if (EachIndex mod 2 == 0)
        TextBackground: 90%
      else
        TextColor: Colors.White,
        TextBackground: 50%
      end,
      Popup: CharacterPopup(cell.Word),
      cell.Characters,
      "-" * (ma.MaxLength - cell.Count),
    };
  end
*/

  let ShowCharacter(c) = Span {
    Popup: IPA.SegmentPopup.Call(c.Segment),
    c.Character
  }

  let ShowTaxon(maxlength, taxon, range) = Span {
    taxon.Name,
    Space * (maxlength - taxon.Name.Length),
    ShowCharacter(each taxon.Characters[range])
  }

  let ShowTaxonSet(maxlength, taxa, range) = {
    ShowTaxon(maxlength, each taxa, range),
    Empty,
  }

  let CharacterFile(taxa) begin
    var maxlength = Math.Max((each taxa).Name.Length)+1;
    return NexusFile {
      Scope("DATA") {
        AddLine("dimensions") {
          AddValue("ntax", taxa.Length),
          AddValue("nchar", Results.UniqueSegments.Length),
        },
        AddLine("format") {
          AddValue("datatype", "STANDARD"),
          AddValue("gap", Gap),
          AddValue("missing", Missing),
          AddValue("symbols", Span {Quote, CharacterList[Results.UniqueSegments.IndexRange], Quote}),
        },
        Empty,
        Keyword("matrix"),
        ShowTaxonSet(maxlength, taxa, each ((0..<(taxa[0].Characters.Length)) / (70 - maxlength))),
        EndMarker,
      }
    }
  end
end
//======================================================================

