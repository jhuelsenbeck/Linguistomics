using Format, Units, Math, IO;
//======================================================================

with TreeLib
  GetNodeLabel(node) = node.?Data?.Name;

  VisitNodeTaxa(set, node) begin
    if (node.?Data)
      set.AddElement(node.Data);
    end
    VisitNodeTaxa(set, each node);
  end

  GetTaxaLabels(tree) begin
    var set = Type.Dictionary(256);
    VisitNodeTaxa(set, tree);
    return (each set.ValueList).Name;
  end
end
//======================================================================

with Nexus
  CharacterList = ('A'..'Z' step 1) + ('a'..'z' step 1) + ('0'..'9' step 1);
  EndMarker     = ";";
  Missing       = "?";
  Quote         = "\"";

  Keyword(name) = Span {
    TextColor: Colors.Blue,
    name
  };

  Comment(text) = Span {
    TextColor: Colors.Green,
    "#"
    text
  };

  AddLine(name) = Span {
    Keyword(name),
    End: EndMarker,
  };

  AddValue(name, value) = Span {
    Space,
    Keyword(name),
    "=",
    value,
  };

  Scope(name) = TextBlock {
    IndentSpace: 2,
    Begin: Span {
      Keyword("begin"),
      Space,
      name,
      EndMarker,
    },
    End: Span {
      Keyword("end"),
      EndMarker,
    },
  };

  NexusFile = TextBlock {
    Comment("NEXUS"),
  };

  Newick(node) = Span {
    if (node.Length > 0)
      "(",
      Span {
        Separator: ",",
        Newick(each node)
      },
      ")",
    end,
    TreeLib.GetNodeLabel(node),
    ":",
    node.Branch
  };

  ShowTreeLine(tree) = Span {
    "tree ",
    tree.Name,
    " = ",
    Newick(tree),
    EndMarker
  };

  TreeFormat(taxa) = NexusFile {
    Scope("taxa") {
      AddLine("dimensions") {
        AddValue("ntax", taxa.Length),
      },
      AddLine("taxlabels") {
        Space,
        Span {
          Separator: Space,
          taxa,
        },
      },
    }
  };

  TreeFile(tree) = TreeFormat(TreeLib.GetTaxaLabels(tree)) {
    Scope("trees") {
      ShowTreeLine(tree),
    }
  };

  ShowTaxon(maxlength, taxon, range) = Span {
    taxon.TaxonName,
    Space * (maxlength - taxon.TaxonName.Length),
    IPA.ShowCharacter(each taxon.Characters[range])
  };

  ShowTaxonSet(maxlength, taxa, range) = {
    ShowTaxon(maxlength, each taxa, range),
    Empty,
  };

  CharacterFile(taxa) begin
    var maxlength = Math.Max((each taxa).TaxonName.Length)+1;
    var total     = taxa[0].Characters.Length;
    return NexusFile {
      Scope("DATA") {
        AddLine("dimensions") {
          AddValue("ntax", taxa.Length),
          AddValue("nchar", total),
        },
        AddLine("format") {
          AddValue("datatype", "STANDARD"),
          AddValue("gap", IPA.GapSegment.Ipa),
          AddValue("missing", Missing),
          AddValue("symbols", Span {Quote, CharacterList[Results.UniqueSegments.IndexRange], Quote}),
        },
        Empty,
        Keyword("matrix"),
        ShowTaxonSet(maxlength, taxa, each ((0..<total) / (70 - maxlength))),
        EndMarker,
      }
    };
  end
end
//======================================================================

