using Format, Units, Math, IO
//======================================================================

with TreeLib
  let GetNodeLabel(node) = node.Data?.SymbolName

  let VisitNodeTaxa(set, node) begin
    if (node.Data)
      set.AddReference(node.Data);
    end;
    VisitNodeTaxa(set, each node);
  end

  let GetTaxaLabels(tree) begin
    var set = Type.Dictionary(256);
    VisitNodeTaxa(set, tree);
    return (each set).SymbolName;
  end
end
//======================================================================

with Nexus
  let CharacterList = ('A'..'Z' step 1) + ('a'..'z' step 1) + ('0'..'9' step 1)
  let EndLine       = ";"
  let Quote         = "\""

  let Keyword(name) = Span {
    TextColor: Colors.Blue,
    name
  }

  let Comment(text) = Span {
    TextColor: Colors.Green,
    "#"
    text
  }

  let AddLine(name) = Span {
    Keyword(name)
  }

  let AddValue(name, value) = Span {
    Space,
    Keyword(name),
    "=",
    value,
  }

  let BeginScope(name) = TextBlock {
    SpaceIndent: 2,
    Begin: Span {
      Keyword("begin"),
      Space,
      name,
      EndLine,
    },
    End: Span {
      Keyword("end"),
      EndLine,
    },
  }


  let SourceFile = TextBlock {
    Comment("NEXUS"),
    Empty,
  }

  let Newick(node) = Span {
    if (node.Length > 0)
      "(",
      Span {
        Separator: ",",
        Newick(each node)
      },
      ")",
    end,
    TreeLib.GetNodeLabel(node),
    ":",
    node.Branch
  }

  let ShowTreeLine(ref tree) = Span {
    "tree ",
    tree.SymbolName,
    " = ",
    Newick(tree),
    EndLine
  }

  let TreeFormat(taxa) = SourceFile {
    BeginScope("taxa") {
      AddLine("dimensions") {
        AddValue("ntax", taxa.Length),
        EndLine
      },
      AddLine("taxlabels") {
        Space,
        Span {
          Separator: Space,
          taxa,
        },
        EndLine,
      },
    }
  }

  let TreeFile(ref tree) = TreeFormat(TreeLib.GetTaxaLabels(tree)) {
    BeginScope("trees") {
      ShowTreeLine(ref tree),
    }
  }

  let ShowTaxon(taxon) = Span {
    taxon.Name,
    Space * (32 - taxon.Name.Length),
    taxon.Characters
  }

  let CharacterFile(taxa, charmax) = SourceFile {
    BeginScope("DATA") {
      AddLine("dimensions") {
        AddValue("ntax", taxa.Length),
        AddValue("nchar", charmax),
        EndLine
      },
      AddLine("format") {
        AddValue("datatype", "STANDARD"),
        AddValue("gap", "-"),
        AddValue("missing", "?"),
        AddValue("symbols", Span {Quote, CharacterList[0..charmax], Quote}),
        EndLine
      },
      Keyword("matrix"),
      ShowTaxon(each taxa),
      Empty,
      EndLine,
    },
  }
end
//======================================================================

